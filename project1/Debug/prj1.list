
prj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000304  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800049c  0800049c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800049c  0800049c  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800049c  0800049c  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800049c  0800049c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800049c  0800049c  0000149c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004a0  080004a0  000014a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004a4  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004a8  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004a8  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012c5  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000519  00000000  00000000  000032f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00003818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000150  00000000  00000000  000039f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013cbf  00000000  00000000  00003b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002118  00000000  00000000  00017807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ec87  00000000  00000000  0001991f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000985a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005c8  00000000  00000000  000985ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00098bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000484 	.word	0x08000484

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000484 	.word	0x08000484

080001d8 <main>:
void LED_Init();
void TIM1_Init();
void delay_1s();

int main()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	LED_Init();
 80001dc:	f000 f864 	bl	80002a8 <LED_Init>
	TIM1_Init();
 80001e0:	f000 f82e 	bl	8000240 <TIM1_Init>
	while (1)
	{
		LED_Ctrl(1);
 80001e4:	2001      	movs	r0, #1
 80001e6:	f000 f889 	bl	80002fc <LED_Ctrl>
		delay_1s();
 80001ea:	f000 f807 	bl	80001fc <delay_1s>
		LED_Ctrl(0);
 80001ee:	2000      	movs	r0, #0
 80001f0:	f000 f884 	bl	80002fc <LED_Ctrl>
		delay_1s();
 80001f4:	f000 f802 	bl	80001fc <delay_1s>
		LED_Ctrl(1);
 80001f8:	bf00      	nop
 80001fa:	e7f3      	b.n	80001e4 <main+0xc>

080001fc <delay_1s>:
	}
	return 0;
}

void delay_1s()
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
	uint16_t* TIM1_SR = (uint16_t*) (TIM1_BASE_ADDR + 0x10);
 8000202:	4b0d      	ldr	r3, [pc, #52]	@ (8000238 <delay_1s+0x3c>)
 8000204:	607b      	str	r3, [r7, #4]
	uint16_t* TIM1_CNT = (uint16_t*) (TIM1_BASE_ADDR + 0x24);
 8000206:	4b0d      	ldr	r3, [pc, #52]	@ (800023c <delay_1s+0x40>)
 8000208:	603b      	str	r3, [r7, #0]
	*TIM1_CNT = 0;
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	2200      	movs	r2, #0
 800020e:	801a      	strh	r2, [r3, #0]
	while ((*TIM1_SR & 1) == 0);
 8000210:	bf00      	nop
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	881b      	ldrh	r3, [r3, #0]
 8000216:	f003 0301 	and.w	r3, r3, #1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d0f9      	beq.n	8000212 <delay_1s+0x16>
	*TIM1_SR &= ~(1 << 0);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	881b      	ldrh	r3, [r3, #0]
 8000222:	f023 0301 	bic.w	r3, r3, #1
 8000226:	b29a      	uxth	r2, r3
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	801a      	strh	r2, [r3, #0]
}
 800022c:	bf00      	nop
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr
 8000238:	40010010 	.word	0x40010010
 800023c:	40010024 	.word	0x40010024

08000240 <TIM1_Init>:

void TIM1_Init()
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM1_CLK_ENABLE();
 8000246:	2300      	movs	r3, #0
 8000248:	603b      	str	r3, [r7, #0]
 800024a:	4b13      	ldr	r3, [pc, #76]	@ (8000298 <TIM1_Init+0x58>)
 800024c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800024e:	4a12      	ldr	r2, [pc, #72]	@ (8000298 <TIM1_Init+0x58>)
 8000250:	f043 0301 	orr.w	r3, r3, #1
 8000254:	6453      	str	r3, [r2, #68]	@ 0x44
 8000256:	4b10      	ldr	r3, [pc, #64]	@ (8000298 <TIM1_Init+0x58>)
 8000258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800025a:	f003 0301 	and.w	r3, r3, #1
 800025e:	603b      	str	r3, [r7, #0]
 8000260:	683b      	ldr	r3, [r7, #0]
	uint16_t* TIM1_CR1 = (uint16_t*) (TIM1_BASE_ADDR + 0x00);
 8000262:	4b0e      	ldr	r3, [pc, #56]	@ (800029c <TIM1_Init+0x5c>)
 8000264:	60fb      	str	r3, [r7, #12]
	uint16_t* TIM1_PSC = (uint16_t*) (TIM1_BASE_ADDR + 0x28);
 8000266:	4b0e      	ldr	r3, [pc, #56]	@ (80002a0 <TIM1_Init+0x60>)
 8000268:	60bb      	str	r3, [r7, #8]
	uint16_t* TIM1_ARR = (uint16_t*) (TIM1_BASE_ADDR + 0x2C);
 800026a:	4b0e      	ldr	r3, [pc, #56]	@ (80002a4 <TIM1_Init+0x64>)
 800026c:	607b      	str	r3, [r7, #4]
	/* set ARR */
	*TIM1_ARR = 1000;
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000274:	801a      	strh	r2, [r3, #0]
	/* set prescaler */
	*TIM1_PSC = 15999;
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800027c:	801a      	strh	r2, [r3, #0]
	/* counter enable */
	*TIM1_CR1 |= 1 << 0;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	881b      	ldrh	r3, [r3, #0]
 8000282:	f043 0301 	orr.w	r3, r3, #1
 8000286:	b29a      	uxth	r2, r3
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	801a      	strh	r2, [r3, #0]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	40023800 	.word	0x40023800
 800029c:	40010000 	.word	0x40010000
 80002a0:	40010028 	.word	0x40010028
 80002a4:	4001002c 	.word	0x4001002c

080002a8 <LED_Init>:

void LED_Init()
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80002ae:	2300      	movs	r3, #0
 80002b0:	603b      	str	r3, [r7, #0]
 80002b2:	4b10      	ldr	r3, [pc, #64]	@ (80002f4 <LED_Init+0x4c>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b6:	4a0f      	ldr	r2, [pc, #60]	@ (80002f4 <LED_Init+0x4c>)
 80002b8:	f043 0308 	orr.w	r3, r3, #8
 80002bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80002be:	4b0d      	ldr	r3, [pc, #52]	@ (80002f4 <LED_Init+0x4c>)
 80002c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c2:	f003 0308 	and.w	r3, r3, #8
 80002c6:	603b      	str	r3, [r7, #0]
 80002c8:	683b      	ldr	r3, [r7, #0]
	uint32_t* GPIOD_MODER = (uint32_t*) (GPIOD_BASE + 0x00);
 80002ca:	4b0b      	ldr	r3, [pc, #44]	@ (80002f8 <LED_Init+0x50>)
 80002cc:	607b      	str	r3, [r7, #4]
	*GPIOD_MODER &= ~(0b11 << (15 * 2));
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |= (0b01 << (15 * 2));
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	601a      	str	r2, [r3, #0]
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	40023800 	.word	0x40023800
 80002f8:	40020c00 	.word	0x40020c00

080002fc <LED_Ctrl>:

void LED_Ctrl(char on)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	71fb      	strb	r3, [r7, #7]
	uint32_t* GPIOD_ODR = (uint32_t*) (GPIOD_BASE + 0x14);
 8000306:	4b0c      	ldr	r3, [pc, #48]	@ (8000338 <LED_Ctrl+0x3c>)
 8000308:	60fb      	str	r3, [r7, #12]
	if (on)
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d006      	beq.n	800031e <LED_Ctrl+0x22>
	{
		*GPIOD_ODR |= 1 << 15;
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		*GPIOD_ODR &= ~(1 << 15);
	}
}
 800031c:	e005      	b.n	800032a <LED_Ctrl+0x2e>
		*GPIOD_ODR &= ~(1 << 15);
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	601a      	str	r2, [r3, #0]
}
 800032a:	bf00      	nop
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40020c14 	.word	0x40020c14

0800033c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000340:	bf00      	nop
 8000342:	e7fd      	b.n	8000340 <NMI_Handler+0x4>

08000344 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000348:	bf00      	nop
 800034a:	e7fd      	b.n	8000348 <HardFault_Handler+0x4>

0800034c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000350:	bf00      	nop
 8000352:	e7fd      	b.n	8000350 <MemManage_Handler+0x4>

08000354 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000358:	bf00      	nop
 800035a:	e7fd      	b.n	8000358 <BusFault_Handler+0x4>

0800035c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000360:	bf00      	nop
 8000362:	e7fd      	b.n	8000360 <UsageFault_Handler+0x4>

08000364 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr

08000372 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000372:	b480      	push	{r7}
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr

0800038e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800038e:	b580      	push	{r7, lr}
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000392:	f000 f83f 	bl	8000414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
	...

0800039c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003a0:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <SystemInit+0x20>)
 80003a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003a6:	4a05      	ldr	r2, [pc, #20]	@ (80003bc <SystemInit+0x20>)
 80003a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	e000ed00 	.word	0xe000ed00

080003c0 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 80003c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003c4:	f7ff ffea 	bl	800039c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003c8:	480c      	ldr	r0, [pc, #48]	@ (80003fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003ca:	490d      	ldr	r1, [pc, #52]	@ (8000400 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000404 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d0:	e002      	b.n	80003d8 <LoopCopyDataInit>

080003d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d6:	3304      	adds	r3, #4

080003d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003dc:	d3f9      	bcc.n	80003d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003de:	4a0a      	ldr	r2, [pc, #40]	@ (8000408 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003e0:	4c0a      	ldr	r4, [pc, #40]	@ (800040c <LoopFillZerobss+0x22>)
  movs r3, #0
 80003e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e4:	e001      	b.n	80003ea <LoopFillZerobss>

080003e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e8:	3204      	adds	r2, #4

080003ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003ec:	d3fb      	bcc.n	80003e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003ee:	f000 f825 	bl	800043c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003f2:	f7ff fef1 	bl	80001d8 <main>
  bx  lr    
 80003f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000400:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000404:	080004a4 	.word	0x080004a4
  ldr r2, =_sbss
 8000408:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800040c:	20000024 	.word	0x20000024

08000410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
   b  Infinite_Loop
 8000410:	e7fe      	b.n	8000410 <ADC_IRQHandler>
	...

08000414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000418:	4b06      	ldr	r3, [pc, #24]	@ (8000434 <HAL_IncTick+0x20>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	461a      	mov	r2, r3
 800041e:	4b06      	ldr	r3, [pc, #24]	@ (8000438 <HAL_IncTick+0x24>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4413      	add	r3, r2
 8000424:	4a04      	ldr	r2, [pc, #16]	@ (8000438 <HAL_IncTick+0x24>)
 8000426:	6013      	str	r3, [r2, #0]
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	20000000 	.word	0x20000000
 8000438:	20000020 	.word	0x20000020

0800043c <__libc_init_array>:
 800043c:	b570      	push	{r4, r5, r6, lr}
 800043e:	4d0d      	ldr	r5, [pc, #52]	@ (8000474 <__libc_init_array+0x38>)
 8000440:	4c0d      	ldr	r4, [pc, #52]	@ (8000478 <__libc_init_array+0x3c>)
 8000442:	1b64      	subs	r4, r4, r5
 8000444:	10a4      	asrs	r4, r4, #2
 8000446:	2600      	movs	r6, #0
 8000448:	42a6      	cmp	r6, r4
 800044a:	d109      	bne.n	8000460 <__libc_init_array+0x24>
 800044c:	4d0b      	ldr	r5, [pc, #44]	@ (800047c <__libc_init_array+0x40>)
 800044e:	4c0c      	ldr	r4, [pc, #48]	@ (8000480 <__libc_init_array+0x44>)
 8000450:	f000 f818 	bl	8000484 <_init>
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	10a4      	asrs	r4, r4, #2
 8000458:	2600      	movs	r6, #0
 800045a:	42a6      	cmp	r6, r4
 800045c:	d105      	bne.n	800046a <__libc_init_array+0x2e>
 800045e:	bd70      	pop	{r4, r5, r6, pc}
 8000460:	f855 3b04 	ldr.w	r3, [r5], #4
 8000464:	4798      	blx	r3
 8000466:	3601      	adds	r6, #1
 8000468:	e7ee      	b.n	8000448 <__libc_init_array+0xc>
 800046a:	f855 3b04 	ldr.w	r3, [r5], #4
 800046e:	4798      	blx	r3
 8000470:	3601      	adds	r6, #1
 8000472:	e7f2      	b.n	800045a <__libc_init_array+0x1e>
 8000474:	0800049c 	.word	0x0800049c
 8000478:	0800049c 	.word	0x0800049c
 800047c:	0800049c 	.word	0x0800049c
 8000480:	080004a0 	.word	0x080004a0

08000484 <_init>:
 8000484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000486:	bf00      	nop
 8000488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048a:	bc08      	pop	{r3}
 800048c:	469e      	mov	lr, r3
 800048e:	4770      	bx	lr

08000490 <_fini>:
 8000490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000492:	bf00      	nop
 8000494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000496:	bc08      	pop	{r3}
 8000498:	469e      	mov	lr, r3
 800049a:	4770      	bx	lr
