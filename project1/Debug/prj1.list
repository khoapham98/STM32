
prj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000770  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000908  08000908  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000908  08000908  0000200c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000908  08000908  0000200c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000908  08000908  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000908  08000908  00001908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800090c  0800090c  0000190c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000910  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  2000000c  0800091c  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  0800091c  00002044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000025c3  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a53  00000000  00000000  000045ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000368  00000000  00000000  00005058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000026f  00000000  00000000  000053c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014b2c  00000000  00000000  0000562f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000392c  00000000  00000000  0001a15b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082a73  00000000  00000000  0001da87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a04fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c10  00000000  00000000  000a0540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000a1150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080008f0 	.word	0x080008f0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080008f0 	.word	0x080008f0

080001d8 <main>:
char is_done();
void USART1_IRQHandler();
void DMA2_Init();

int main()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	HAL_Init();
 80001dc:	f000 f9e8 	bl	80005b0 <HAL_Init>
	USART_Init();
 80001e0:	f000 f8d6 	bl	8000390 <USART_Init>
	LED_Init();
 80001e4:	f000 f8aa 	bl	800033c <LED_Init>
	DMA2_Init();
 80001e8:	f000 f812 	bl	8000210 <DMA2_Init>

	while(1)
	{
		ctrl_LED(BLUE, ON);
 80001ec:	2101      	movs	r1, #1
 80001ee:	2003      	movs	r0, #3
 80001f0:	f000 f878 	bl	80002e4 <ctrl_LED>
		HAL_Delay(500);
 80001f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001f8:	f000 fa4c 	bl	8000694 <HAL_Delay>
		ctrl_LED(BLUE, OFF);
 80001fc:	2100      	movs	r1, #0
 80001fe:	2003      	movs	r0, #3
 8000200:	f000 f870 	bl	80002e4 <ctrl_LED>
		HAL_Delay(500);
 8000204:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000208:	f000 fa44 	bl	8000694 <HAL_Delay>
		ctrl_LED(BLUE, ON);
 800020c:	bf00      	nop
 800020e:	e7ed      	b.n	80001ec <main+0x14>

08000210 <DMA2_Init>:
	}
	return 0;
}

void DMA2_Init()
{
 8000210:	b480      	push	{r7}
 8000212:	b087      	sub	sp, #28
 8000214:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000216:	2300      	movs	r3, #0
 8000218:	607b      	str	r3, [r7, #4]
 800021a:	4b1d      	ldr	r3, [pc, #116]	@ (8000290 <DMA2_Init+0x80>)
 800021c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800021e:	4a1c      	ldr	r2, [pc, #112]	@ (8000290 <DMA2_Init+0x80>)
 8000220:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000224:	6313      	str	r3, [r2, #48]	@ 0x30
 8000226:	4b1a      	ldr	r3, [pc, #104]	@ (8000290 <DMA2_Init+0x80>)
 8000228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800022a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800022e:	607b      	str	r3, [r7, #4]
 8000230:	687b      	ldr	r3, [r7, #4]
	uint32_t* DMA2_S2PAR = (uint32_t*) (DMA2_BASE_ADDR + (0x18 + 0x18 * 2));
 8000232:	4b18      	ldr	r3, [pc, #96]	@ (8000294 <DMA2_Init+0x84>)
 8000234:	617b      	str	r3, [r7, #20]
	*DMA2_S2PAR = (USART1_BASE_ADDR + 0x04);	// set USART1_DR register as Source
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	4a17      	ldr	r2, [pc, #92]	@ (8000298 <DMA2_Init+0x88>)
 800023a:	601a      	str	r2, [r3, #0]

	uint32_t* DMA2_S2M0AR = (uint32_t*) (DMA2_BASE_ADDR + (0x1C + 0x18 * 2));
 800023c:	4b17      	ldr	r3, [pc, #92]	@ (800029c <DMA2_Init+0x8c>)
 800023e:	613b      	str	r3, [r7, #16]
	*DMA2_S2M0AR = (uint32_t) str;		// set str address as Destination
 8000240:	4a17      	ldr	r2, [pc, #92]	@ (80002a0 <DMA2_Init+0x90>)
 8000242:	693b      	ldr	r3, [r7, #16]
 8000244:	601a      	str	r2, [r3, #0]

	uint32_t* DMA_S2NDTR = (uint32_t*) (DMA2_BASE_ADDR + (0x14 + 0x18 * 2));
 8000246:	4b17      	ldr	r3, [pc, #92]	@ (80002a4 <DMA2_Init+0x94>)
 8000248:	60fb      	str	r3, [r7, #12]
	*DMA_S2NDTR = sizeof(str);	// set number of bytes to transfer
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	2214      	movs	r2, #20
 800024e:	601a      	str	r2, [r3, #0]

	uint32_t* DMA_S2CR = (uint32_t*) (DMA2_BASE_ADDR + (0x10 + 0x18 * 2));
 8000250:	4b15      	ldr	r3, [pc, #84]	@ (80002a8 <DMA2_Init+0x98>)
 8000252:	60bb      	str	r3, [r7, #8]
	*DMA_S2CR |= (0b100 << 25);	// select channel 4
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800025c:	68bb      	ldr	r3, [r7, #8]
 800025e:	601a      	str	r2, [r3, #0]
	*DMA_S2CR |= (1 << 10);	// enable memory increment mode
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	601a      	str	r2, [r3, #0]
	*DMA_S2CR |= (1 << 8);	// enable circular mode
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	601a      	str	r2, [r3, #0]
	*DMA_S2CR |= (1 << 0);	// enable Stream
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	f043 0201 	orr.w	r2, r3, #1
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	601a      	str	r2, [r3, #0]
}
 8000284:	bf00      	nop
 8000286:	371c      	adds	r7, #28
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	40023800 	.word	0x40023800
 8000294:	40026448 	.word	0x40026448
 8000298:	40011004 	.word	0x40011004
 800029c:	4002644c 	.word	0x4002644c
 80002a0:	20000028 	.word	0x20000028
 80002a4:	40026444 	.word	0x40026444
 80002a8:	40026440 	.word	0x40026440

080002ac <USART1_IRQHandler>:

void USART1_IRQHandler()
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
	uint32_t* USART1_DR = (uint32_t*) (USART1_BASE_ADDR + 0x04);
 80002b2:	4b09      	ldr	r3, [pc, #36]	@ (80002d8 <USART1_IRQHandler+0x2c>)
 80002b4:	607b      	str	r3, [r7, #4]
	str[_index++] = *USART1_DR;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	6818      	ldr	r0, [r3, #0]
 80002ba:	4b08      	ldr	r3, [pc, #32]	@ (80002dc <USART1_IRQHandler+0x30>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	1c5a      	adds	r2, r3, #1
 80002c0:	4906      	ldr	r1, [pc, #24]	@ (80002dc <USART1_IRQHandler+0x30>)
 80002c2:	600a      	str	r2, [r1, #0]
 80002c4:	b2c1      	uxtb	r1, r0
 80002c6:	4a06      	ldr	r2, [pc, #24]	@ (80002e0 <USART1_IRQHandler+0x34>)
 80002c8:	54d1      	strb	r1, [r2, r3]
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40011004 	.word	0x40011004
 80002dc:	2000003c 	.word	0x2000003c
 80002e0:	20000028 	.word	0x20000028

080002e4 <ctrl_LED>:
	}
	va_end(list);
}

void ctrl_LED(color_t color, state_t state)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	460a      	mov	r2, r1
 80002ee:	71fb      	strb	r3, [r7, #7]
 80002f0:	4613      	mov	r3, r2
 80002f2:	71bb      	strb	r3, [r7, #6]
	uint32_t* GPIOD_ODR = (uint32_t*) (GPIOD_BASE_ADDR + 0x14);
 80002f4:	4b10      	ldr	r3, [pc, #64]	@ (8000338 <ctrl_LED+0x54>)
 80002f6:	60fb      	str	r3, [r7, #12]
	 if (state == ON)
 80002f8:	79bb      	ldrb	r3, [r7, #6]
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d10a      	bne.n	8000314 <ctrl_LED+0x30>
	 {
		 *GPIOD_ODR |= (0b1 << (12 + color));
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	79fa      	ldrb	r2, [r7, #7]
 8000304:	320c      	adds	r2, #12
 8000306:	2101      	movs	r1, #1
 8000308:	fa01 f202 	lsl.w	r2, r1, r2
 800030c:	431a      	orrs	r2, r3
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	601a      	str	r2, [r3, #0]
	 }
	 else
	 {
		 *GPIOD_ODR &= ~(0b1 << (12 + color));
	 }
}
 8000312:	e00a      	b.n	800032a <ctrl_LED+0x46>
		 *GPIOD_ODR &= ~(0b1 << (12 + color));
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	79fa      	ldrb	r2, [r7, #7]
 800031a:	320c      	adds	r2, #12
 800031c:	2101      	movs	r1, #1
 800031e:	fa01 f202 	lsl.w	r2, r1, r2
 8000322:	43d2      	mvns	r2, r2
 8000324:	401a      	ands	r2, r3
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	601a      	str	r2, [r3, #0]
}
 800032a:	bf00      	nop
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40020c14 	.word	0x40020c14

0800033c <LED_Init>:

void LED_Init()
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000342:	2300      	movs	r3, #0
 8000344:	603b      	str	r3, [r7, #0]
 8000346:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <LED_Init+0x4c>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800034a:	4a0f      	ldr	r2, [pc, #60]	@ (8000388 <LED_Init+0x4c>)
 800034c:	f043 0308 	orr.w	r3, r3, #8
 8000350:	6313      	str	r3, [r2, #48]	@ 0x30
 8000352:	4b0d      	ldr	r3, [pc, #52]	@ (8000388 <LED_Init+0x4c>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000356:	f003 0308 	and.w	r3, r3, #8
 800035a:	603b      	str	r3, [r7, #0]
 800035c:	683b      	ldr	r3, [r7, #0]
	uint32_t* GPIOD_MODER = (uint32_t*) (GPIOD_BASE_ADDR + 0x00);
 800035e:	4b0b      	ldr	r3, [pc, #44]	@ (800038c <LED_Init+0x50>)
 8000360:	607b      	str	r3, [r7, #4]
	*GPIOD_MODER &= ~(0xff << 24);		// clear pin PD12, PD13, PD14, PD15
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |= (0b01010101 << 24);	// set PD12, PD13, PD14, PD15 as OUTPUT
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f043 42aa 	orr.w	r2, r3, #1426063360	@ 0x55000000
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	601a      	str	r2, [r3, #0]
}
 800037a:	bf00      	nop
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	40023800 	.word	0x40023800
 800038c:	40020c00 	.word	0x40020c00

08000390 <USART_Init>:

void USART_Init()
{
 8000390:	b480      	push	{r7}
 8000392:	b089      	sub	sp, #36	@ 0x24
 8000394:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000396:	2300      	movs	r3, #0
 8000398:	60bb      	str	r3, [r7, #8]
 800039a:	4b35      	ldr	r3, [pc, #212]	@ (8000470 <USART_Init+0xe0>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039e:	4a34      	ldr	r2, [pc, #208]	@ (8000470 <USART_Init+0xe0>)
 80003a0:	f043 0302 	orr.w	r3, r3, #2
 80003a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80003a6:	4b32      	ldr	r3, [pc, #200]	@ (8000470 <USART_Init+0xe0>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003aa:	f003 0302 	and.w	r3, r3, #2
 80003ae:	60bb      	str	r3, [r7, #8]
 80003b0:	68bb      	ldr	r3, [r7, #8]
	uint32_t* GPIOB_MODER = (uint32_t*) (GPIOB_BASE_ADDR + 0x00);
 80003b2:	4b30      	ldr	r3, [pc, #192]	@ (8000474 <USART_Init+0xe4>)
 80003b4:	61fb      	str	r3, [r7, #28]
	uint32_t* GPIOB_AFRL = (uint32_t*) (GPIOB_BASE_ADDR + 0x20);
 80003b6:	4b30      	ldr	r3, [pc, #192]	@ (8000478 <USART_Init+0xe8>)
 80003b8:	61bb      	str	r3, [r7, #24]
	*GPIOB_MODER &= ~(0b1111 << 12);// clear bit pin PB6 and PB7
 80003ba:	69fb      	ldr	r3, [r7, #28]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	601a      	str	r2, [r3, #0]
	*GPIOB_MODER |= (0b1010 << 12);	// set PB6 and PB7 in AF mode
 80003c6:	69fb      	ldr	r3, [r7, #28]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f443 4220 	orr.w	r2, r3, #40960	@ 0xa000
 80003ce:	69fb      	ldr	r3, [r7, #28]
 80003d0:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRL &= ~(0xff << 24);	// clear bit pin AFRL6 and AFRL7
 80003d2:	69bb      	ldr	r3, [r7, #24]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80003da:	69bb      	ldr	r3, [r7, #24]
 80003dc:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRL |= (0b0111 << 24) | (0b0111 << 28); // select AF7 for AFRL6 and AFRL7
 80003de:	69bb      	ldr	r3, [r7, #24]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f043 42ee 	orr.w	r2, r3, #1996488704	@ 0x77000000
 80003e6:	69bb      	ldr	r3, [r7, #24]
 80003e8:	601a      	str	r2, [r3, #0]

	__HAL_RCC_USART1_CLK_ENABLE();
 80003ea:	2300      	movs	r3, #0
 80003ec:	607b      	str	r3, [r7, #4]
 80003ee:	4b20      	ldr	r3, [pc, #128]	@ (8000470 <USART_Init+0xe0>)
 80003f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003f2:	4a1f      	ldr	r2, [pc, #124]	@ (8000470 <USART_Init+0xe0>)
 80003f4:	f043 0310 	orr.w	r3, r3, #16
 80003f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80003fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000470 <USART_Init+0xe0>)
 80003fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003fe:	f003 0310 	and.w	r3, r3, #16
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]
	uint32_t* USART1_CR1 = (uint32_t*) (USART1_BASE_ADDR + 0x0C);
 8000406:	4b1d      	ldr	r3, [pc, #116]	@ (800047c <USART_Init+0xec>)
 8000408:	617b      	str	r3, [r7, #20]
	uint32_t* USART1_BRR = (uint32_t*) (USART1_BASE_ADDR + 0x08);
 800040a:	4b1d      	ldr	r3, [pc, #116]	@ (8000480 <USART_Init+0xf0>)
 800040c:	613b      	str	r3, [r7, #16]
	*USART1_CR1 |= (0b1 << 12);	// set word length
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000416:	697b      	ldr	r3, [r7, #20]
 8000418:	601a      	str	r2, [r3, #0]
	*USART1_CR1 |= (0b1 << 10); // enable parity bit
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	601a      	str	r2, [r3, #0]
	*USART1_CR1 &= ~(0b1 << 9); // select Even parity
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	601a      	str	r2, [r3, #0]
	*USART1_CR1 |= (0b11 << 2); // enable transmitter & receiver
 8000432:	697b      	ldr	r3, [r7, #20]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f043 020c 	orr.w	r2, r3, #12
 800043a:	697b      	ldr	r3, [r7, #20]
 800043c:	601a      	str	r2, [r3, #0]
	*USART1_CR1 |= (0b1 << 13); // enable USART1
 800043e:	697b      	ldr	r3, [r7, #20]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	601a      	str	r2, [r3, #0]
	*USART1_BRR = (104 << 4) | (3 << 0); // set baud rate at 9600bps
 800044a:	693b      	ldr	r3, [r7, #16]
 800044c:	f240 6283 	movw	r2, #1667	@ 0x683
 8000450:	601a      	str	r2, [r3, #0]

	uint32_t* USART1_CR3 = (uint32_t*) (USART1_BASE_ADDR + 0x14);
 8000452:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <USART_Init+0xf4>)
 8000454:	60fb      	str	r3, [r7, #12]
	*USART1_CR3 |= (1 << 6);	// enable DMA receiver
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	601a      	str	r2, [r3, #0]

//	*USART1_CR1 |= (0b1 << 5); 	// generate interrupt
//	uint32_t* NVIC_ISER1 = (uint32_t*) 0xE000E104;
//	*NVIC_ISER1 |= (0b1 << 5);	// accept Interrupt signal from EXTI
}
 8000462:	bf00      	nop
 8000464:	3724      	adds	r7, #36	@ 0x24
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	40023800 	.word	0x40023800
 8000474:	40020400 	.word	0x40020400
 8000478:	40020420 	.word	0x40020420
 800047c:	4001100c 	.word	0x4001100c
 8000480:	40011008 	.word	0x40011008
 8000484:	40011014 	.word	0x40011014

08000488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048e:	2300      	movs	r3, #0
 8000490:	607b      	str	r3, [r7, #4]
 8000492:	4b10      	ldr	r3, [pc, #64]	@ (80004d4 <HAL_MspInit+0x4c>)
 8000494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000496:	4a0f      	ldr	r2, [pc, #60]	@ (80004d4 <HAL_MspInit+0x4c>)
 8000498:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800049c:	6453      	str	r3, [r2, #68]	@ 0x44
 800049e:	4b0d      	ldr	r3, [pc, #52]	@ (80004d4 <HAL_MspInit+0x4c>)
 80004a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004aa:	2300      	movs	r3, #0
 80004ac:	603b      	str	r3, [r7, #0]
 80004ae:	4b09      	ldr	r3, [pc, #36]	@ (80004d4 <HAL_MspInit+0x4c>)
 80004b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004b2:	4a08      	ldr	r2, [pc, #32]	@ (80004d4 <HAL_MspInit+0x4c>)
 80004b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80004ba:	4b06      	ldr	r3, [pc, #24]	@ (80004d4 <HAL_MspInit+0x4c>)
 80004bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	40023800 	.word	0x40023800

080004d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <NMI_Handler+0x4>

080004e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <HardFault_Handler+0x4>

080004e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <MemManage_Handler+0x4>

080004f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <BusFault_Handler+0x4>

080004f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <UsageFault_Handler+0x4>

08000500 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800052e:	f000 f891 	bl	8000654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800053c:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <SystemInit+0x20>)
 800053e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000542:	4a05      	ldr	r2, [pc, #20]	@ (8000558 <SystemInit+0x20>)
 8000544:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000548:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 800055c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000594 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000560:	f7ff ffea 	bl	8000538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000564:	480c      	ldr	r0, [pc, #48]	@ (8000598 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000566:	490d      	ldr	r1, [pc, #52]	@ (800059c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000568:	4a0d      	ldr	r2, [pc, #52]	@ (80005a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800056a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800056c:	e002      	b.n	8000574 <LoopCopyDataInit>

0800056e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000572:	3304      	adds	r3, #4

08000574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000578:	d3f9      	bcc.n	800056e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057a:	4a0a      	ldr	r2, [pc, #40]	@ (80005a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800057c:	4c0a      	ldr	r4, [pc, #40]	@ (80005a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000580:	e001      	b.n	8000586 <LoopFillZerobss>

08000582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000584:	3204      	adds	r2, #4

08000586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000588:	d3fb      	bcc.n	8000582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800058a:	f000 f98d 	bl	80008a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800058e:	f7ff fe23 	bl	80001d8 <main>
  bx  lr    
 8000592:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000594:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800059c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005a0:	08000910 	.word	0x08000910
  ldr r2, =_sbss
 80005a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005a8:	20000044 	.word	0x20000044

080005ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
   b  Infinite_Loop
 80005ac:	e7fe      	b.n	80005ac <ADC_IRQHandler>
	...

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005b4:	4b0e      	ldr	r3, [pc, #56]	@ (80005f0 <HAL_Init+0x40>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a0d      	ldr	r2, [pc, #52]	@ (80005f0 <HAL_Init+0x40>)
 80005ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005c0:	4b0b      	ldr	r3, [pc, #44]	@ (80005f0 <HAL_Init+0x40>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a0a      	ldr	r2, [pc, #40]	@ (80005f0 <HAL_Init+0x40>)
 80005c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005cc:	4b08      	ldr	r3, [pc, #32]	@ (80005f0 <HAL_Init+0x40>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a07      	ldr	r2, [pc, #28]	@ (80005f0 <HAL_Init+0x40>)
 80005d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d8:	2003      	movs	r0, #3
 80005da:	f000 f931 	bl	8000840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005de:	200f      	movs	r0, #15
 80005e0:	f000 f808 	bl	80005f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e4:	f7ff ff50 	bl	8000488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023c00 	.word	0x40023c00

080005f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <HAL_InitTick+0x54>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b12      	ldr	r3, [pc, #72]	@ (800064c <HAL_InitTick+0x58>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4619      	mov	r1, r3
 8000606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800060a:	fbb3 f3f1 	udiv	r3, r3, r1
 800060e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f93b 	bl	800088e <HAL_SYSTICK_Config>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
 8000620:	e00e      	b.n	8000640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b0f      	cmp	r3, #15
 8000626:	d80a      	bhi.n	800063e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000628:	2200      	movs	r2, #0
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	f04f 30ff 	mov.w	r0, #4294967295
 8000630:	f000 f911 	bl	8000856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000634:	4a06      	ldr	r2, [pc, #24]	@ (8000650 <HAL_InitTick+0x5c>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800063a:	2300      	movs	r3, #0
 800063c:	e000      	b.n	8000640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000000 	.word	0x20000000
 800064c:	20000008 	.word	0x20000008
 8000650:	20000004 	.word	0x20000004

08000654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <HAL_IncTick+0x20>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <HAL_IncTick+0x24>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4413      	add	r3, r2
 8000664:	4a04      	ldr	r2, [pc, #16]	@ (8000678 <HAL_IncTick+0x24>)
 8000666:	6013      	str	r3, [r2, #0]
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000008 	.word	0x20000008
 8000678:	20000040 	.word	0x20000040

0800067c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  return uwTick;
 8000680:	4b03      	ldr	r3, [pc, #12]	@ (8000690 <HAL_GetTick+0x14>)
 8000682:	681b      	ldr	r3, [r3, #0]
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000040 	.word	0x20000040

08000694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800069c:	f7ff ffee 	bl	800067c <HAL_GetTick>
 80006a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006ac:	d005      	beq.n	80006ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ae:	4b0a      	ldr	r3, [pc, #40]	@ (80006d8 <HAL_Delay+0x44>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4413      	add	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006ba:	bf00      	nop
 80006bc:	f7ff ffde 	bl	800067c <HAL_GetTick>
 80006c0:	4602      	mov	r2, r0
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d8f7      	bhi.n	80006bc <HAL_Delay+0x28>
  {
  }
}
 80006cc:	bf00      	nop
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000008 	.word	0x20000008

080006dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <__NVIC_SetPriorityGrouping+0x44>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f2:	68ba      	ldr	r2, [r7, #8]
 80006f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006f8:	4013      	ands	r3, r2
 80006fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000704:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800070c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070e:	4a04      	ldr	r2, [pc, #16]	@ (8000720 <__NVIC_SetPriorityGrouping+0x44>)
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	60d3      	str	r3, [r2, #12]
}
 8000714:	bf00      	nop
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000728:	4b04      	ldr	r3, [pc, #16]	@ (800073c <__NVIC_GetPriorityGrouping+0x18>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	0a1b      	lsrs	r3, r3, #8
 800072e:	f003 0307 	and.w	r3, r3, #7
}
 8000732:	4618      	mov	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	6039      	str	r1, [r7, #0]
 800074a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000750:	2b00      	cmp	r3, #0
 8000752:	db0a      	blt.n	800076a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	b2da      	uxtb	r2, r3
 8000758:	490c      	ldr	r1, [pc, #48]	@ (800078c <__NVIC_SetPriority+0x4c>)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	0112      	lsls	r2, r2, #4
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	440b      	add	r3, r1
 8000764:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000768:	e00a      	b.n	8000780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4908      	ldr	r1, [pc, #32]	@ (8000790 <__NVIC_SetPriority+0x50>)
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	f003 030f 	and.w	r3, r3, #15
 8000776:	3b04      	subs	r3, #4
 8000778:	0112      	lsls	r2, r2, #4
 800077a:	b2d2      	uxtb	r2, r2
 800077c:	440b      	add	r3, r1
 800077e:	761a      	strb	r2, [r3, #24]
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000e100 	.word	0xe000e100
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000794:	b480      	push	{r7}
 8000796:	b089      	sub	sp, #36	@ 0x24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	f1c3 0307 	rsb	r3, r3, #7
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	bf28      	it	cs
 80007b2:	2304      	movcs	r3, #4
 80007b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3304      	adds	r3, #4
 80007ba:	2b06      	cmp	r3, #6
 80007bc:	d902      	bls.n	80007c4 <NVIC_EncodePriority+0x30>
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3b03      	subs	r3, #3
 80007c2:	e000      	b.n	80007c6 <NVIC_EncodePriority+0x32>
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c8:	f04f 32ff 	mov.w	r2, #4294967295
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	43da      	mvns	r2, r3
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	401a      	ands	r2, r3
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007dc:	f04f 31ff 	mov.w	r1, #4294967295
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	fa01 f303 	lsl.w	r3, r1, r3
 80007e6:	43d9      	mvns	r1, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ec:	4313      	orrs	r3, r2
         );
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3724      	adds	r7, #36	@ 0x24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
	...

080007fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3b01      	subs	r3, #1
 8000808:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800080c:	d301      	bcc.n	8000812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800080e:	2301      	movs	r3, #1
 8000810:	e00f      	b.n	8000832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000812:	4a0a      	ldr	r2, [pc, #40]	@ (800083c <SysTick_Config+0x40>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3b01      	subs	r3, #1
 8000818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800081a:	210f      	movs	r1, #15
 800081c:	f04f 30ff 	mov.w	r0, #4294967295
 8000820:	f7ff ff8e 	bl	8000740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000824:	4b05      	ldr	r3, [pc, #20]	@ (800083c <SysTick_Config+0x40>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800082a:	4b04      	ldr	r3, [pc, #16]	@ (800083c <SysTick_Config+0x40>)
 800082c:	2207      	movs	r2, #7
 800082e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	e000e010 	.word	0xe000e010

08000840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff ff47 	bl	80006dc <__NVIC_SetPriorityGrouping>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000856:	b580      	push	{r7, lr}
 8000858:	b086      	sub	sp, #24
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
 8000862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000868:	f7ff ff5c 	bl	8000724 <__NVIC_GetPriorityGrouping>
 800086c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	68b9      	ldr	r1, [r7, #8]
 8000872:	6978      	ldr	r0, [r7, #20]
 8000874:	f7ff ff8e 	bl	8000794 <NVIC_EncodePriority>
 8000878:	4602      	mov	r2, r0
 800087a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ff5d 	bl	8000740 <__NVIC_SetPriority>
}
 8000886:	bf00      	nop
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f7ff ffb0 	bl	80007fc <SysTick_Config>
 800089c:	4603      	mov	r3, r0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <__libc_init_array>:
 80008a8:	b570      	push	{r4, r5, r6, lr}
 80008aa:	4d0d      	ldr	r5, [pc, #52]	@ (80008e0 <__libc_init_array+0x38>)
 80008ac:	4c0d      	ldr	r4, [pc, #52]	@ (80008e4 <__libc_init_array+0x3c>)
 80008ae:	1b64      	subs	r4, r4, r5
 80008b0:	10a4      	asrs	r4, r4, #2
 80008b2:	2600      	movs	r6, #0
 80008b4:	42a6      	cmp	r6, r4
 80008b6:	d109      	bne.n	80008cc <__libc_init_array+0x24>
 80008b8:	4d0b      	ldr	r5, [pc, #44]	@ (80008e8 <__libc_init_array+0x40>)
 80008ba:	4c0c      	ldr	r4, [pc, #48]	@ (80008ec <__libc_init_array+0x44>)
 80008bc:	f000 f818 	bl	80008f0 <_init>
 80008c0:	1b64      	subs	r4, r4, r5
 80008c2:	10a4      	asrs	r4, r4, #2
 80008c4:	2600      	movs	r6, #0
 80008c6:	42a6      	cmp	r6, r4
 80008c8:	d105      	bne.n	80008d6 <__libc_init_array+0x2e>
 80008ca:	bd70      	pop	{r4, r5, r6, pc}
 80008cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80008d0:	4798      	blx	r3
 80008d2:	3601      	adds	r6, #1
 80008d4:	e7ee      	b.n	80008b4 <__libc_init_array+0xc>
 80008d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80008da:	4798      	blx	r3
 80008dc:	3601      	adds	r6, #1
 80008de:	e7f2      	b.n	80008c6 <__libc_init_array+0x1e>
 80008e0:	08000908 	.word	0x08000908
 80008e4:	08000908 	.word	0x08000908
 80008e8:	08000908 	.word	0x08000908
 80008ec:	0800090c 	.word	0x0800090c

080008f0 <_init>:
 80008f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008f2:	bf00      	nop
 80008f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008f6:	bc08      	pop	{r3}
 80008f8:	469e      	mov	lr, r3
 80008fa:	4770      	bx	lr

080008fc <_fini>:
 80008fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008fe:	bf00      	nop
 8000900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000902:	bc08      	pop	{r3}
 8000904:	469e      	mov	lr, r3
 8000906:	4770      	bx	lr
