
prj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006b8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000850  08000850  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000850  08000850  0000200c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000850  08000850  0000200c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000850  08000850  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000850  08000850  00001850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000854  08000854  00001854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000858  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08000864  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000864  00002030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000238f  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000971  00000000  00000000  000043cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000328  00000000  00000000  00004d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000240  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014047  00000000  00000000  000052a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003686  00000000  00000000  000192ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f0c8  00000000  00000000  0001c975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009ba3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ae4  00000000  00000000  0009ba80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0009c564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000838 	.word	0x08000838

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08000838 	.word	0x08000838

080001d8 <main>:
uint8_t master_read(uint8_t slave_addr, uint8_t reg_addr);
void I2C_Init();
volatile uint16_t data = 0;

int main()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
	HAL_Init();
 80001de:	f000 f9bb 	bl	8000558 <HAL_Init>
	I2C_Init();
 80001e2:	f000 f8b1 	bl	8000348 <I2C_Init>
	uint16_t x = 10;
 80001e6:	230a      	movs	r3, #10
 80001e8:	80fb      	strh	r3, [r7, #6]

	while (1)
	{
		data = master_read(ACCEL_ADDR, 0x2F);
 80001ea:	212f      	movs	r1, #47	@ 0x2f
 80001ec:	2019      	movs	r0, #25
 80001ee:	f000 f807 	bl	8000200 <master_read>
 80001f2:	4603      	mov	r3, r0
 80001f4:	461a      	mov	r2, r3
 80001f6:	4b01      	ldr	r3, [pc, #4]	@ (80001fc <main+0x24>)
 80001f8:	801a      	strh	r2, [r3, #0]
 80001fa:	e7f6      	b.n	80001ea <main+0x12>
 80001fc:	20000028 	.word	0x20000028

08000200 <master_read>:
//		x++;
	}
	return 0;
}
uint8_t master_read(uint8_t slave_addr, uint8_t reg_addr)
{
 8000200:	b480      	push	{r7}
 8000202:	b089      	sub	sp, #36	@ 0x24
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	460a      	mov	r2, r1
 800020a:	71fb      	strb	r3, [r7, #7]
 800020c:	4613      	mov	r3, r2
 800020e:	71bb      	strb	r3, [r7, #6]
	uint16_t* I2C_CR1 = (uint16_t*) (I2C1_BASE_ADDR + 0x00);
 8000210:	4b49      	ldr	r3, [pc, #292]	@ (8000338 <master_read+0x138>)
 8000212:	61fb      	str	r3, [r7, #28]
	uint16_t* I2C_DR  = (uint16_t*) (I2C1_BASE_ADDR + 0x10);
 8000214:	4b49      	ldr	r3, [pc, #292]	@ (800033c <master_read+0x13c>)
 8000216:	61bb      	str	r3, [r7, #24]
	uint16_t* I2C_SR1 = (uint16_t*) (I2C1_BASE_ADDR + 0x14);
 8000218:	4b49      	ldr	r3, [pc, #292]	@ (8000340 <master_read+0x140>)
 800021a:	617b      	str	r3, [r7, #20]
	uint16_t* I2C_SR2 = (uint16_t*) (I2C1_BASE_ADDR + 0x18);
 800021c:	4b49      	ldr	r3, [pc, #292]	@ (8000344 <master_read+0x144>)
 800021e:	613b      	str	r3, [r7, #16]

	/* wait until bus is free */
	while (((*I2C_SR2 >> 1) & 1) == 1);
 8000220:	bf00      	nop
 8000222:	693b      	ldr	r3, [r7, #16]
 8000224:	881b      	ldrh	r3, [r3, #0]
 8000226:	085b      	lsrs	r3, r3, #1
 8000228:	b29b      	uxth	r3, r3
 800022a:	f003 0301 	and.w	r3, r3, #1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d1f7      	bne.n	8000222 <master_read+0x22>

	/* send start bit */
	*I2C_CR1 |= 1 << 8;
 8000232:	69fb      	ldr	r3, [r7, #28]
 8000234:	881b      	ldrh	r3, [r3, #0]
 8000236:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800023a:	b29a      	uxth	r2, r3
 800023c:	69fb      	ldr	r3, [r7, #28]
 800023e:	801a      	strh	r2, [r3, #0]

	/* wait for start is generated */
	while ((*I2C_SR1 & 1) == 0);
 8000240:	bf00      	nop
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	881b      	ldrh	r3, [r3, #0]
 8000246:	f003 0301 	and.w	r3, r3, #1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d0f9      	beq.n	8000242 <master_read+0x42>

	/* send slave address + write mode */
	*I2C_DR  = (slave_addr << 1) | WRITE;
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	b29b      	uxth	r3, r3
 8000252:	005b      	lsls	r3, r3, #1
 8000254:	b29a      	uxth	r2, r3
 8000256:	69bb      	ldr	r3, [r7, #24]
 8000258:	801a      	strh	r2, [r3, #0]

	/* wait for slave address is transmitted */
	while (((*I2C_SR1 >> 1) & 1) == 0);
 800025a:	bf00      	nop
 800025c:	697b      	ldr	r3, [r7, #20]
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	085b      	lsrs	r3, r3, #1
 8000262:	b29b      	uxth	r3, r3
 8000264:	f003 0301 	and.w	r3, r3, #1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d0f7      	beq.n	800025c <master_read+0x5c>
	volatile uint16_t tmp = *I2C_SR2;
 800026c:	693b      	ldr	r3, [r7, #16]
 800026e:	881b      	ldrh	r3, [r3, #0]
 8000270:	81fb      	strh	r3, [r7, #14]

	/* check ACK */
	if (((*I2C_SR1 >> 10) & 1) == 1) { return 1; }
 8000272:	697b      	ldr	r3, [r7, #20]
 8000274:	881b      	ldrh	r3, [r3, #0]
 8000276:	0a9b      	lsrs	r3, r3, #10
 8000278:	b29b      	uxth	r3, r3
 800027a:	f003 0301 	and.w	r3, r3, #1
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <master_read+0x86>
 8000282:	2301      	movs	r3, #1
 8000284:	e051      	b.n	800032a <master_read+0x12a>

	/* send register address */
	*I2C_DR = reg_addr;
 8000286:	79bb      	ldrb	r3, [r7, #6]
 8000288:	b29a      	uxth	r2, r3
 800028a:	69bb      	ldr	r3, [r7, #24]
 800028c:	801a      	strh	r2, [r3, #0]

	/* wait for register address is transmitted */
	while (((*I2C_SR1 >> 7) & 1) == 0);
 800028e:	bf00      	nop
 8000290:	697b      	ldr	r3, [r7, #20]
 8000292:	881b      	ldrh	r3, [r3, #0]
 8000294:	09db      	lsrs	r3, r3, #7
 8000296:	b29b      	uxth	r3, r3
 8000298:	f003 0301 	and.w	r3, r3, #1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d0f7      	beq.n	8000290 <master_read+0x90>

	/* check ACK */
	if (((*I2C_SR1 >> 10) & 1) == 1) { return 1; }
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	881b      	ldrh	r3, [r3, #0]
 80002a4:	0a9b      	lsrs	r3, r3, #10
 80002a6:	b29b      	uxth	r3, r3
 80002a8:	f003 0301 	and.w	r3, r3, #1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <master_read+0xb4>
 80002b0:	2301      	movs	r3, #1
 80002b2:	e03a      	b.n	800032a <master_read+0x12a>

	/* send start bit */
	*I2C_CR1 |= 1 << 8;
 80002b4:	69fb      	ldr	r3, [r7, #28]
 80002b6:	881b      	ldrh	r3, [r3, #0]
 80002b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002bc:	b29a      	uxth	r2, r3
 80002be:	69fb      	ldr	r3, [r7, #28]
 80002c0:	801a      	strh	r2, [r3, #0]

	/* wait for start is generated */
	while ((*I2C_SR1 & 1) == 0);
 80002c2:	bf00      	nop
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	881b      	ldrh	r3, [r3, #0]
 80002c8:	f003 0301 	and.w	r3, r3, #1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d0f9      	beq.n	80002c4 <master_read+0xc4>

	/* send slave address + read mode */
	*I2C_DR = (slave_addr << 1) | READ;
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	b21b      	sxth	r3, r3
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	b21b      	sxth	r3, r3
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	b21b      	sxth	r3, r3
 80002de:	b29a      	uxth	r2, r3
 80002e0:	69bb      	ldr	r3, [r7, #24]
 80002e2:	801a      	strh	r2, [r3, #0]

	/* wait for slave address is transmitted */
	while (((*I2C_SR1 >> 1) & 1) == 0);
 80002e4:	bf00      	nop
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	881b      	ldrh	r3, [r3, #0]
 80002ea:	085b      	lsrs	r3, r3, #1
 80002ec:	b29b      	uxth	r3, r3
 80002ee:	f003 0301 	and.w	r3, r3, #1
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0f7      	beq.n	80002e6 <master_read+0xe6>
	tmp = *I2C_SR2;
 80002f6:	693b      	ldr	r3, [r7, #16]
 80002f8:	881b      	ldrh	r3, [r3, #0]
 80002fa:	81fb      	strh	r3, [r7, #14]

	/* check ACK */
	if (((*I2C_SR1 >> 10) & 1) == 1) { return 1; }
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	0a9b      	lsrs	r3, r3, #10
 8000302:	b29b      	uxth	r3, r3
 8000304:	f003 0301 	and.w	r3, r3, #1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <master_read+0x110>
 800030c:	2301      	movs	r3, #1
 800030e:	e00c      	b.n	800032a <master_read+0x12a>

	/* read data */
	volatile uint8_t data = *I2C_DR;
 8000310:	69bb      	ldr	r3, [r7, #24]
 8000312:	881b      	ldrh	r3, [r3, #0]
 8000314:	b2db      	uxtb	r3, r3
 8000316:	737b      	strb	r3, [r7, #13]

	/* send stop bit */
	*I2C_CR1 |= 1 << 9;
 8000318:	69fb      	ldr	r3, [r7, #28]
 800031a:	881b      	ldrh	r3, [r3, #0]
 800031c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000320:	b29a      	uxth	r2, r3
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	801a      	strh	r2, [r3, #0]

	return data;
 8000326:	7b7b      	ldrb	r3, [r7, #13]
 8000328:	b2db      	uxtb	r3, r3
}
 800032a:	4618      	mov	r0, r3
 800032c:	3724      	adds	r7, #36	@ 0x24
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40005400 	.word	0x40005400
 800033c:	40005410 	.word	0x40005410
 8000340:	40005414 	.word	0x40005414
 8000344:	40005418 	.word	0x40005418

08000348 <I2C_Init>:
/*
	PB6: SCL
	PB9: SDA
 */
void I2C_Init()
{
 8000348:	b480      	push	{r7}
 800034a:	b089      	sub	sp, #36	@ 0x24
 800034c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800034e:	2300      	movs	r3, #0
 8000350:	607b      	str	r3, [r7, #4]
 8000352:	4b30      	ldr	r3, [pc, #192]	@ (8000414 <I2C_Init+0xcc>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000356:	4a2f      	ldr	r2, [pc, #188]	@ (8000414 <I2C_Init+0xcc>)
 8000358:	f043 0302 	orr.w	r3, r3, #2
 800035c:	6313      	str	r3, [r2, #48]	@ 0x30
 800035e:	4b2d      	ldr	r3, [pc, #180]	@ (8000414 <I2C_Init+0xcc>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000362:	f003 0302 	and.w	r3, r3, #2
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]
	uint32_t* GPIOB_MODER = (uint32_t*) (GPIOB_BASE_ADDR + 0x00);
 800036a:	4b2b      	ldr	r3, [pc, #172]	@ (8000418 <I2C_Init+0xd0>)
 800036c:	61fb      	str	r3, [r7, #28]
	uint32_t* GPIOB_AFRL = (uint32_t*) (GPIOB_BASE_ADDR + 0x20);
 800036e:	4b2b      	ldr	r3, [pc, #172]	@ (800041c <I2C_Init+0xd4>)
 8000370:	61bb      	str	r3, [r7, #24]
	uint32_t* GPIOB_AFRH = (uint32_t*) (GPIOB_BASE_ADDR + 0x24);
 8000372:	4b2b      	ldr	r3, [pc, #172]	@ (8000420 <I2C_Init+0xd8>)
 8000374:	617b      	str	r3, [r7, #20]
	*GPIOB_MODER &= ~((0b11 << (6 * 2)) | (0b11 << (9 * 2)));
 8000376:	69fb      	ldr	r3, [r7, #28]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f423 2243 	bic.w	r2, r3, #798720	@ 0xc3000
 800037e:	69fb      	ldr	r3, [r7, #28]
 8000380:	601a      	str	r2, [r3, #0]
	*GPIOB_MODER |= (0b10 << (6 * 2)) | (0b10 << (9 * 2));
 8000382:	69fb      	ldr	r3, [r7, #28]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f443 2202 	orr.w	r2, r3, #532480	@ 0x82000
 800038a:	69fb      	ldr	r3, [r7, #28]
 800038c:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRL &= ~(0xf << 24);
 800038e:	69bb      	ldr	r3, [r7, #24]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8000396:	69bb      	ldr	r3, [r7, #24]
 8000398:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRL |= 4 << 24;
 800039a:	69bb      	ldr	r3, [r7, #24]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80003a2:	69bb      	ldr	r3, [r7, #24]
 80003a4:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRH &= ~(0xf << 4);
 80003a6:	697b      	ldr	r3, [r7, #20]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80003ae:	697b      	ldr	r3, [r7, #20]
 80003b0:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRH |= 4 << 4;
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80003ba:	697b      	ldr	r3, [r7, #20]
 80003bc:	601a      	str	r2, [r3, #0]

	__HAL_RCC_I2C1_CLK_ENABLE();
 80003be:	2300      	movs	r3, #0
 80003c0:	603b      	str	r3, [r7, #0]
 80003c2:	4b14      	ldr	r3, [pc, #80]	@ (8000414 <I2C_Init+0xcc>)
 80003c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003c6:	4a13      	ldr	r2, [pc, #76]	@ (8000414 <I2C_Init+0xcc>)
 80003c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80003ce:	4b11      	ldr	r3, [pc, #68]	@ (8000414 <I2C_Init+0xcc>)
 80003d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80003d6:	603b      	str	r3, [r7, #0]
 80003d8:	683b      	ldr	r3, [r7, #0]
	uint16_t* I2C_CR1 = (uint16_t*) (I2C1_BASE_ADDR + 0x00);
 80003da:	4b12      	ldr	r3, [pc, #72]	@ (8000424 <I2C_Init+0xdc>)
 80003dc:	613b      	str	r3, [r7, #16]
	uint16_t* I2C_CR2 = (uint16_t*) (I2C1_BASE_ADDR + 0x04);
 80003de:	4b12      	ldr	r3, [pc, #72]	@ (8000428 <I2C_Init+0xe0>)
 80003e0:	60fb      	str	r3, [r7, #12]
	uint16_t* I2C_CCR = (uint16_t*) (I2C1_BASE_ADDR + 0x1C);
 80003e2:	4b12      	ldr	r3, [pc, #72]	@ (800042c <I2C_Init+0xe4>)
 80003e4:	60bb      	str	r3, [r7, #8]
	*I2C_CR2 |= 16;
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	881b      	ldrh	r3, [r3, #0]
 80003ea:	f043 0310 	orr.w	r3, r3, #16
 80003ee:	b29a      	uxth	r2, r3
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	801a      	strh	r2, [r3, #0]
	*I2C_CCR = 80;
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	2250      	movs	r2, #80	@ 0x50
 80003f8:	801a      	strh	r2, [r3, #0]
	*I2C_CR1 |= 1 << 0;
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	881b      	ldrh	r3, [r3, #0]
 80003fe:	f043 0301 	orr.w	r3, r3, #1
 8000402:	b29a      	uxth	r2, r3
 8000404:	693b      	ldr	r3, [r7, #16]
 8000406:	801a      	strh	r2, [r3, #0]
}
 8000408:	bf00      	nop
 800040a:	3724      	adds	r7, #36	@ 0x24
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr
 8000414:	40023800 	.word	0x40023800
 8000418:	40020400 	.word	0x40020400
 800041c:	40020420 	.word	0x40020420
 8000420:	40020424 	.word	0x40020424
 8000424:	40005400 	.word	0x40005400
 8000428:	40005404 	.word	0x40005404
 800042c:	4000541c 	.word	0x4000541c

08000430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000436:	2300      	movs	r3, #0
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	4b10      	ldr	r3, [pc, #64]	@ (800047c <HAL_MspInit+0x4c>)
 800043c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800043e:	4a0f      	ldr	r2, [pc, #60]	@ (800047c <HAL_MspInit+0x4c>)
 8000440:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000444:	6453      	str	r3, [r2, #68]	@ 0x44
 8000446:	4b0d      	ldr	r3, [pc, #52]	@ (800047c <HAL_MspInit+0x4c>)
 8000448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800044a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000452:	2300      	movs	r3, #0
 8000454:	603b      	str	r3, [r7, #0]
 8000456:	4b09      	ldr	r3, [pc, #36]	@ (800047c <HAL_MspInit+0x4c>)
 8000458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800045a:	4a08      	ldr	r2, [pc, #32]	@ (800047c <HAL_MspInit+0x4c>)
 800045c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000460:	6413      	str	r3, [r2, #64]	@ 0x40
 8000462:	4b06      	ldr	r3, [pc, #24]	@ (800047c <HAL_MspInit+0x4c>)
 8000464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800046a:	603b      	str	r3, [r7, #0]
 800046c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40023800 	.word	0x40023800

08000480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000484:	bf00      	nop
 8000486:	e7fd      	b.n	8000484 <NMI_Handler+0x4>

08000488 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800048c:	bf00      	nop
 800048e:	e7fd      	b.n	800048c <HardFault_Handler+0x4>

08000490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <MemManage_Handler+0x4>

08000498 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <BusFault_Handler+0x4>

080004a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <UsageFault_Handler+0x4>

080004a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr

080004b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr

080004d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d6:	f000 f891 	bl	80005fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004e4:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <SystemInit+0x20>)
 80004e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004ea:	4a05      	ldr	r2, [pc, #20]	@ (8000500 <SystemInit+0x20>)
 80004ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	e000ed00 	.word	0xe000ed00

08000504 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8000504:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800053c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000508:	f7ff ffea 	bl	80004e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800050c:	480c      	ldr	r0, [pc, #48]	@ (8000540 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800050e:	490d      	ldr	r1, [pc, #52]	@ (8000544 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000510:	4a0d      	ldr	r2, [pc, #52]	@ (8000548 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000514:	e002      	b.n	800051c <LoopCopyDataInit>

08000516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051a:	3304      	adds	r3, #4

0800051c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800051c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800051e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000520:	d3f9      	bcc.n	8000516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000522:	4a0a      	ldr	r2, [pc, #40]	@ (800054c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000524:	4c0a      	ldr	r4, [pc, #40]	@ (8000550 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000528:	e001      	b.n	800052e <LoopFillZerobss>

0800052a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800052c:	3204      	adds	r2, #4

0800052e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800052e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000530:	d3fb      	bcc.n	800052a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000532:	f000 f95d 	bl	80007f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000536:	f7ff fe4f 	bl	80001d8 <main>
  bx  lr    
 800053a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800053c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000544:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000548:	08000858 	.word	0x08000858
  ldr r2, =_sbss
 800054c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000550:	20000030 	.word	0x20000030

08000554 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
   b  Infinite_Loop
 8000554:	e7fe      	b.n	8000554 <ADC_IRQHandler>
	...

08000558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800055c:	4b0e      	ldr	r3, [pc, #56]	@ (8000598 <HAL_Init+0x40>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a0d      	ldr	r2, [pc, #52]	@ (8000598 <HAL_Init+0x40>)
 8000562:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000566:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000568:	4b0b      	ldr	r3, [pc, #44]	@ (8000598 <HAL_Init+0x40>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a0a      	ldr	r2, [pc, #40]	@ (8000598 <HAL_Init+0x40>)
 800056e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000572:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000574:	4b08      	ldr	r3, [pc, #32]	@ (8000598 <HAL_Init+0x40>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a07      	ldr	r2, [pc, #28]	@ (8000598 <HAL_Init+0x40>)
 800057a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800057e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000580:	2003      	movs	r0, #3
 8000582:	f000 f901 	bl	8000788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000586:	200f      	movs	r0, #15
 8000588:	f000 f808 	bl	800059c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800058c:	f7ff ff50 	bl	8000430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000590:	2300      	movs	r3, #0
}
 8000592:	4618      	mov	r0, r3
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40023c00 	.word	0x40023c00

0800059c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a4:	4b12      	ldr	r3, [pc, #72]	@ (80005f0 <HAL_InitTick+0x54>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	4b12      	ldr	r3, [pc, #72]	@ (80005f4 <HAL_InitTick+0x58>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	4619      	mov	r1, r3
 80005ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f90b 	bl	80007d6 <HAL_SYSTICK_Config>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005c6:	2301      	movs	r3, #1
 80005c8:	e00e      	b.n	80005e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b0f      	cmp	r3, #15
 80005ce:	d80a      	bhi.n	80005e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d0:	2200      	movs	r2, #0
 80005d2:	6879      	ldr	r1, [r7, #4]
 80005d4:	f04f 30ff 	mov.w	r0, #4294967295
 80005d8:	f000 f8e1 	bl	800079e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005dc:	4a06      	ldr	r2, [pc, #24]	@ (80005f8 <HAL_InitTick+0x5c>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005e2:	2300      	movs	r3, #0
 80005e4:	e000      	b.n	80005e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005e6:	2301      	movs	r3, #1
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000000 	.word	0x20000000
 80005f4:	20000008 	.word	0x20000008
 80005f8:	20000004 	.word	0x20000004

080005fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000600:	4b06      	ldr	r3, [pc, #24]	@ (800061c <HAL_IncTick+0x20>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	461a      	mov	r2, r3
 8000606:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <HAL_IncTick+0x24>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4413      	add	r3, r2
 800060c:	4a04      	ldr	r2, [pc, #16]	@ (8000620 <HAL_IncTick+0x24>)
 800060e:	6013      	str	r3, [r2, #0]
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000008 	.word	0x20000008
 8000620:	2000002c 	.word	0x2000002c

08000624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f003 0307 	and.w	r3, r3, #7
 8000632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000634:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <__NVIC_SetPriorityGrouping+0x44>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000640:	4013      	ands	r3, r2
 8000642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000656:	4a04      	ldr	r2, [pc, #16]	@ (8000668 <__NVIC_SetPriorityGrouping+0x44>)
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	60d3      	str	r3, [r2, #12]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000670:	4b04      	ldr	r3, [pc, #16]	@ (8000684 <__NVIC_GetPriorityGrouping+0x18>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	f003 0307 	and.w	r3, r3, #7
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	6039      	str	r1, [r7, #0]
 8000692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000698:	2b00      	cmp	r3, #0
 800069a:	db0a      	blt.n	80006b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	490c      	ldr	r1, [pc, #48]	@ (80006d4 <__NVIC_SetPriority+0x4c>)
 80006a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a6:	0112      	lsls	r2, r2, #4
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	440b      	add	r3, r1
 80006ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b0:	e00a      	b.n	80006c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4908      	ldr	r1, [pc, #32]	@ (80006d8 <__NVIC_SetPriority+0x50>)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	3b04      	subs	r3, #4
 80006c0:	0112      	lsls	r2, r2, #4
 80006c2:	b2d2      	uxtb	r2, r2
 80006c4:	440b      	add	r3, r1
 80006c6:	761a      	strb	r2, [r3, #24]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000e100 	.word	0xe000e100
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b089      	sub	sp, #36	@ 0x24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	f1c3 0307 	rsb	r3, r3, #7
 80006f6:	2b04      	cmp	r3, #4
 80006f8:	bf28      	it	cs
 80006fa:	2304      	movcs	r3, #4
 80006fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3304      	adds	r3, #4
 8000702:	2b06      	cmp	r3, #6
 8000704:	d902      	bls.n	800070c <NVIC_EncodePriority+0x30>
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3b03      	subs	r3, #3
 800070a:	e000      	b.n	800070e <NVIC_EncodePriority+0x32>
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	f04f 32ff 	mov.w	r2, #4294967295
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	fa02 f303 	lsl.w	r3, r2, r3
 800071a:	43da      	mvns	r2, r3
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	401a      	ands	r2, r3
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000724:	f04f 31ff 	mov.w	r1, #4294967295
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	fa01 f303 	lsl.w	r3, r1, r3
 800072e:	43d9      	mvns	r1, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	4313      	orrs	r3, r2
         );
}
 8000736:	4618      	mov	r0, r3
 8000738:	3724      	adds	r7, #36	@ 0x24
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3b01      	subs	r3, #1
 8000750:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000754:	d301      	bcc.n	800075a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000756:	2301      	movs	r3, #1
 8000758:	e00f      	b.n	800077a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075a:	4a0a      	ldr	r2, [pc, #40]	@ (8000784 <SysTick_Config+0x40>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000762:	210f      	movs	r1, #15
 8000764:	f04f 30ff 	mov.w	r0, #4294967295
 8000768:	f7ff ff8e 	bl	8000688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800076c:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <SysTick_Config+0x40>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000772:	4b04      	ldr	r3, [pc, #16]	@ (8000784 <SysTick_Config+0x40>)
 8000774:	2207      	movs	r2, #7
 8000776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	e000e010 	.word	0xe000e010

08000788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff ff47 	bl	8000624 <__NVIC_SetPriorityGrouping>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800079e:	b580      	push	{r7, lr}
 80007a0:	b086      	sub	sp, #24
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	4603      	mov	r3, r0
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b0:	f7ff ff5c 	bl	800066c <__NVIC_GetPriorityGrouping>
 80007b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	68b9      	ldr	r1, [r7, #8]
 80007ba:	6978      	ldr	r0, [r7, #20]
 80007bc:	f7ff ff8e 	bl	80006dc <NVIC_EncodePriority>
 80007c0:	4602      	mov	r2, r0
 80007c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c6:	4611      	mov	r1, r2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff5d 	bl	8000688 <__NVIC_SetPriority>
}
 80007ce:	bf00      	nop
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff ffb0 	bl	8000744 <SysTick_Config>
 80007e4:	4603      	mov	r3, r0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <__libc_init_array>:
 80007f0:	b570      	push	{r4, r5, r6, lr}
 80007f2:	4d0d      	ldr	r5, [pc, #52]	@ (8000828 <__libc_init_array+0x38>)
 80007f4:	4c0d      	ldr	r4, [pc, #52]	@ (800082c <__libc_init_array+0x3c>)
 80007f6:	1b64      	subs	r4, r4, r5
 80007f8:	10a4      	asrs	r4, r4, #2
 80007fa:	2600      	movs	r6, #0
 80007fc:	42a6      	cmp	r6, r4
 80007fe:	d109      	bne.n	8000814 <__libc_init_array+0x24>
 8000800:	4d0b      	ldr	r5, [pc, #44]	@ (8000830 <__libc_init_array+0x40>)
 8000802:	4c0c      	ldr	r4, [pc, #48]	@ (8000834 <__libc_init_array+0x44>)
 8000804:	f000 f818 	bl	8000838 <_init>
 8000808:	1b64      	subs	r4, r4, r5
 800080a:	10a4      	asrs	r4, r4, #2
 800080c:	2600      	movs	r6, #0
 800080e:	42a6      	cmp	r6, r4
 8000810:	d105      	bne.n	800081e <__libc_init_array+0x2e>
 8000812:	bd70      	pop	{r4, r5, r6, pc}
 8000814:	f855 3b04 	ldr.w	r3, [r5], #4
 8000818:	4798      	blx	r3
 800081a:	3601      	adds	r6, #1
 800081c:	e7ee      	b.n	80007fc <__libc_init_array+0xc>
 800081e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000822:	4798      	blx	r3
 8000824:	3601      	adds	r6, #1
 8000826:	e7f2      	b.n	800080e <__libc_init_array+0x1e>
 8000828:	08000850 	.word	0x08000850
 800082c:	08000850 	.word	0x08000850
 8000830:	08000850 	.word	0x08000850
 8000834:	08000854 	.word	0x08000854

08000838 <_init>:
 8000838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800083a:	bf00      	nop
 800083c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800083e:	bc08      	pop	{r3}
 8000840:	469e      	mov	lr, r3
 8000842:	4770      	bx	lr

08000844 <_fini>:
 8000844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000846:	bf00      	nop
 8000848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800084a:	bc08      	pop	{r3}
 800084c:	469e      	mov	lr, r3
 800084e:	4770      	bx	lr
