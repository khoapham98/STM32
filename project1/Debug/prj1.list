
prj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006ac  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000844  08000844  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000844  08000844  0000200c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000844  08000844  0000200c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000844  08000844  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000844  08000844  00001844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000848  08000848  00001848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800084c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08000858  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000858  00002030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000022ac  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000977  00000000  00000000  000042e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000320  00000000  00000000  00004c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000239  00000000  00000000  00004f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014035  00000000  00000000  000051b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000351e  00000000  00000000  000191ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f080  00000000  00000000  0001c70c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009b78c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ab8  00000000  00000000  0009b7d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0009c288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800082c 	.word	0x0800082c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	0800082c 	.word	0x0800082c

080001d8 <main>:
void SPI_Init();
void master_recv(uint16_t data);
volatile uint16_t tmp = 0;

int main()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	HAL_Init();
 80001dc:	f000 f986 	bl	80004ec <HAL_Init>
	SPI_Init();
 80001e0:	f000 f860 	bl	80002a4 <SPI_Init>

	while (1)
	{
		master_recv(0x8f);
 80001e4:	208f      	movs	r0, #143	@ 0x8f
 80001e6:	f000 f807 	bl	80001f8 <master_recv>
		HAL_Delay(1000);
 80001ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001ee:	f000 f9ef 	bl	80005d0 <HAL_Delay>
		master_recv(0x8f);
 80001f2:	bf00      	nop
 80001f4:	e7f6      	b.n	80001e4 <main+0xc>
	...

080001f8 <master_recv>:

	return 0;
}

void master_recv(uint16_t data)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b087      	sub	sp, #28
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	80fb      	strh	r3, [r7, #6]
	uint32_t* GPIOE_ODR = (uint32_t*) (GPIOE_BASE_ADDR + 0x14);
 8000202:	4b24      	ldr	r3, [pc, #144]	@ (8000294 <master_recv+0x9c>)
 8000204:	617b      	str	r3, [r7, #20]
	uint16_t* SPI_DR = (uint16_t*) (SPI1_BASE_ADDR + 0x0C);
 8000206:	4b24      	ldr	r3, [pc, #144]	@ (8000298 <master_recv+0xa0>)
 8000208:	613b      	str	r3, [r7, #16]
	uint16_t* SPI_SR = (uint16_t*) (SPI1_BASE_ADDR + 0x08);
 800020a:	4b24      	ldr	r3, [pc, #144]	@ (800029c <master_recv+0xa4>)
 800020c:	60fb      	str	r3, [r7, #12]

	/* select slave */
	*GPIOE_ODR &= ~(1 << 3);
 800020e:	697b      	ldr	r3, [r7, #20]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f023 0208 	bic.w	r2, r3, #8
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	601a      	str	r2, [r3, #0]

	/* wait until the TX buffer is empty*/
	while (((*SPI_SR >> 1) & 1) == 0);
 800021a:	bf00      	nop
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	881b      	ldrh	r3, [r3, #0]
 8000220:	085b      	lsrs	r3, r3, #1
 8000222:	b29b      	uxth	r3, r3
 8000224:	f003 0301 	and.w	r3, r3, #1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d0f7      	beq.n	800021c <master_recv+0x24>

	/* write data into DR register */
	*SPI_DR = data;
 800022c:	693b      	ldr	r3, [r7, #16]
 800022e:	88fa      	ldrh	r2, [r7, #6]
 8000230:	801a      	strh	r2, [r3, #0]

	/* wait until the data has been transmitted */
	while (((*SPI_SR >> 7) & 1) == 1);
 8000232:	bf00      	nop
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	881b      	ldrh	r3, [r3, #0]
 8000238:	09db      	lsrs	r3, r3, #7
 800023a:	b29b      	uxth	r3, r3
 800023c:	f003 0301 	and.w	r3, r3, #1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d1f7      	bne.n	8000234 <master_recv+0x3c>

	/* read dummy data to clear the RX buffer */
	tmp = *SPI_DR;
 8000244:	693b      	ldr	r3, [r7, #16]
 8000246:	881a      	ldrh	r2, [r3, #0]
 8000248:	4b15      	ldr	r3, [pc, #84]	@ (80002a0 <master_recv+0xa8>)
 800024a:	801a      	strh	r2, [r3, #0]

	/* wait until the TX buffer is empty*/
	while (((*SPI_SR >> 1) & 1) == 0);
 800024c:	bf00      	nop
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	881b      	ldrh	r3, [r3, #0]
 8000252:	085b      	lsrs	r3, r3, #1
 8000254:	b29b      	uxth	r3, r3
 8000256:	f003 0301 	and.w	r3, r3, #1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d0f7      	beq.n	800024e <master_recv+0x56>

	/* write dummy data into DR register */
	*SPI_DR = 0x00;
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	2200      	movs	r2, #0
 8000262:	801a      	strh	r2, [r3, #0]

	/* wait until the data has been transmitted */
//	while (((*SPI_SR >> 7) & 1) == 1);

	/* wait until the RX buffer is not empty */
	while ((*SPI_SR & 1) == 0);
 8000264:	bf00      	nop
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	881b      	ldrh	r3, [r3, #0]
 800026a:	f003 0301 	and.w	r3, r3, #1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d0f9      	beq.n	8000266 <master_recv+0x6e>

	/* read data that is sent by slave */
	tmp = *SPI_DR;
 8000272:	693b      	ldr	r3, [r7, #16]
 8000274:	881a      	ldrh	r2, [r3, #0]
 8000276:	4b0a      	ldr	r3, [pc, #40]	@ (80002a0 <master_recv+0xa8>)
 8000278:	801a      	strh	r2, [r3, #0]

	/* un-active slave */
	*GPIOE_ODR |= 1 << 3;
 800027a:	697b      	ldr	r3, [r7, #20]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f043 0208 	orr.w	r2, r3, #8
 8000282:	697b      	ldr	r3, [r7, #20]
 8000284:	601a      	str	r2, [r3, #0]
}
 8000286:	bf00      	nop
 8000288:	371c      	adds	r7, #28
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	40021014 	.word	0x40021014
 8000298:	4001300c 	.word	0x4001300c
 800029c:	40013008 	.word	0x40013008
 80002a0:	20000028 	.word	0x20000028

080002a4 <SPI_Init>:
	- PA6: MISO
	- PA7: MOSI
	- PE3: SS
 */
void SPI_Init()
{
 80002a4:	b480      	push	{r7}
 80002a6:	b089      	sub	sp, #36	@ 0x24
 80002a8:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80002aa:	2300      	movs	r3, #0
 80002ac:	60fb      	str	r3, [r7, #12]
 80002ae:	4b40      	ldr	r3, [pc, #256]	@ (80003b0 <SPI_Init+0x10c>)
 80002b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b2:	4a3f      	ldr	r2, [pc, #252]	@ (80003b0 <SPI_Init+0x10c>)
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80002ba:	4b3d      	ldr	r3, [pc, #244]	@ (80003b0 <SPI_Init+0x10c>)
 80002bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002be:	f003 0301 	and.w	r3, r3, #1
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80002c6:	2300      	movs	r3, #0
 80002c8:	60bb      	str	r3, [r7, #8]
 80002ca:	4b39      	ldr	r3, [pc, #228]	@ (80003b0 <SPI_Init+0x10c>)
 80002cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ce:	4a38      	ldr	r2, [pc, #224]	@ (80003b0 <SPI_Init+0x10c>)
 80002d0:	f043 0310 	orr.w	r3, r3, #16
 80002d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80002d6:	4b36      	ldr	r3, [pc, #216]	@ (80003b0 <SPI_Init+0x10c>)
 80002d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002da:	f003 0310 	and.w	r3, r3, #16
 80002de:	60bb      	str	r3, [r7, #8]
 80002e0:	68bb      	ldr	r3, [r7, #8]
	uint32_t* GPIOE_MODER = (uint32_t*) (GPIOE_BASE_ADDR + 0x00);
 80002e2:	4b34      	ldr	r3, [pc, #208]	@ (80003b4 <SPI_Init+0x110>)
 80002e4:	61fb      	str	r3, [r7, #28]
	uint32_t* GPIOA_MODER = (uint32_t*) (GPIOA_BASE_ADDR + 0x00);
 80002e6:	4b34      	ldr	r3, [pc, #208]	@ (80003b8 <SPI_Init+0x114>)
 80002e8:	61bb      	str	r3, [r7, #24]
	uint32_t* GPIOA_AFRL = (uint32_t*) (GPIOA_BASE_ADDR + 0x20);
 80002ea:	4b34      	ldr	r3, [pc, #208]	@ (80003bc <SPI_Init+0x118>)
 80002ec:	617b      	str	r3, [r7, #20]
	*GPIOA_MODER &= ~(0xff << 10);	// clear bit
 80002ee:	69bb      	ldr	r3, [r7, #24]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f423 327f 	bic.w	r2, r3, #261120	@ 0x3fc00
 80002f6:	69bb      	ldr	r3, [r7, #24]
 80002f8:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER |= (0b10 << 10) | (0b10 << 12) | (0b10 << 14);	// set PA5, PA6, PA7 at AF mode
 80002fa:	69bb      	ldr	r3, [r7, #24]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f443 4228 	orr.w	r2, r3, #43008	@ 0xa800
 8000302:	69bb      	ldr	r3, [r7, #24]
 8000304:	601a      	str	r2, [r3, #0]
	*GPIOE_MODER |= (0b01 << 6);	// set PE3 at OUTPUT mode
 8000306:	69fb      	ldr	r3, [r7, #28]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800030e:	69fb      	ldr	r3, [r7, #28]
 8000310:	601a      	str	r2, [r3, #0]
	*GPIOA_AFRL &= ~(0xfff << 20);	// clear bit
 8000312:	697b      	ldr	r3, [r7, #20]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	601a      	str	r2, [r3, #0]
	*GPIOA_AFRL |= (5 << 20) | (5 << 24) | (5 << 28);	// select AF05
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000326:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 800032a:	697a      	ldr	r2, [r7, #20]
 800032c:	6013      	str	r3, [r2, #0]

	__HAL_RCC_SPI1_CLK_ENABLE();
 800032e:	2300      	movs	r3, #0
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	4b1f      	ldr	r3, [pc, #124]	@ (80003b0 <SPI_Init+0x10c>)
 8000334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000336:	4a1e      	ldr	r2, [pc, #120]	@ (80003b0 <SPI_Init+0x10c>)
 8000338:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800033c:	6453      	str	r3, [r2, #68]	@ 0x44
 800033e:	4b1c      	ldr	r3, [pc, #112]	@ (80003b0 <SPI_Init+0x10c>)
 8000340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000342:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000346:	607b      	str	r3, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]
	uint16_t* SPI_CR1 = (uint16_t*) (SPI1_BASE_ADDR + 0x00);
 800034a:	4b1d      	ldr	r3, [pc, #116]	@ (80003c0 <SPI_Init+0x11c>)
 800034c:	613b      	str	r3, [r7, #16]
	*SPI_CR1 |= 1 << 2;	// master mode
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	881b      	ldrh	r3, [r3, #0]
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	b29a      	uxth	r2, r3
 8000358:	693b      	ldr	r3, [r7, #16]
 800035a:	801a      	strh	r2, [r3, #0]
	*SPI_CR1 &= ~(0b111 << 3);	// clear bit
 800035c:	693b      	ldr	r3, [r7, #16]
 800035e:	881b      	ldrh	r3, [r3, #0]
 8000360:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000364:	b29a      	uxth	r2, r3
 8000366:	693b      	ldr	r3, [r7, #16]
 8000368:	801a      	strh	r2, [r3, #0]
	*SPI_CR1 |= (0b011 << 3);	// configure Clock = 1MHz
 800036a:	693b      	ldr	r3, [r7, #16]
 800036c:	881b      	ldrh	r3, [r3, #0]
 800036e:	f043 0318 	orr.w	r3, r3, #24
 8000372:	b29a      	uxth	r2, r3
 8000374:	693b      	ldr	r3, [r7, #16]
 8000376:	801a      	strh	r2, [r3, #0]
	*SPI_CR1 |= 1 << 9;	// Software slave management enabled
 8000378:	693b      	ldr	r3, [r7, #16]
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000380:	b29a      	uxth	r2, r3
 8000382:	693b      	ldr	r3, [r7, #16]
 8000384:	801a      	strh	r2, [r3, #0]
	*SPI_CR1 |= 1 << 8;	// Internal slave select
 8000386:	693b      	ldr	r3, [r7, #16]
 8000388:	881b      	ldrh	r3, [r3, #0]
 800038a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800038e:	b29a      	uxth	r2, r3
 8000390:	693b      	ldr	r3, [r7, #16]
 8000392:	801a      	strh	r2, [r3, #0]
	*SPI_CR1 |= 1 << 6;	// SPI enable
 8000394:	693b      	ldr	r3, [r7, #16]
 8000396:	881b      	ldrh	r3, [r3, #0]
 8000398:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800039c:	b29a      	uxth	r2, r3
 800039e:	693b      	ldr	r3, [r7, #16]
 80003a0:	801a      	strh	r2, [r3, #0]
}
 80003a2:	bf00      	nop
 80003a4:	3724      	adds	r7, #36	@ 0x24
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	40023800 	.word	0x40023800
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40020000 	.word	0x40020000
 80003bc:	40020020 	.word	0x40020020
 80003c0:	40013000 	.word	0x40013000

080003c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ca:	2300      	movs	r3, #0
 80003cc:	607b      	str	r3, [r7, #4]
 80003ce:	4b10      	ldr	r3, [pc, #64]	@ (8000410 <HAL_MspInit+0x4c>)
 80003d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000410 <HAL_MspInit+0x4c>)
 80003d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80003da:	4b0d      	ldr	r3, [pc, #52]	@ (8000410 <HAL_MspInit+0x4c>)
 80003dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003e6:	2300      	movs	r3, #0
 80003e8:	603b      	str	r3, [r7, #0]
 80003ea:	4b09      	ldr	r3, [pc, #36]	@ (8000410 <HAL_MspInit+0x4c>)
 80003ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003ee:	4a08      	ldr	r2, [pc, #32]	@ (8000410 <HAL_MspInit+0x4c>)
 80003f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80003f6:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <HAL_MspInit+0x4c>)
 80003f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003fe:	603b      	str	r3, [r7, #0]
 8000400:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000402:	bf00      	nop
 8000404:	370c      	adds	r7, #12
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40023800 	.word	0x40023800

08000414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000418:	bf00      	nop
 800041a:	e7fd      	b.n	8000418 <NMI_Handler+0x4>

0800041c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000420:	bf00      	nop
 8000422:	e7fd      	b.n	8000420 <HardFault_Handler+0x4>

08000424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000428:	bf00      	nop
 800042a:	e7fd      	b.n	8000428 <MemManage_Handler+0x4>

0800042c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000430:	bf00      	nop
 8000432:	e7fd      	b.n	8000430 <BusFault_Handler+0x4>

08000434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000438:	bf00      	nop
 800043a:	e7fd      	b.n	8000438 <UsageFault_Handler+0x4>

0800043c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr

0800044a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800044a:	b480      	push	{r7}
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800044e:	bf00      	nop
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr

08000458 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr

08000466 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800046a:	f000 f891 	bl	8000590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
	...

08000474 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000478:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <SystemInit+0x20>)
 800047a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800047e:	4a05      	ldr	r2, [pc, #20]	@ (8000494 <SystemInit+0x20>)
 8000480:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000484:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	e000ed00 	.word	0xe000ed00

08000498 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8000498:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80004d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800049c:	f7ff ffea 	bl	8000474 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004a0:	480c      	ldr	r0, [pc, #48]	@ (80004d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004a2:	490d      	ldr	r1, [pc, #52]	@ (80004d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004a4:	4a0d      	ldr	r2, [pc, #52]	@ (80004dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a8:	e002      	b.n	80004b0 <LoopCopyDataInit>

080004aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ae:	3304      	adds	r3, #4

080004b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b4:	d3f9      	bcc.n	80004aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004b6:	4a0a      	ldr	r2, [pc, #40]	@ (80004e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004b8:	4c0a      	ldr	r4, [pc, #40]	@ (80004e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004bc:	e001      	b.n	80004c2 <LoopFillZerobss>

080004be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c0:	3204      	adds	r2, #4

080004c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c4:	d3fb      	bcc.n	80004be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004c6:	f000 f98d 	bl	80007e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004ca:	f7ff fe85 	bl	80001d8 <main>
  bx  lr    
 80004ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80004d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004dc:	0800084c 	.word	0x0800084c
  ldr r2, =_sbss
 80004e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004e4:	20000030 	.word	0x20000030

080004e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
   b  Infinite_Loop
 80004e8:	e7fe      	b.n	80004e8 <ADC_IRQHandler>
	...

080004ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004f0:	4b0e      	ldr	r3, [pc, #56]	@ (800052c <HAL_Init+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0d      	ldr	r2, [pc, #52]	@ (800052c <HAL_Init+0x40>)
 80004f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004fc:	4b0b      	ldr	r3, [pc, #44]	@ (800052c <HAL_Init+0x40>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0a      	ldr	r2, [pc, #40]	@ (800052c <HAL_Init+0x40>)
 8000502:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000508:	4b08      	ldr	r3, [pc, #32]	@ (800052c <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a07      	ldr	r2, [pc, #28]	@ (800052c <HAL_Init+0x40>)
 800050e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000514:	2003      	movs	r0, #3
 8000516:	f000 f931 	bl	800077c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051a:	200f      	movs	r0, #15
 800051c:	f000 f808 	bl	8000530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000520:	f7ff ff50 	bl	80003c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40023c00 	.word	0x40023c00

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000538:	4b12      	ldr	r3, [pc, #72]	@ (8000584 <HAL_InitTick+0x54>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b12      	ldr	r3, [pc, #72]	@ (8000588 <HAL_InitTick+0x58>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000546:	fbb3 f3f1 	udiv	r3, r3, r1
 800054a:	fbb2 f3f3 	udiv	r3, r2, r3
 800054e:	4618      	mov	r0, r3
 8000550:	f000 f93b 	bl	80007ca <HAL_SYSTICK_Config>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800055a:	2301      	movs	r3, #1
 800055c:	e00e      	b.n	800057c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b0f      	cmp	r3, #15
 8000562:	d80a      	bhi.n	800057a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000564:	2200      	movs	r2, #0
 8000566:	6879      	ldr	r1, [r7, #4]
 8000568:	f04f 30ff 	mov.w	r0, #4294967295
 800056c:	f000 f911 	bl	8000792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000570:	4a06      	ldr	r2, [pc, #24]	@ (800058c <HAL_InitTick+0x5c>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	e000      	b.n	800057c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800057a:	2301      	movs	r3, #1
}
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000000 	.word	0x20000000
 8000588:	20000008 	.word	0x20000008
 800058c:	20000004 	.word	0x20000004

08000590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000594:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <HAL_IncTick+0x20>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	4b06      	ldr	r3, [pc, #24]	@ (80005b4 <HAL_IncTick+0x24>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4413      	add	r3, r2
 80005a0:	4a04      	ldr	r2, [pc, #16]	@ (80005b4 <HAL_IncTick+0x24>)
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000008 	.word	0x20000008
 80005b4:	2000002c 	.word	0x2000002c

080005b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  return uwTick;
 80005bc:	4b03      	ldr	r3, [pc, #12]	@ (80005cc <HAL_GetTick+0x14>)
 80005be:	681b      	ldr	r3, [r3, #0]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	2000002c 	.word	0x2000002c

080005d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005d8:	f7ff ffee 	bl	80005b8 <HAL_GetTick>
 80005dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e8:	d005      	beq.n	80005f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000614 <HAL_Delay+0x44>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	461a      	mov	r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4413      	add	r3, r2
 80005f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005f6:	bf00      	nop
 80005f8:	f7ff ffde 	bl	80005b8 <HAL_GetTick>
 80005fc:	4602      	mov	r2, r0
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	429a      	cmp	r2, r3
 8000606:	d8f7      	bhi.n	80005f8 <HAL_Delay+0x28>
  {
  }
}
 8000608:	bf00      	nop
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000008 	.word	0x20000008

08000618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f003 0307 	and.w	r3, r3, #7
 8000626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000628:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <__NVIC_SetPriorityGrouping+0x44>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000634:	4013      	ands	r3, r2
 8000636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000640:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000644:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800064a:	4a04      	ldr	r2, [pc, #16]	@ (800065c <__NVIC_SetPriorityGrouping+0x44>)
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	60d3      	str	r3, [r2, #12]
}
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000664:	4b04      	ldr	r3, [pc, #16]	@ (8000678 <__NVIC_GetPriorityGrouping+0x18>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	0a1b      	lsrs	r3, r3, #8
 800066a:	f003 0307 	and.w	r3, r3, #7
}
 800066e:	4618      	mov	r0, r3
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	6039      	str	r1, [r7, #0]
 8000686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068c:	2b00      	cmp	r3, #0
 800068e:	db0a      	blt.n	80006a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	b2da      	uxtb	r2, r3
 8000694:	490c      	ldr	r1, [pc, #48]	@ (80006c8 <__NVIC_SetPriority+0x4c>)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	0112      	lsls	r2, r2, #4
 800069c:	b2d2      	uxtb	r2, r2
 800069e:	440b      	add	r3, r1
 80006a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a4:	e00a      	b.n	80006bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4908      	ldr	r1, [pc, #32]	@ (80006cc <__NVIC_SetPriority+0x50>)
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	f003 030f 	and.w	r3, r3, #15
 80006b2:	3b04      	subs	r3, #4
 80006b4:	0112      	lsls	r2, r2, #4
 80006b6:	b2d2      	uxtb	r2, r2
 80006b8:	440b      	add	r3, r1
 80006ba:	761a      	strb	r2, [r3, #24]
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	e000e100 	.word	0xe000e100
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b089      	sub	sp, #36	@ 0x24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	f1c3 0307 	rsb	r3, r3, #7
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	bf28      	it	cs
 80006ee:	2304      	movcs	r3, #4
 80006f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	3304      	adds	r3, #4
 80006f6:	2b06      	cmp	r3, #6
 80006f8:	d902      	bls.n	8000700 <NVIC_EncodePriority+0x30>
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	3b03      	subs	r3, #3
 80006fe:	e000      	b.n	8000702 <NVIC_EncodePriority+0x32>
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	f04f 32ff 	mov.w	r2, #4294967295
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	fa02 f303 	lsl.w	r3, r2, r3
 800070e:	43da      	mvns	r2, r3
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	401a      	ands	r2, r3
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000718:	f04f 31ff 	mov.w	r1, #4294967295
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	fa01 f303 	lsl.w	r3, r1, r3
 8000722:	43d9      	mvns	r1, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	4313      	orrs	r3, r2
         );
}
 800072a:	4618      	mov	r0, r3
 800072c:	3724      	adds	r7, #36	@ 0x24
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
	...

08000738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3b01      	subs	r3, #1
 8000744:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000748:	d301      	bcc.n	800074e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800074a:	2301      	movs	r3, #1
 800074c:	e00f      	b.n	800076e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800074e:	4a0a      	ldr	r2, [pc, #40]	@ (8000778 <SysTick_Config+0x40>)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3b01      	subs	r3, #1
 8000754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000756:	210f      	movs	r1, #15
 8000758:	f04f 30ff 	mov.w	r0, #4294967295
 800075c:	f7ff ff8e 	bl	800067c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000760:	4b05      	ldr	r3, [pc, #20]	@ (8000778 <SysTick_Config+0x40>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000766:	4b04      	ldr	r3, [pc, #16]	@ (8000778 <SysTick_Config+0x40>)
 8000768:	2207      	movs	r2, #7
 800076a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	e000e010 	.word	0xe000e010

0800077c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff ff47 	bl	8000618 <__NVIC_SetPriorityGrouping>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000792:	b580      	push	{r7, lr}
 8000794:	b086      	sub	sp, #24
 8000796:	af00      	add	r7, sp, #0
 8000798:	4603      	mov	r3, r0
 800079a:	60b9      	str	r1, [r7, #8]
 800079c:	607a      	str	r2, [r7, #4]
 800079e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007a4:	f7ff ff5c 	bl	8000660 <__NVIC_GetPriorityGrouping>
 80007a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	68b9      	ldr	r1, [r7, #8]
 80007ae:	6978      	ldr	r0, [r7, #20]
 80007b0:	f7ff ff8e 	bl	80006d0 <NVIC_EncodePriority>
 80007b4:	4602      	mov	r2, r0
 80007b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ba:	4611      	mov	r1, r2
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff5d 	bl	800067c <__NVIC_SetPriority>
}
 80007c2:	bf00      	nop
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff ffb0 	bl	8000738 <SysTick_Config>
 80007d8:	4603      	mov	r3, r0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <__libc_init_array>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	4d0d      	ldr	r5, [pc, #52]	@ (800081c <__libc_init_array+0x38>)
 80007e8:	4c0d      	ldr	r4, [pc, #52]	@ (8000820 <__libc_init_array+0x3c>)
 80007ea:	1b64      	subs	r4, r4, r5
 80007ec:	10a4      	asrs	r4, r4, #2
 80007ee:	2600      	movs	r6, #0
 80007f0:	42a6      	cmp	r6, r4
 80007f2:	d109      	bne.n	8000808 <__libc_init_array+0x24>
 80007f4:	4d0b      	ldr	r5, [pc, #44]	@ (8000824 <__libc_init_array+0x40>)
 80007f6:	4c0c      	ldr	r4, [pc, #48]	@ (8000828 <__libc_init_array+0x44>)
 80007f8:	f000 f818 	bl	800082c <_init>
 80007fc:	1b64      	subs	r4, r4, r5
 80007fe:	10a4      	asrs	r4, r4, #2
 8000800:	2600      	movs	r6, #0
 8000802:	42a6      	cmp	r6, r4
 8000804:	d105      	bne.n	8000812 <__libc_init_array+0x2e>
 8000806:	bd70      	pop	{r4, r5, r6, pc}
 8000808:	f855 3b04 	ldr.w	r3, [r5], #4
 800080c:	4798      	blx	r3
 800080e:	3601      	adds	r6, #1
 8000810:	e7ee      	b.n	80007f0 <__libc_init_array+0xc>
 8000812:	f855 3b04 	ldr.w	r3, [r5], #4
 8000816:	4798      	blx	r3
 8000818:	3601      	adds	r6, #1
 800081a:	e7f2      	b.n	8000802 <__libc_init_array+0x1e>
 800081c:	08000844 	.word	0x08000844
 8000820:	08000844 	.word	0x08000844
 8000824:	08000844 	.word	0x08000844
 8000828:	08000848 	.word	0x08000848

0800082c <_init>:
 800082c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800082e:	bf00      	nop
 8000830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000832:	bc08      	pop	{r3}
 8000834:	469e      	mov	lr, r3
 8000836:	4770      	bx	lr

08000838 <_fini>:
 8000838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800083a:	bf00      	nop
 800083c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800083e:	bc08      	pop	{r3}
 8000840:	469e      	mov	lr, r3
 8000842:	4770      	bx	lr
