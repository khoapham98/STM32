
prj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000078c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000924  08000924  00001924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800093c  0800093c  0000200c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800093c  0800093c  0000200c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800093c  0800093c  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800093c  0800093c  0000193c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000940  08000940  00001940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000944  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  2000000c  08000950  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08000950  00002044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000248f  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a1d  00000000  00000000  000044cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000360  00000000  00000000  00004ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000268  00000000  00000000  00005248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001490c  00000000  00000000  000054b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000038c3  00000000  00000000  00019dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008231f  00000000  00000000  0001d67f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009f99e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c20  00000000  00000000  0009f9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000a0604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800090c 	.word	0x0800090c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	0800090c 	.word	0x0800090c

080001d8 <main>:
void clear_string();
char is_done();
void USART1_IRQHandler();

int main()
{
 80001d8:	b598      	push	{r3, r4, r7, lr}
 80001da:	af00      	add	r7, sp, #0
	HAL_Init();
 80001dc:	f000 fa08 	bl	80005f0 <HAL_Init>
	USART_Init();
 80001e0:	f000 f8f0 	bl	80003c4 <USART_Init>
	LED_Init();
 80001e4:	f000 f8c4 	bl	8000370 <LED_Init>

	while(1)
	{
		if (is_done())
 80001e8:	f000 f878 	bl	80002dc <is_done>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d0fa      	beq.n	80001e8 <main+0x10>
		{
			ctrl_LED(get_color(), get_state());
 80001f2:	f000 f829 	bl	8000248 <get_color>
 80001f6:	4603      	mov	r3, r0
 80001f8:	461c      	mov	r4, r3
 80001fa:	f000 f84d 	bl	8000298 <get_state>
 80001fe:	4603      	mov	r3, r0
 8000200:	4619      	mov	r1, r3
 8000202:	4620      	mov	r0, r4
 8000204:	f000 f888 	bl	8000318 <ctrl_LED>
			clear_string();
 8000208:	f000 f858 	bl	80002bc <clear_string>
		if (is_done())
 800020c:	e7ec      	b.n	80001e8 <main+0x10>
	...

08000210 <USART1_IRQHandler>:
	}
	return 0;
}

void USART1_IRQHandler()
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
	uint32_t* USART1_DR = (uint32_t*) (USART1_BASE_ADDR + 0x04);
 8000216:	4b09      	ldr	r3, [pc, #36]	@ (800023c <USART1_IRQHandler+0x2c>)
 8000218:	607b      	str	r3, [r7, #4]
	str[_index++] = *USART1_DR;
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	6818      	ldr	r0, [r3, #0]
 800021e:	4b08      	ldr	r3, [pc, #32]	@ (8000240 <USART1_IRQHandler+0x30>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	1c5a      	adds	r2, r3, #1
 8000224:	4906      	ldr	r1, [pc, #24]	@ (8000240 <USART1_IRQHandler+0x30>)
 8000226:	600a      	str	r2, [r1, #0]
 8000228:	b2c1      	uxtb	r1, r0
 800022a:	4a06      	ldr	r2, [pc, #24]	@ (8000244 <USART1_IRQHandler+0x34>)
 800022c:	54d1      	strb	r1, [r2, r3]
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	40011004 	.word	0x40011004
 8000240:	2000003c 	.word	0x2000003c
 8000244:	20000028 	.word	0x20000028

08000248 <get_color>:

color_t get_color()
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	if (strstr(str, "green") != NULL) { return GREEN;}
 800024c:	490e      	ldr	r1, [pc, #56]	@ (8000288 <get_color+0x40>)
 800024e:	480f      	ldr	r0, [pc, #60]	@ (800028c <get_color+0x44>)
 8000250:	f000 fb21 	bl	8000896 <strstr>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <get_color+0x16>
 800025a:	2300      	movs	r3, #0
 800025c:	e012      	b.n	8000284 <get_color+0x3c>
	else if (strstr(str, "orange") != NULL) { return ORANGE; }
 800025e:	490c      	ldr	r1, [pc, #48]	@ (8000290 <get_color+0x48>)
 8000260:	480a      	ldr	r0, [pc, #40]	@ (800028c <get_color+0x44>)
 8000262:	f000 fb18 	bl	8000896 <strstr>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <get_color+0x28>
 800026c:	2301      	movs	r3, #1
 800026e:	e009      	b.n	8000284 <get_color+0x3c>
	else if (strstr(str, "red") != NULL) { return RED; }
 8000270:	4908      	ldr	r1, [pc, #32]	@ (8000294 <get_color+0x4c>)
 8000272:	4806      	ldr	r0, [pc, #24]	@ (800028c <get_color+0x44>)
 8000274:	f000 fb0f 	bl	8000896 <strstr>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <get_color+0x3a>
 800027e:	2302      	movs	r3, #2
 8000280:	e000      	b.n	8000284 <get_color+0x3c>
	else {return BLUE;}
 8000282:	2303      	movs	r3, #3
}
 8000284:	4618      	mov	r0, r3
 8000286:	bd80      	pop	{r7, pc}
 8000288:	08000924 	.word	0x08000924
 800028c:	20000028 	.word	0x20000028
 8000290:	0800092c 	.word	0x0800092c
 8000294:	08000934 	.word	0x08000934

08000298 <get_state>:

state_t get_state()
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	if (strstr(str, "on") != NULL) { return ON; }
 800029c:	4905      	ldr	r1, [pc, #20]	@ (80002b4 <get_state+0x1c>)
 800029e:	4806      	ldr	r0, [pc, #24]	@ (80002b8 <get_state+0x20>)
 80002a0:	f000 faf9 	bl	8000896 <strstr>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <get_state+0x16>
 80002aa:	2301      	movs	r3, #1
 80002ac:	e000      	b.n	80002b0 <get_state+0x18>
	else { return OFF; }
 80002ae:	2300      	movs	r3, #0
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	08000938 	.word	0x08000938
 80002b8:	20000028 	.word	0x20000028

080002bc <clear_string>:

void clear_string()
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	memset(str, 0, 20);
 80002c0:	2214      	movs	r2, #20
 80002c2:	2100      	movs	r1, #0
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <clear_string+0x18>)
 80002c6:	f000 fade 	bl	8000886 <memset>
	_index = 0;
 80002ca:	4b03      	ldr	r3, [pc, #12]	@ (80002d8 <clear_string+0x1c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000028 	.word	0x20000028
 80002d8:	2000003c 	.word	0x2000003c

080002dc <is_done>:

char is_done()
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 20; i++)
 80002e2:	2300      	movs	r3, #0
 80002e4:	607b      	str	r3, [r7, #4]
 80002e6:	e00a      	b.n	80002fe <is_done+0x22>
	{
		if (str[i] == '\n') { return 1; }
 80002e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000314 <is_done+0x38>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4413      	add	r3, r2
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	2b0a      	cmp	r3, #10
 80002f2:	d101      	bne.n	80002f8 <is_done+0x1c>
 80002f4:	2301      	movs	r3, #1
 80002f6:	e006      	b.n	8000306 <is_done+0x2a>
	for (int i = 0; i < 20; i++)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	3301      	adds	r3, #1
 80002fc:	607b      	str	r3, [r7, #4]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2b13      	cmp	r3, #19
 8000302:	ddf1      	ble.n	80002e8 <is_done+0xc>
	}
	return 0;
 8000304:	2300      	movs	r3, #0
}
 8000306:	4618      	mov	r0, r3
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	20000028 	.word	0x20000028

08000318 <ctrl_LED>:

void ctrl_LED(color_t color, state_t state)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	460a      	mov	r2, r1
 8000322:	71fb      	strb	r3, [r7, #7]
 8000324:	4613      	mov	r3, r2
 8000326:	71bb      	strb	r3, [r7, #6]
	uint32_t* GPIOD_ODR = (uint32_t*) (GPIOD_BASE_ADDR + 0x14);
 8000328:	4b10      	ldr	r3, [pc, #64]	@ (800036c <ctrl_LED+0x54>)
 800032a:	60fb      	str	r3, [r7, #12]
	 if (state == ON)
 800032c:	79bb      	ldrb	r3, [r7, #6]
 800032e:	2b01      	cmp	r3, #1
 8000330:	d10a      	bne.n	8000348 <ctrl_LED+0x30>
	 {
		 *GPIOD_ODR |= (0b1 << (12 + color));
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	79fa      	ldrb	r2, [r7, #7]
 8000338:	320c      	adds	r2, #12
 800033a:	2101      	movs	r1, #1
 800033c:	fa01 f202 	lsl.w	r2, r1, r2
 8000340:	431a      	orrs	r2, r3
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	601a      	str	r2, [r3, #0]
	 }
	 else
	 {
		 *GPIOD_ODR &= ~(0b1 << (12 + color));
	 }
}
 8000346:	e00a      	b.n	800035e <ctrl_LED+0x46>
		 *GPIOD_ODR &= ~(0b1 << (12 + color));
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	79fa      	ldrb	r2, [r7, #7]
 800034e:	320c      	adds	r2, #12
 8000350:	2101      	movs	r1, #1
 8000352:	fa01 f202 	lsl.w	r2, r1, r2
 8000356:	43d2      	mvns	r2, r2
 8000358:	401a      	ands	r2, r3
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	601a      	str	r2, [r3, #0]
}
 800035e:	bf00      	nop
 8000360:	3714      	adds	r7, #20
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40020c14 	.word	0x40020c14

08000370 <LED_Init>:

void LED_Init()
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000376:	2300      	movs	r3, #0
 8000378:	603b      	str	r3, [r7, #0]
 800037a:	4b10      	ldr	r3, [pc, #64]	@ (80003bc <LED_Init+0x4c>)
 800037c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037e:	4a0f      	ldr	r2, [pc, #60]	@ (80003bc <LED_Init+0x4c>)
 8000380:	f043 0308 	orr.w	r3, r3, #8
 8000384:	6313      	str	r3, [r2, #48]	@ 0x30
 8000386:	4b0d      	ldr	r3, [pc, #52]	@ (80003bc <LED_Init+0x4c>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038a:	f003 0308 	and.w	r3, r3, #8
 800038e:	603b      	str	r3, [r7, #0]
 8000390:	683b      	ldr	r3, [r7, #0]
	uint32_t* GPIOD_MODER = (uint32_t*) (GPIOD_BASE_ADDR + 0x00);
 8000392:	4b0b      	ldr	r3, [pc, #44]	@ (80003c0 <LED_Init+0x50>)
 8000394:	607b      	str	r3, [r7, #4]
	*GPIOD_MODER &= ~(0xff << 24);		// clear pin PD12, PD13, PD14, PD15
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |= (0b01010101 << 24);	// set PD12, PD13, PD14, PD15 as OUTPUT
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f043 42aa 	orr.w	r2, r3, #1426063360	@ 0x55000000
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	601a      	str	r2, [r3, #0]
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	40023800 	.word	0x40023800
 80003c0:	40020c00 	.word	0x40020c00

080003c4 <USART_Init>:
		USART_send_char(str[i]);
	}
}

void USART_Init()
{
 80003c4:	b480      	push	{r7}
 80003c6:	b089      	sub	sp, #36	@ 0x24
 80003c8:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80003ca:	2300      	movs	r3, #0
 80003cc:	60bb      	str	r3, [r7, #8]
 80003ce:	4b38      	ldr	r3, [pc, #224]	@ (80004b0 <USART_Init+0xec>)
 80003d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d2:	4a37      	ldr	r2, [pc, #220]	@ (80004b0 <USART_Init+0xec>)
 80003d4:	f043 0302 	orr.w	r3, r3, #2
 80003d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80003da:	4b35      	ldr	r3, [pc, #212]	@ (80004b0 <USART_Init+0xec>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003de:	f003 0302 	and.w	r3, r3, #2
 80003e2:	60bb      	str	r3, [r7, #8]
 80003e4:	68bb      	ldr	r3, [r7, #8]
	uint32_t* GPIOB_MODER = (uint32_t*) (GPIOB_BASE_ADDR + 0x00);
 80003e6:	4b33      	ldr	r3, [pc, #204]	@ (80004b4 <USART_Init+0xf0>)
 80003e8:	61fb      	str	r3, [r7, #28]
	uint32_t* GPIOB_AFRL = (uint32_t*) (GPIOB_BASE_ADDR + 0x20);
 80003ea:	4b33      	ldr	r3, [pc, #204]	@ (80004b8 <USART_Init+0xf4>)
 80003ec:	61bb      	str	r3, [r7, #24]
	*GPIOB_MODER &= ~(0b1111 << 12); // clear bit pin PB6 and PB7
 80003ee:	69fb      	ldr	r3, [r7, #28]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 80003f6:	69fb      	ldr	r3, [r7, #28]
 80003f8:	601a      	str	r2, [r3, #0]
	*GPIOB_MODER |= (0b1010 << 12);  // set PB6 and PB7 in AF mode
 80003fa:	69fb      	ldr	r3, [r7, #28]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f443 4220 	orr.w	r2, r3, #40960	@ 0xa000
 8000402:	69fb      	ldr	r3, [r7, #28]
 8000404:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRL &= ~(0xff << 24);	// clear bit pin AFRL6 and AFRL7
 8000406:	69bb      	ldr	r3, [r7, #24]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800040e:	69bb      	ldr	r3, [r7, #24]
 8000410:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRL |= (0b0111 << 24) | (0b0111 << 28); // select AF7 for AFRL6 and AFRL7
 8000412:	69bb      	ldr	r3, [r7, #24]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f043 42ee 	orr.w	r2, r3, #1996488704	@ 0x77000000
 800041a:	69bb      	ldr	r3, [r7, #24]
 800041c:	601a      	str	r2, [r3, #0]

	__HAL_RCC_USART1_CLK_ENABLE();
 800041e:	2300      	movs	r3, #0
 8000420:	607b      	str	r3, [r7, #4]
 8000422:	4b23      	ldr	r3, [pc, #140]	@ (80004b0 <USART_Init+0xec>)
 8000424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000426:	4a22      	ldr	r2, [pc, #136]	@ (80004b0 <USART_Init+0xec>)
 8000428:	f043 0310 	orr.w	r3, r3, #16
 800042c:	6453      	str	r3, [r2, #68]	@ 0x44
 800042e:	4b20      	ldr	r3, [pc, #128]	@ (80004b0 <USART_Init+0xec>)
 8000430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000432:	f003 0310 	and.w	r3, r3, #16
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]
	uint32_t* USART1_CR1 = (uint32_t*) (USART1_BASE_ADDR + 0x0C);
 800043a:	4b20      	ldr	r3, [pc, #128]	@ (80004bc <USART_Init+0xf8>)
 800043c:	617b      	str	r3, [r7, #20]
	uint32_t* USART1_BRR = (uint32_t*) (USART1_BASE_ADDR + 0x08);
 800043e:	4b20      	ldr	r3, [pc, #128]	@ (80004c0 <USART_Init+0xfc>)
 8000440:	613b      	str	r3, [r7, #16]
	*USART1_CR1 |= (0b1 << 12); // set word length
 8000442:	697b      	ldr	r3, [r7, #20]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	601a      	str	r2, [r3, #0]
	*USART1_CR1 |= (0b1 << 10); // enable parity bit
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	601a      	str	r2, [r3, #0]
	*USART1_CR1 &= ~(0b1 << 9); // select Even parity
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	601a      	str	r2, [r3, #0]
	*USART1_CR1 |= (0b11 << 2); // enable transmitter & receiver
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f043 020c 	orr.w	r2, r3, #12
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	601a      	str	r2, [r3, #0]
	*USART1_CR1 |= (0b1 << 13); // enable USART1
 8000472:	697b      	ldr	r3, [r7, #20]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	601a      	str	r2, [r3, #0]
	*USART1_BRR = (104 << 4) | (3 << 0); // set baud rate at 9600bps
 800047e:	693b      	ldr	r3, [r7, #16]
 8000480:	f240 6283 	movw	r2, #1667	@ 0x683
 8000484:	601a      	str	r2, [r3, #0]
	*USART1_CR1 |= (0b1 << 5); // generate interrupt
 8000486:	697b      	ldr	r3, [r7, #20]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f043 0220 	orr.w	r2, r3, #32
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	601a      	str	r2, [r3, #0]

	uint32_t* NVIC_ISER1 = (uint32_t*) 0xE000E104;
 8000492:	4b0c      	ldr	r3, [pc, #48]	@ (80004c4 <USART_Init+0x100>)
 8000494:	60fb      	str	r3, [r7, #12]
	*NVIC_ISER1 |= (0b1 << 5);
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f043 0220 	orr.w	r2, r3, #32
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	601a      	str	r2, [r3, #0]
}
 80004a2:	bf00      	nop
 80004a4:	3724      	adds	r7, #36	@ 0x24
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40023800 	.word	0x40023800
 80004b4:	40020400 	.word	0x40020400
 80004b8:	40020420 	.word	0x40020420
 80004bc:	4001100c 	.word	0x4001100c
 80004c0:	40011008 	.word	0x40011008
 80004c4:	e000e104 	.word	0xe000e104

080004c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ce:	2300      	movs	r3, #0
 80004d0:	607b      	str	r3, [r7, #4]
 80004d2:	4b10      	ldr	r3, [pc, #64]	@ (8000514 <HAL_MspInit+0x4c>)
 80004d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000514 <HAL_MspInit+0x4c>)
 80004d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80004de:	4b0d      	ldr	r3, [pc, #52]	@ (8000514 <HAL_MspInit+0x4c>)
 80004e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	603b      	str	r3, [r7, #0]
 80004ee:	4b09      	ldr	r3, [pc, #36]	@ (8000514 <HAL_MspInit+0x4c>)
 80004f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004f2:	4a08      	ldr	r2, [pc, #32]	@ (8000514 <HAL_MspInit+0x4c>)
 80004f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80004fa:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <HAL_MspInit+0x4c>)
 80004fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	40023800 	.word	0x40023800

08000518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800051c:	bf00      	nop
 800051e:	e7fd      	b.n	800051c <NMI_Handler+0x4>

08000520 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000524:	bf00      	nop
 8000526:	e7fd      	b.n	8000524 <HardFault_Handler+0x4>

08000528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800052c:	bf00      	nop
 800052e:	e7fd      	b.n	800052c <MemManage_Handler+0x4>

08000530 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <BusFault_Handler+0x4>

08000538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <UsageFault_Handler+0x4>

08000540 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800056e:	f000 f891 	bl	8000694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800057c:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <SystemInit+0x20>)
 800057e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000582:	4a05      	ldr	r2, [pc, #20]	@ (8000598 <SystemInit+0x20>)
 8000584:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000588:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 800059c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005a0:	f7ff ffea 	bl	8000578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005a4:	480c      	ldr	r0, [pc, #48]	@ (80005d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005a6:	490d      	ldr	r1, [pc, #52]	@ (80005dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005a8:	4a0d      	ldr	r2, [pc, #52]	@ (80005e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ac:	e002      	b.n	80005b4 <LoopCopyDataInit>

080005ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b2:	3304      	adds	r3, #4

080005b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b8:	d3f9      	bcc.n	80005ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ba:	4a0a      	ldr	r2, [pc, #40]	@ (80005e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005bc:	4c0a      	ldr	r4, [pc, #40]	@ (80005e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c0:	e001      	b.n	80005c6 <LoopFillZerobss>

080005c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c4:	3204      	adds	r2, #4

080005c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c8:	d3fb      	bcc.n	80005c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ca:	f000 f97b 	bl	80008c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005ce:	f7ff fe03 	bl	80001d8 <main>
  bx  lr    
 80005d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005e0:	08000944 	.word	0x08000944
  ldr r2, =_sbss
 80005e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005e8:	20000044 	.word	0x20000044

080005ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC_IRQHandler>
	...

080005f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000630 <HAL_Init+0x40>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000630 <HAL_Init+0x40>)
 80005fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000600:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <HAL_Init+0x40>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a0a      	ldr	r2, [pc, #40]	@ (8000630 <HAL_Init+0x40>)
 8000606:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800060a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800060c:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <HAL_Init+0x40>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a07      	ldr	r2, [pc, #28]	@ (8000630 <HAL_Init+0x40>)
 8000612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000616:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000618:	2003      	movs	r0, #3
 800061a:	f000 f901 	bl	8000820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800061e:	200f      	movs	r0, #15
 8000620:	f000 f808 	bl	8000634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000624:	f7ff ff50 	bl	80004c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023c00 	.word	0x40023c00

08000634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800063c:	4b12      	ldr	r3, [pc, #72]	@ (8000688 <HAL_InitTick+0x54>)
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	4b12      	ldr	r3, [pc, #72]	@ (800068c <HAL_InitTick+0x58>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	4619      	mov	r1, r3
 8000646:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800064a:	fbb3 f3f1 	udiv	r3, r3, r1
 800064e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f90b 	bl	800086e <HAL_SYSTICK_Config>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
 8000660:	e00e      	b.n	8000680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b0f      	cmp	r3, #15
 8000666:	d80a      	bhi.n	800067e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000668:	2200      	movs	r2, #0
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	f04f 30ff 	mov.w	r0, #4294967295
 8000670:	f000 f8e1 	bl	8000836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000674:	4a06      	ldr	r2, [pc, #24]	@ (8000690 <HAL_InitTick+0x5c>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800067a:	2300      	movs	r3, #0
 800067c:	e000      	b.n	8000680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
}
 8000680:	4618      	mov	r0, r3
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000000 	.word	0x20000000
 800068c:	20000008 	.word	0x20000008
 8000690:	20000004 	.word	0x20000004

08000694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <HAL_IncTick+0x20>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <HAL_IncTick+0x24>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4413      	add	r3, r2
 80006a4:	4a04      	ldr	r2, [pc, #16]	@ (80006b8 <HAL_IncTick+0x24>)
 80006a6:	6013      	str	r3, [r2, #0]
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	20000008 	.word	0x20000008
 80006b8:	20000040 	.word	0x20000040

080006bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f003 0307 	and.w	r3, r3, #7
 80006ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <__NVIC_SetPriorityGrouping+0x44>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006d8:	4013      	ands	r3, r2
 80006da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ee:	4a04      	ldr	r2, [pc, #16]	@ (8000700 <__NVIC_SetPriorityGrouping+0x44>)
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	60d3      	str	r3, [r2, #12]
}
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000708:	4b04      	ldr	r3, [pc, #16]	@ (800071c <__NVIC_GetPriorityGrouping+0x18>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	0a1b      	lsrs	r3, r3, #8
 800070e:	f003 0307 	and.w	r3, r3, #7
}
 8000712:	4618      	mov	r0, r3
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	6039      	str	r1, [r7, #0]
 800072a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800072c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000730:	2b00      	cmp	r3, #0
 8000732:	db0a      	blt.n	800074a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	b2da      	uxtb	r2, r3
 8000738:	490c      	ldr	r1, [pc, #48]	@ (800076c <__NVIC_SetPriority+0x4c>)
 800073a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073e:	0112      	lsls	r2, r2, #4
 8000740:	b2d2      	uxtb	r2, r2
 8000742:	440b      	add	r3, r1
 8000744:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000748:	e00a      	b.n	8000760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4908      	ldr	r1, [pc, #32]	@ (8000770 <__NVIC_SetPriority+0x50>)
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	f003 030f 	and.w	r3, r3, #15
 8000756:	3b04      	subs	r3, #4
 8000758:	0112      	lsls	r2, r2, #4
 800075a:	b2d2      	uxtb	r2, r2
 800075c:	440b      	add	r3, r1
 800075e:	761a      	strb	r2, [r3, #24]
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000e100 	.word	0xe000e100
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000774:	b480      	push	{r7}
 8000776:	b089      	sub	sp, #36	@ 0x24
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f003 0307 	and.w	r3, r3, #7
 8000786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	f1c3 0307 	rsb	r3, r3, #7
 800078e:	2b04      	cmp	r3, #4
 8000790:	bf28      	it	cs
 8000792:	2304      	movcs	r3, #4
 8000794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	3304      	adds	r3, #4
 800079a:	2b06      	cmp	r3, #6
 800079c:	d902      	bls.n	80007a4 <NVIC_EncodePriority+0x30>
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3b03      	subs	r3, #3
 80007a2:	e000      	b.n	80007a6 <NVIC_EncodePriority+0x32>
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a8:	f04f 32ff 	mov.w	r2, #4294967295
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	fa02 f303 	lsl.w	r3, r2, r3
 80007b2:	43da      	mvns	r2, r3
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	401a      	ands	r2, r3
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007bc:	f04f 31ff 	mov.w	r1, #4294967295
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	fa01 f303 	lsl.w	r3, r1, r3
 80007c6:	43d9      	mvns	r1, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007cc:	4313      	orrs	r3, r2
         );
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3724      	adds	r7, #36	@ 0x24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
	...

080007dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007ec:	d301      	bcc.n	80007f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ee:	2301      	movs	r3, #1
 80007f0:	e00f      	b.n	8000812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007f2:	4a0a      	ldr	r2, [pc, #40]	@ (800081c <SysTick_Config+0x40>)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	3b01      	subs	r3, #1
 80007f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007fa:	210f      	movs	r1, #15
 80007fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000800:	f7ff ff8e 	bl	8000720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000804:	4b05      	ldr	r3, [pc, #20]	@ (800081c <SysTick_Config+0x40>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800080a:	4b04      	ldr	r3, [pc, #16]	@ (800081c <SysTick_Config+0x40>)
 800080c:	2207      	movs	r2, #7
 800080e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	e000e010 	.word	0xe000e010

08000820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f7ff ff47 	bl	80006bc <__NVIC_SetPriorityGrouping>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000836:	b580      	push	{r7, lr}
 8000838:	b086      	sub	sp, #24
 800083a:	af00      	add	r7, sp, #0
 800083c:	4603      	mov	r3, r0
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	607a      	str	r2, [r7, #4]
 8000842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000848:	f7ff ff5c 	bl	8000704 <__NVIC_GetPriorityGrouping>
 800084c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	68b9      	ldr	r1, [r7, #8]
 8000852:	6978      	ldr	r0, [r7, #20]
 8000854:	f7ff ff8e 	bl	8000774 <NVIC_EncodePriority>
 8000858:	4602      	mov	r2, r0
 800085a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800085e:	4611      	mov	r1, r2
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff5d 	bl	8000720 <__NVIC_SetPriority>
}
 8000866:	bf00      	nop
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f7ff ffb0 	bl	80007dc <SysTick_Config>
 800087c:	4603      	mov	r3, r0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <memset>:
 8000886:	4402      	add	r2, r0
 8000888:	4603      	mov	r3, r0
 800088a:	4293      	cmp	r3, r2
 800088c:	d100      	bne.n	8000890 <memset+0xa>
 800088e:	4770      	bx	lr
 8000890:	f803 1b01 	strb.w	r1, [r3], #1
 8000894:	e7f9      	b.n	800088a <memset+0x4>

08000896 <strstr>:
 8000896:	780a      	ldrb	r2, [r1, #0]
 8000898:	b570      	push	{r4, r5, r6, lr}
 800089a:	b96a      	cbnz	r2, 80008b8 <strstr+0x22>
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	429a      	cmp	r2, r3
 80008a0:	d109      	bne.n	80008b6 <strstr+0x20>
 80008a2:	460c      	mov	r4, r1
 80008a4:	4605      	mov	r5, r0
 80008a6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d0f6      	beq.n	800089c <strstr+0x6>
 80008ae:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80008b2:	429e      	cmp	r6, r3
 80008b4:	d0f7      	beq.n	80008a6 <strstr+0x10>
 80008b6:	3001      	adds	r0, #1
 80008b8:	7803      	ldrb	r3, [r0, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d1ef      	bne.n	800089e <strstr+0x8>
 80008be:	4618      	mov	r0, r3
 80008c0:	e7ec      	b.n	800089c <strstr+0x6>
	...

080008c4 <__libc_init_array>:
 80008c4:	b570      	push	{r4, r5, r6, lr}
 80008c6:	4d0d      	ldr	r5, [pc, #52]	@ (80008fc <__libc_init_array+0x38>)
 80008c8:	4c0d      	ldr	r4, [pc, #52]	@ (8000900 <__libc_init_array+0x3c>)
 80008ca:	1b64      	subs	r4, r4, r5
 80008cc:	10a4      	asrs	r4, r4, #2
 80008ce:	2600      	movs	r6, #0
 80008d0:	42a6      	cmp	r6, r4
 80008d2:	d109      	bne.n	80008e8 <__libc_init_array+0x24>
 80008d4:	4d0b      	ldr	r5, [pc, #44]	@ (8000904 <__libc_init_array+0x40>)
 80008d6:	4c0c      	ldr	r4, [pc, #48]	@ (8000908 <__libc_init_array+0x44>)
 80008d8:	f000 f818 	bl	800090c <_init>
 80008dc:	1b64      	subs	r4, r4, r5
 80008de:	10a4      	asrs	r4, r4, #2
 80008e0:	2600      	movs	r6, #0
 80008e2:	42a6      	cmp	r6, r4
 80008e4:	d105      	bne.n	80008f2 <__libc_init_array+0x2e>
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80008ec:	4798      	blx	r3
 80008ee:	3601      	adds	r6, #1
 80008f0:	e7ee      	b.n	80008d0 <__libc_init_array+0xc>
 80008f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80008f6:	4798      	blx	r3
 80008f8:	3601      	adds	r6, #1
 80008fa:	e7f2      	b.n	80008e2 <__libc_init_array+0x1e>
 80008fc:	0800093c 	.word	0x0800093c
 8000900:	0800093c 	.word	0x0800093c
 8000904:	0800093c 	.word	0x0800093c
 8000908:	08000940 	.word	0x08000940

0800090c <_init>:
 800090c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800090e:	bf00      	nop
 8000910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000912:	bc08      	pop	{r3}
 8000914:	469e      	mov	lr, r3
 8000916:	4770      	bx	lr

08000918 <_fini>:
 8000918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800091a:	bf00      	nop
 800091c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800091e:	bc08      	pop	{r3}
 8000920:	469e      	mov	lr, r3
 8000922:	4770      	bx	lr
