
prj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000384  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800051c  0800051c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800051c  0800051c  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800051c  0800051c  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800051c  0800051c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800051c  0800051c  0000151c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000520  08000520  00001520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000524  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000528  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000528  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012fc  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000052c  00000000  00000000  00003330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00003860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000151  00000000  00000000  00003a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013cbf  00000000  00000000  00003b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002138  00000000  00000000  00017850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ec99  00000000  00000000  00019988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00098621  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005c8  00000000  00000000  00098664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00098c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000504 	.word	0x08000504

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000504 	.word	0x08000504

080001d8 <main>:
void LED_Init();
void TIM1_Init();
void delay_second(uint32_t time);

int main()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	LED_Init();
 80001dc:	f000 f8a4 	bl	8000328 <LED_Init>
	TIM1_Init();
 80001e0:	f000 f86e 	bl	80002c0 <TIM1_Init>
	while (1)
	{
		LED_Ctrl(1);
 80001e4:	2001      	movs	r0, #1
 80001e6:	f000 f8c9 	bl	800037c <LED_Ctrl>
		delay_second(4);
 80001ea:	2004      	movs	r0, #4
 80001ec:	f000 f808 	bl	8000200 <delay_second>
		LED_Ctrl(0);
 80001f0:	2000      	movs	r0, #0
 80001f2:	f000 f8c3 	bl	800037c <LED_Ctrl>
		delay_second(8);
 80001f6:	2008      	movs	r0, #8
 80001f8:	f000 f802 	bl	8000200 <delay_second>
		LED_Ctrl(1);
 80001fc:	bf00      	nop
 80001fe:	e7f1      	b.n	80001e4 <main+0xc>

08000200 <delay_second>:
	return 0;
}

/* min: 1s -> max: 131s */
void delay_second(uint32_t time)
{
 8000200:	b480      	push	{r7}
 8000202:	b089      	sub	sp, #36	@ 0x24
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	uint16_t* TIM1_SR = (uint16_t*) (TIM1_BASE_ADDR + 0x10);
 8000208:	4b28      	ldr	r3, [pc, #160]	@ (80002ac <delay_second+0xac>)
 800020a:	61fb      	str	r3, [r7, #28]
	uint16_t* TIM1_CNT = (uint16_t*) (TIM1_BASE_ADDR + 0x24);
 800020c:	4b28      	ldr	r3, [pc, #160]	@ (80002b0 <delay_second+0xb0>)
 800020e:	61bb      	str	r3, [r7, #24]
	uint16_t* TIM1_EGR = (uint16_t*) (TIM1_BASE_ADDR + 0x14);
 8000210:	4b28      	ldr	r3, [pc, #160]	@ (80002b4 <delay_second+0xb4>)
 8000212:	617b      	str	r3, [r7, #20]
	uint16_t* TIM1_ARR = (uint16_t*) (TIM1_BASE_ADDR + 0x2C);
 8000214:	4b28      	ldr	r3, [pc, #160]	@ (80002b8 <delay_second+0xb8>)
 8000216:	613b      	str	r3, [r7, #16]
	uint16_t* TIM1_PSC = (uint16_t*) (TIM1_BASE_ADDR + 0x28);
 8000218:	4b28      	ldr	r3, [pc, #160]	@ (80002bc <delay_second+0xbc>)
 800021a:	60fb      	str	r3, [r7, #12]
	if (time <= 65)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2b41      	cmp	r3, #65	@ 0x41
 8000220:	d80f      	bhi.n	8000242 <delay_second+0x42>
	{
		*TIM1_ARR = time * 1000;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	b29b      	uxth	r3, r3
 8000226:	461a      	mov	r2, r3
 8000228:	0152      	lsls	r2, r2, #5
 800022a:	1ad2      	subs	r2, r2, r3
 800022c:	0092      	lsls	r2, r2, #2
 800022e:	4413      	add	r3, r2
 8000230:	00db      	lsls	r3, r3, #3
 8000232:	b29a      	uxth	r2, r3
 8000234:	693b      	ldr	r3, [r7, #16]
 8000236:	801a      	strh	r2, [r3, #0]
		*TIM1_PSC = 16000 - 1;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800023e:	801a      	strh	r2, [r3, #0]
 8000240:	e012      	b.n	8000268 <delay_second+0x68>
	}
	else if (time > 65)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2b41      	cmp	r3, #65	@ 0x41
 8000246:	d90f      	bls.n	8000268 <delay_second+0x68>
	{
		*TIM1_ARR = (time / 2) * 1000;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	085b      	lsrs	r3, r3, #1
 800024c:	b29b      	uxth	r3, r3
 800024e:	461a      	mov	r2, r3
 8000250:	0152      	lsls	r2, r2, #5
 8000252:	1ad2      	subs	r2, r2, r3
 8000254:	0092      	lsls	r2, r2, #2
 8000256:	4413      	add	r3, r2
 8000258:	00db      	lsls	r3, r3, #3
 800025a:	b29a      	uxth	r2, r3
 800025c:	693b      	ldr	r3, [r7, #16]
 800025e:	801a      	strh	r2, [r3, #0]
		*TIM1_PSC = 32000 - 1;
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8000266:	801a      	strh	r2, [r3, #0]
	}
	*TIM1_EGR |= 1 << 0;
 8000268:	697b      	ldr	r3, [r7, #20]
 800026a:	881b      	ldrh	r3, [r3, #0]
 800026c:	f043 0301 	orr.w	r3, r3, #1
 8000270:	b29a      	uxth	r2, r3
 8000272:	697b      	ldr	r3, [r7, #20]
 8000274:	801a      	strh	r2, [r3, #0]
	*TIM1_SR &= ~(1 << 0);
 8000276:	69fb      	ldr	r3, [r7, #28]
 8000278:	881b      	ldrh	r3, [r3, #0]
 800027a:	f023 0301 	bic.w	r3, r3, #1
 800027e:	b29a      	uxth	r2, r3
 8000280:	69fb      	ldr	r3, [r7, #28]
 8000282:	801a      	strh	r2, [r3, #0]
	while ((*TIM1_SR & 1) == 0);
 8000284:	bf00      	nop
 8000286:	69fb      	ldr	r3, [r7, #28]
 8000288:	881b      	ldrh	r3, [r3, #0]
 800028a:	f003 0301 	and.w	r3, r3, #1
 800028e:	2b00      	cmp	r3, #0
 8000290:	d0f9      	beq.n	8000286 <delay_second+0x86>
	*TIM1_SR &= ~(1 << 0);
 8000292:	69fb      	ldr	r3, [r7, #28]
 8000294:	881b      	ldrh	r3, [r3, #0]
 8000296:	f023 0301 	bic.w	r3, r3, #1
 800029a:	b29a      	uxth	r2, r3
 800029c:	69fb      	ldr	r3, [r7, #28]
 800029e:	801a      	strh	r2, [r3, #0]
}
 80002a0:	bf00      	nop
 80002a2:	3724      	adds	r7, #36	@ 0x24
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	40010010 	.word	0x40010010
 80002b0:	40010024 	.word	0x40010024
 80002b4:	40010014 	.word	0x40010014
 80002b8:	4001002c 	.word	0x4001002c
 80002bc:	40010028 	.word	0x40010028

080002c0 <TIM1_Init>:

void TIM1_Init()
{
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM1_CLK_ENABLE();
 80002c6:	2300      	movs	r3, #0
 80002c8:	603b      	str	r3, [r7, #0]
 80002ca:	4b13      	ldr	r3, [pc, #76]	@ (8000318 <TIM1_Init+0x58>)
 80002cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002ce:	4a12      	ldr	r2, [pc, #72]	@ (8000318 <TIM1_Init+0x58>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80002d6:	4b10      	ldr	r3, [pc, #64]	@ (8000318 <TIM1_Init+0x58>)
 80002d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002da:	f003 0301 	and.w	r3, r3, #1
 80002de:	603b      	str	r3, [r7, #0]
 80002e0:	683b      	ldr	r3, [r7, #0]
	uint16_t* TIM1_CR1 = (uint16_t*) (TIM1_BASE_ADDR + 0x00);
 80002e2:	4b0e      	ldr	r3, [pc, #56]	@ (800031c <TIM1_Init+0x5c>)
 80002e4:	60fb      	str	r3, [r7, #12]
	uint16_t* TIM1_PSC = (uint16_t*) (TIM1_BASE_ADDR + 0x28);
 80002e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000320 <TIM1_Init+0x60>)
 80002e8:	60bb      	str	r3, [r7, #8]
	uint16_t* TIM1_ARR = (uint16_t*) (TIM1_BASE_ADDR + 0x2C);
 80002ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <TIM1_Init+0x64>)
 80002ec:	607b      	str	r3, [r7, #4]
	/* set ARR */
	*TIM1_ARR = 1000;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80002f4:	801a      	strh	r2, [r3, #0]
	/* set prescaler ~ 1 tick = 1ms */
	*TIM1_PSC = 15999;
 80002f6:	68bb      	ldr	r3, [r7, #8]
 80002f8:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80002fc:	801a      	strh	r2, [r3, #0]
	/* counter enable */
	*TIM1_CR1 |= 1 << 0;
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	881b      	ldrh	r3, [r3, #0]
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	b29a      	uxth	r2, r3
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	801a      	strh	r2, [r3, #0]
}
 800030c:	bf00      	nop
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	40023800 	.word	0x40023800
 800031c:	40010000 	.word	0x40010000
 8000320:	40010028 	.word	0x40010028
 8000324:	4001002c 	.word	0x4001002c

08000328 <LED_Init>:

void LED_Init()
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800032e:	2300      	movs	r3, #0
 8000330:	603b      	str	r3, [r7, #0]
 8000332:	4b10      	ldr	r3, [pc, #64]	@ (8000374 <LED_Init+0x4c>)
 8000334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000336:	4a0f      	ldr	r2, [pc, #60]	@ (8000374 <LED_Init+0x4c>)
 8000338:	f043 0308 	orr.w	r3, r3, #8
 800033c:	6313      	str	r3, [r2, #48]	@ 0x30
 800033e:	4b0d      	ldr	r3, [pc, #52]	@ (8000374 <LED_Init+0x4c>)
 8000340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000342:	f003 0308 	and.w	r3, r3, #8
 8000346:	603b      	str	r3, [r7, #0]
 8000348:	683b      	ldr	r3, [r7, #0]
	uint32_t* GPIOD_MODER = (uint32_t*) (GPIOD_BASE + 0x00);
 800034a:	4b0b      	ldr	r3, [pc, #44]	@ (8000378 <LED_Init+0x50>)
 800034c:	607b      	str	r3, [r7, #4]
	*GPIOD_MODER &= ~(0b11 << (15 * 2));
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |= (0b01 << (15 * 2));
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	601a      	str	r2, [r3, #0]
}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	40023800 	.word	0x40023800
 8000378:	40020c00 	.word	0x40020c00

0800037c <LED_Ctrl>:

void LED_Ctrl(char on)
{
 800037c:	b480      	push	{r7}
 800037e:	b085      	sub	sp, #20
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	71fb      	strb	r3, [r7, #7]
	uint32_t* GPIOD_ODR = (uint32_t*) (GPIOD_BASE + 0x14);
 8000386:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <LED_Ctrl+0x3c>)
 8000388:	60fb      	str	r3, [r7, #12]
	if (on)
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d006      	beq.n	800039e <LED_Ctrl+0x22>
	{
		*GPIOD_ODR |= 1 << 15;
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		*GPIOD_ODR &= ~(1 << 15);
	}
}
 800039c:	e005      	b.n	80003aa <LED_Ctrl+0x2e>
		*GPIOD_ODR &= ~(1 << 15);
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	601a      	str	r2, [r3, #0]
}
 80003aa:	bf00      	nop
 80003ac:	3714      	adds	r7, #20
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	40020c14 	.word	0x40020c14

080003bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003c0:	bf00      	nop
 80003c2:	e7fd      	b.n	80003c0 <NMI_Handler+0x4>

080003c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003c8:	bf00      	nop
 80003ca:	e7fd      	b.n	80003c8 <HardFault_Handler+0x4>

080003cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003d0:	bf00      	nop
 80003d2:	e7fd      	b.n	80003d0 <MemManage_Handler+0x4>

080003d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003d8:	bf00      	nop
 80003da:	e7fd      	b.n	80003d8 <BusFault_Handler+0x4>

080003dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003e0:	bf00      	nop
 80003e2:	e7fd      	b.n	80003e0 <UsageFault_Handler+0x4>

080003e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr

080003f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003f6:	bf00      	nop
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr

08000400 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr

0800040e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000412:	f000 f83f 	bl	8000494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000420:	4b06      	ldr	r3, [pc, #24]	@ (800043c <SystemInit+0x20>)
 8000422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000426:	4a05      	ldr	r2, [pc, #20]	@ (800043c <SystemInit+0x20>)
 8000428:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800042c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	e000ed00 	.word	0xe000ed00

08000440 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8000440:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000478 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000444:	f7ff ffea 	bl	800041c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000448:	480c      	ldr	r0, [pc, #48]	@ (800047c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800044a:	490d      	ldr	r1, [pc, #52]	@ (8000480 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800044c:	4a0d      	ldr	r2, [pc, #52]	@ (8000484 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800044e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000450:	e002      	b.n	8000458 <LoopCopyDataInit>

08000452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000456:	3304      	adds	r3, #4

08000458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800045a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800045c:	d3f9      	bcc.n	8000452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800045e:	4a0a      	ldr	r2, [pc, #40]	@ (8000488 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000460:	4c0a      	ldr	r4, [pc, #40]	@ (800048c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000464:	e001      	b.n	800046a <LoopFillZerobss>

08000466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000468:	3204      	adds	r2, #4

0800046a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800046a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800046c:	d3fb      	bcc.n	8000466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800046e:	f000 f825 	bl	80004bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000472:	f7ff feb1 	bl	80001d8 <main>
  bx  lr    
 8000476:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000478:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800047c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000480:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000484:	08000524 	.word	0x08000524
  ldr r2, =_sbss
 8000488:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800048c:	20000024 	.word	0x20000024

08000490 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
   b  Infinite_Loop
 8000490:	e7fe      	b.n	8000490 <ADC_IRQHandler>
	...

08000494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000498:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <HAL_IncTick+0x20>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	461a      	mov	r2, r3
 800049e:	4b06      	ldr	r3, [pc, #24]	@ (80004b8 <HAL_IncTick+0x24>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4413      	add	r3, r2
 80004a4:	4a04      	ldr	r2, [pc, #16]	@ (80004b8 <HAL_IncTick+0x24>)
 80004a6:	6013      	str	r3, [r2, #0]
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	20000000 	.word	0x20000000
 80004b8:	20000020 	.word	0x20000020

080004bc <__libc_init_array>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	4d0d      	ldr	r5, [pc, #52]	@ (80004f4 <__libc_init_array+0x38>)
 80004c0:	4c0d      	ldr	r4, [pc, #52]	@ (80004f8 <__libc_init_array+0x3c>)
 80004c2:	1b64      	subs	r4, r4, r5
 80004c4:	10a4      	asrs	r4, r4, #2
 80004c6:	2600      	movs	r6, #0
 80004c8:	42a6      	cmp	r6, r4
 80004ca:	d109      	bne.n	80004e0 <__libc_init_array+0x24>
 80004cc:	4d0b      	ldr	r5, [pc, #44]	@ (80004fc <__libc_init_array+0x40>)
 80004ce:	4c0c      	ldr	r4, [pc, #48]	@ (8000500 <__libc_init_array+0x44>)
 80004d0:	f000 f818 	bl	8000504 <_init>
 80004d4:	1b64      	subs	r4, r4, r5
 80004d6:	10a4      	asrs	r4, r4, #2
 80004d8:	2600      	movs	r6, #0
 80004da:	42a6      	cmp	r6, r4
 80004dc:	d105      	bne.n	80004ea <__libc_init_array+0x2e>
 80004de:	bd70      	pop	{r4, r5, r6, pc}
 80004e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e4:	4798      	blx	r3
 80004e6:	3601      	adds	r6, #1
 80004e8:	e7ee      	b.n	80004c8 <__libc_init_array+0xc>
 80004ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ee:	4798      	blx	r3
 80004f0:	3601      	adds	r6, #1
 80004f2:	e7f2      	b.n	80004da <__libc_init_array+0x1e>
 80004f4:	0800051c 	.word	0x0800051c
 80004f8:	0800051c 	.word	0x0800051c
 80004fc:	0800051c 	.word	0x0800051c
 8000500:	08000520 	.word	0x08000520

08000504 <_init>:
 8000504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000506:	bf00      	nop
 8000508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050a:	bc08      	pop	{r3}
 800050c:	469e      	mov	lr, r3
 800050e:	4770      	bx	lr

08000510 <_fini>:
 8000510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000512:	bf00      	nop
 8000514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000516:	bc08      	pop	{r3}
 8000518:	469e      	mov	lr, r3
 800051a:	4770      	bx	lr
