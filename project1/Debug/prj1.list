
prj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f9c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800613c  0800613c  0000713c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006298  08006298  00008074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006298  08006298  00007298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062a0  080062a0  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062a0  080062a0  000072a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080062a4  080062a4  000072a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080062a8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b14  20000074  0800631c  00008074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b88  0800631c  00008b88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011272  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002975  00000000  00000000  00019316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  0001bc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b04  00000000  00000000  0001caf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000035fa  00000000  00000000  0001d5f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001054e  00000000  00000000  00020bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090458  00000000  00000000  0003113c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1594  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004008  00000000  00000000  000c15d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000c55e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006124 	.word	0x08006124

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006124 	.word	0x08006124

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <my_print_log>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char* state[] = { "Inactive", "Ready", "Running", "Blocked", "Terminated" };

void my_print_log(const char* str, ...)
{
 80005bc:	b40f      	push	{r0, r1, r2, r3}
 80005be:	b580      	push	{r7, lr}
 80005c0:	b09c      	sub	sp, #112	@ 0x70
 80005c2:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, str);
 80005c4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80005c8:	667b      	str	r3, [r7, #100]	@ 0x64
	char buf[100] = {0};
 80005ca:	463b      	mov	r3, r7
 80005cc:	2264      	movs	r2, #100	@ 0x64
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f005 f929 	bl	8005828 <memset>
	vsprintf(buf, str, args);
 80005d6:	463b      	mov	r3, r7
 80005d8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80005da:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80005dc:	4618      	mov	r0, r3
 80005de:	f005 f919 	bl	8005814 <vsiprintf>
	int str_len = strlen(buf);
 80005e2:	463b      	mov	r3, r7
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fdfb 	bl	80001e0 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	66bb      	str	r3, [r7, #104]	@ 0x68
	for (int i = 0; i < str_len; i++)
 80005ee:	2300      	movs	r3, #0
 80005f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80005f2:	e00e      	b.n	8000612 <my_print_log+0x56>
	{
		HAL_UART_Transmit(&huart1, (uint8_t*) &buf[i], 1, HAL_MAX_DELAY);
 80005f4:	463a      	mov	r2, r7
 80005f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80005f8:	18d1      	adds	r1, r2, r3
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	2201      	movs	r2, #1
 8000600:	480a      	ldr	r0, [pc, #40]	@ (800062c <my_print_log+0x70>)
 8000602:	f001 fa31 	bl	8001a68 <HAL_UART_Transmit>
		osDelay(100);
 8000606:	2064      	movs	r0, #100	@ 0x64
 8000608:	f001 ff36 	bl	8002478 <osDelay>
	for (int i = 0; i < str_len; i++)
 800060c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800060e:	3301      	adds	r3, #1
 8000610:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000612:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000614:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000616:	429a      	cmp	r2, r3
 8000618:	dbec      	blt.n	80005f4 <my_print_log+0x38>
	}
	va_end(args);
}
 800061a:	bf00      	nop
 800061c:	bf00      	nop
 800061e:	3770      	adds	r7, #112	@ 0x70
 8000620:	46bd      	mov	sp, r7
 8000622:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000626:	b004      	add	sp, #16
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000090 	.word	0x20000090

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000634:	f000 fa7a 	bl	8000b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000638:	f000 f83c 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 f8c2 	bl	80007c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000640:	f000 f896 	bl	8000770 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000644:	f001 fe00 	bl	8002248 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of uart_ */
  uart_Handle = osMutexNew(&uart__attributes);
 8000648:	4810      	ldr	r0, [pc, #64]	@ (800068c <main+0x5c>)
 800064a:	f001 ff30 	bl	80024ae <osMutexNew>
 800064e:	4603      	mov	r3, r0
 8000650:	4a0f      	ldr	r2, [pc, #60]	@ (8000690 <main+0x60>)
 8000652:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of data_queue_ */
  data_queue_Handle = osMessageQueueNew (128, sizeof(uint8_t), &data_queue__attributes);
 8000654:	4a0f      	ldr	r2, [pc, #60]	@ (8000694 <main+0x64>)
 8000656:	2101      	movs	r1, #1
 8000658:	2080      	movs	r0, #128	@ 0x80
 800065a:	f002 f836 	bl	80026ca <osMessageQueueNew>
 800065e:	4603      	mov	r3, r0
 8000660:	4a0d      	ldr	r2, [pc, #52]	@ (8000698 <main+0x68>)
 8000662:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task1 */
  task1Handle = osThreadNew(task1_blink_red_led, NULL, &task1_attributes);
 8000664:	4a0d      	ldr	r2, [pc, #52]	@ (800069c <main+0x6c>)
 8000666:	2100      	movs	r1, #0
 8000668:	480d      	ldr	r0, [pc, #52]	@ (80006a0 <main+0x70>)
 800066a:	f001 fe37 	bl	80022dc <osThreadNew>
 800066e:	4603      	mov	r3, r0
 8000670:	4a0c      	ldr	r2, [pc, #48]	@ (80006a4 <main+0x74>)
 8000672:	6013      	str	r3, [r2, #0]

  /* creation of task2 */
  task2Handle = osThreadNew(task2_blink_blue_led, NULL, &task2_attributes);
 8000674:	4a0c      	ldr	r2, [pc, #48]	@ (80006a8 <main+0x78>)
 8000676:	2100      	movs	r1, #0
 8000678:	480c      	ldr	r0, [pc, #48]	@ (80006ac <main+0x7c>)
 800067a:	f001 fe2f 	bl	80022dc <osThreadNew>
 800067e:	4603      	mov	r3, r0
 8000680:	4a0b      	ldr	r2, [pc, #44]	@ (80006b0 <main+0x80>)
 8000682:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000684:	f001 fe04 	bl	8002290 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <main+0x58>
 800068c:	0800623c 	.word	0x0800623c
 8000690:	200000e4 	.word	0x200000e4
 8000694:	08006224 	.word	0x08006224
 8000698:	200000e0 	.word	0x200000e0
 800069c:	080061dc 	.word	0x080061dc
 80006a0:	0800084d 	.word	0x0800084d
 80006a4:	200000d8 	.word	0x200000d8
 80006a8:	08006200 	.word	0x08006200
 80006ac:	08000889 	.word	0x08000889
 80006b0:	200000dc 	.word	0x200000dc

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	@ 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	@ 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f005 f8b0 	bl	8005828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b22      	ldr	r3, [pc, #136]	@ (8000768 <SystemClock_Config+0xb4>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	4a21      	ldr	r2, [pc, #132]	@ (8000768 <SystemClock_Config+0xb4>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <SystemClock_Config+0xb4>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b1c      	ldr	r3, [pc, #112]	@ (800076c <SystemClock_Config+0xb8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a1b      	ldr	r2, [pc, #108]	@ (800076c <SystemClock_Config+0xb8>)
 80006fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b19      	ldr	r3, [pc, #100]	@ (800076c <SystemClock_Config+0xb8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800071c:	2300      	movs	r3, #0
 800071e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fcf7 	bl	8001118 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000730:	f000 f8e8 	bl	8000904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f000 ff5a 	bl	8001608 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800075a:	f000 f8d3 	bl	8000904 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	@ 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000774:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_USART1_UART_Init+0x4c>)
 8000776:	4a12      	ldr	r2, [pc, #72]	@ (80007c0 <MX_USART1_UART_Init+0x50>)
 8000778:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800077a:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <MX_USART1_UART_Init+0x4c>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_USART1_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_USART1_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <MX_USART1_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_USART1_UART_Init+0x4c>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <MX_USART1_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_USART1_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_USART1_UART_Init+0x4c>)
 80007a8:	f001 f90e 	bl	80019c8 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007b2:	f000 f8a7 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000090 	.word	0x20000090
 80007c0:	40011000 	.word	0x40011000

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b19      	ldr	r3, [pc, #100]	@ (8000844 <MX_GPIO_Init+0x80>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a18      	ldr	r2, [pc, #96]	@ (8000844 <MX_GPIO_Init+0x80>)
 80007e4:	f043 0308 	orr.w	r3, r3, #8
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <MX_GPIO_Init+0x80>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0308 	and.w	r3, r3, #8
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <MX_GPIO_Init+0x80>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a11      	ldr	r2, [pc, #68]	@ (8000844 <MX_GPIO_Init+0x80>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_GPIO_Init+0x80>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000818:	480b      	ldr	r0, [pc, #44]	@ (8000848 <MX_GPIO_Init+0x84>)
 800081a:	f000 fc63 	bl	80010e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800081e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	4619      	mov	r1, r3
 8000836:	4804      	ldr	r0, [pc, #16]	@ (8000848 <MX_GPIO_Init+0x84>)
 8000838:	f000 fad0 	bl	8000ddc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800083c:	bf00      	nop
 800083e:	3720      	adds	r7, #32
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40020c00 	.word	0x40020c00

0800084c <task1_blink_red_led>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task1_blink_red_led */
void task1_blink_red_led(void *argument)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(uart_Handle, HAL_MAX_DELAY);
 8000854:	4b0a      	ldr	r3, [pc, #40]	@ (8000880 <task1_blink_red_led+0x34>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f04f 31ff 	mov.w	r1, #4294967295
 800085c:	4618      	mov	r0, r3
 800085e:	f001 feac 	bl	80025ba <osMutexAcquire>
	  my_print_log("Task 1 is Running\n");
 8000862:	4808      	ldr	r0, [pc, #32]	@ (8000884 <task1_blink_red_led+0x38>)
 8000864:	f7ff feaa 	bl	80005bc <my_print_log>
	  osMutexRelease(uart_Handle);
 8000868:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <task1_blink_red_led+0x34>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f001 feef 	bl	8002650 <osMutexRelease>
    osDelay(5000);
 8000872:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000876:	f001 fdff 	bl	8002478 <osDelay>
	  osMutexAcquire(uart_Handle, HAL_MAX_DELAY);
 800087a:	bf00      	nop
 800087c:	e7ea      	b.n	8000854 <task1_blink_red_led+0x8>
 800087e:	bf00      	nop
 8000880:	200000e4 	.word	0x200000e4
 8000884:	08006190 	.word	0x08006190

08000888 <task2_blink_blue_led>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task2_blink_blue_led */
void task2_blink_blue_led(void *argument)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task2_blink_blue_led */
  /* Infinite loop */
	osThreadState_t task1_state, task2_state;
  for(;;)
  {
	  task1_state = osThreadGetState(task1Handle);
 8000890:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <task2_blink_blue_led+0x64>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4618      	mov	r0, r3
 8000896:	f001 fdb3 	bl	8002400 <osThreadGetState>
 800089a:	60f8      	str	r0, [r7, #12]
	  task2_state = osThreadGetState(task2Handle);
 800089c:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <task2_blink_blue_led+0x68>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f001 fdad 	bl	8002400 <osThreadGetState>
 80008a6:	60b8      	str	r0, [r7, #8]
	  osMutexAcquire(uart_Handle, HAL_MAX_DELAY);
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <task2_blink_blue_led+0x6c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f04f 31ff 	mov.w	r1, #4294967295
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 fe82 	bl	80025ba <osMutexAcquire>
	  my_print_log("Task 1 is %s\n", state[task1_state]);
 80008b6:	4a10      	ldr	r2, [pc, #64]	@ (80008f8 <task2_blink_blue_led+0x70>)
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008be:	4619      	mov	r1, r3
 80008c0:	480e      	ldr	r0, [pc, #56]	@ (80008fc <task2_blink_blue_led+0x74>)
 80008c2:	f7ff fe7b 	bl	80005bc <my_print_log>
	  my_print_log("Task 2 is %s\n", state[task2_state]);
 80008c6:	4a0c      	ldr	r2, [pc, #48]	@ (80008f8 <task2_blink_blue_led+0x70>)
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ce:	4619      	mov	r1, r3
 80008d0:	480b      	ldr	r0, [pc, #44]	@ (8000900 <task2_blink_blue_led+0x78>)
 80008d2:	f7ff fe73 	bl	80005bc <my_print_log>
	  osMutexRelease(uart_Handle);
 80008d6:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <task2_blink_blue_led+0x6c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 feb8 	bl	8002650 <osMutexRelease>
    osDelay(1000);
 80008e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008e4:	f001 fdc8 	bl	8002478 <osDelay>
	  task1_state = osThreadGetState(task1Handle);
 80008e8:	bf00      	nop
 80008ea:	e7d1      	b.n	8000890 <task2_blink_blue_led+0x8>
 80008ec:	200000d8 	.word	0x200000d8
 80008f0:	200000dc 	.word	0x200000dc
 80008f4:	200000e4 	.word	0x200000e4
 80008f8:	20000000 	.word	0x20000000
 80008fc:	080061a4 	.word	0x080061a4
 8000900:	080061b4 	.word	0x080061b4

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <Error_Handler+0x8>

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <HAL_MspInit+0x54>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091e:	4a11      	ldr	r2, [pc, #68]	@ (8000964 <HAL_MspInit+0x54>)
 8000920:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000924:	6453      	str	r3, [r2, #68]	@ 0x44
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <HAL_MspInit+0x54>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	4b0b      	ldr	r3, [pc, #44]	@ (8000964 <HAL_MspInit+0x54>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093a:	4a0a      	ldr	r2, [pc, #40]	@ (8000964 <HAL_MspInit+0x54>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000940:	6413      	str	r3, [r2, #64]	@ 0x40
 8000942:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <HAL_MspInit+0x54>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	210f      	movs	r1, #15
 8000952:	f06f 0001 	mvn.w	r0, #1
 8000956:	f000 fa18 	bl	8000d8a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800

08000968 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	@ 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a19      	ldr	r2, [pc, #100]	@ (80009ec <HAL_UART_MspInit+0x84>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d12b      	bne.n	80009e2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <HAL_UART_MspInit+0x88>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000992:	4a17      	ldr	r2, [pc, #92]	@ (80009f0 <HAL_UART_MspInit+0x88>)
 8000994:	f043 0310 	orr.w	r3, r3, #16
 8000998:	6453      	str	r3, [r2, #68]	@ 0x44
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <HAL_UART_MspInit+0x88>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	f003 0310 	and.w	r3, r3, #16
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <HAL_UART_MspInit+0x88>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a10      	ldr	r2, [pc, #64]	@ (80009f0 <HAL_UART_MspInit+0x88>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <HAL_UART_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009c2:	23c0      	movs	r3, #192	@ 0xc0
 80009c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009d2:	2307      	movs	r3, #7
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <HAL_UART_MspInit+0x8c>)
 80009de:	f000 f9fd 	bl	8000ddc <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80009e2:	bf00      	nop
 80009e4:	3728      	adds	r7, #40	@ 0x28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40011000 	.word	0x40011000
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020400 	.word	0x40020400

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <NMI_Handler+0x4>

08000a00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <MemManage_Handler+0x4>

08000a10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a32:	f000 f8cd 	bl	8000bd0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a36:	f003 fd5b 	bl	80044f0 <xTaskGetSchedulerState>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d001      	beq.n	8000a44 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a40:	f004 fc52 	bl	80052e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a50:	4a14      	ldr	r2, [pc, #80]	@ (8000aa4 <_sbrk+0x5c>)
 8000a52:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <_sbrk+0x60>)
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a5c:	4b13      	ldr	r3, [pc, #76]	@ (8000aac <_sbrk+0x64>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d102      	bne.n	8000a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a64:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <_sbrk+0x64>)
 8000a66:	4a12      	ldr	r2, [pc, #72]	@ (8000ab0 <_sbrk+0x68>)
 8000a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6a:	4b10      	ldr	r3, [pc, #64]	@ (8000aac <_sbrk+0x64>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d207      	bcs.n	8000a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a78:	f004 fede 	bl	8005838 <__errno>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	220c      	movs	r2, #12
 8000a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	e009      	b.n	8000a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a88:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a8e:	4b07      	ldr	r3, [pc, #28]	@ (8000aac <_sbrk+0x64>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	4a05      	ldr	r2, [pc, #20]	@ (8000aac <_sbrk+0x64>)
 8000a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3718      	adds	r7, #24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20020000 	.word	0x20020000
 8000aa8:	00000400 	.word	0x00000400
 8000aac:	200000e8 	.word	0x200000e8
 8000ab0:	20004b88 	.word	0x20004b88

08000ab4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <SystemInit+0x20>)
 8000aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000abe:	4a05      	ldr	r2, [pc, #20]	@ (8000ad4 <SystemInit+0x20>)
 8000ac0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ac4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8000ad8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000adc:	f7ff ffea 	bl	8000ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ae0:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ae2:	490d      	ldr	r1, [pc, #52]	@ (8000b18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000af8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b06:	f004 fe9d 	bl	8005844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b0a:	f7ff fd91 	bl	8000630 <main>
  bx  lr    
 8000b0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b1c:	080062a8 	.word	0x080062a8
  ldr r2, =_sbss
 8000b20:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b24:	20004b88 	.word	0x20004b88

08000b28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
   b  Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC_IRQHandler>
	...

08000b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b30:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <HAL_Init+0x40>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0d      	ldr	r2, [pc, #52]	@ (8000b6c <HAL_Init+0x40>)
 8000b36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <HAL_Init+0x40>)
 8000b42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b48:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a07      	ldr	r2, [pc, #28]	@ (8000b6c <HAL_Init+0x40>)
 8000b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 f90d 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5a:	200f      	movs	r0, #15
 8000b5c:	f000 f808 	bl	8000b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b60:	f7ff fed6 	bl	8000910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023c00 	.word	0x40023c00

08000b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b78:	4b12      	ldr	r3, [pc, #72]	@ (8000bc4 <HAL_InitTick+0x54>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b12      	ldr	r3, [pc, #72]	@ (8000bc8 <HAL_InitTick+0x58>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 f917 	bl	8000dc2 <HAL_SYSTICK_Config>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e00e      	b.n	8000bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b0f      	cmp	r3, #15
 8000ba2:	d80a      	bhi.n	8000bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	f000 f8ed 	bl	8000d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb0:	4a06      	ldr	r2, [pc, #24]	@ (8000bcc <HAL_InitTick+0x5c>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e000      	b.n	8000bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000014 	.word	0x20000014
 8000bc8:	2000001c 	.word	0x2000001c
 8000bcc:	20000018 	.word	0x20000018

08000bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_IncTick+0x20>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <HAL_IncTick+0x24>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <HAL_IncTick+0x24>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	2000001c 	.word	0x2000001c
 8000bf4:	200000ec 	.word	0x200000ec

08000bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	@ (8000c0c <HAL_GetTick+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	200000ec 	.word	0x200000ec

08000c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c20:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	@ (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c5c:	4b04      	ldr	r3, [pc, #16]	@ (8000c70 <__NVIC_GetPriorityGrouping+0x18>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	f003 0307 	and.w	r3, r3, #7
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db0a      	blt.n	8000c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	490c      	ldr	r1, [pc, #48]	@ (8000cc0 <__NVIC_SetPriority+0x4c>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	0112      	lsls	r2, r2, #4
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c9c:	e00a      	b.n	8000cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4908      	ldr	r1, [pc, #32]	@ (8000cc4 <__NVIC_SetPriority+0x50>)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	3b04      	subs	r3, #4
 8000cac:	0112      	lsls	r2, r2, #4
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	761a      	strb	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	@ 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f1c3 0307 	rsb	r3, r3, #7
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	bf28      	it	cs
 8000ce6:	2304      	movcs	r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d902      	bls.n	8000cf8 <NVIC_EncodePriority+0x30>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	e000      	b.n	8000cfa <NVIC_EncodePriority+0x32>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	43d9      	mvns	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4313      	orrs	r3, r2
         );
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3724      	adds	r7, #36	@ 0x24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d40:	d301      	bcc.n	8000d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00f      	b.n	8000d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d46:	4a0a      	ldr	r2, [pc, #40]	@ (8000d70 <SysTick_Config+0x40>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4e:	210f      	movs	r1, #15
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f7ff ff8e 	bl	8000c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d58:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <SysTick_Config+0x40>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5e:	4b04      	ldr	r3, [pc, #16]	@ (8000d70 <SysTick_Config+0x40>)
 8000d60:	2207      	movs	r2, #7
 8000d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	e000e010 	.word	0xe000e010

08000d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ff47 	bl	8000c10 <__NVIC_SetPriorityGrouping>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9c:	f7ff ff5c 	bl	8000c58 <__NVIC_GetPriorityGrouping>
 8000da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	6978      	ldr	r0, [r7, #20]
 8000da8:	f7ff ff8e 	bl	8000cc8 <NVIC_EncodePriority>
 8000dac:	4602      	mov	r2, r0
 8000dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff5d 	bl	8000c74 <__NVIC_SetPriority>
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ffb0 	bl	8000d30 <SysTick_Config>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	@ 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
 8000df6:	e159      	b.n	80010ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000df8:	2201      	movs	r2, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	f040 8148 	bne.w	80010a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d005      	beq.n	8000e2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d130      	bne.n	8000e90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	2203      	movs	r2, #3
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	68da      	ldr	r2, [r3, #12]
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e64:	2201      	movs	r2, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	091b      	lsrs	r3, r3, #4
 8000e7a:	f003 0201 	and.w	r2, r3, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d017      	beq.n	8000ecc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d123      	bne.n	8000f20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	08da      	lsrs	r2, r3, #3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3208      	adds	r2, #8
 8000ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	f003 0307 	and.w	r3, r3, #7
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	220f      	movs	r2, #15
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	691a      	ldr	r2, [r3, #16]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	08da      	lsrs	r2, r3, #3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3208      	adds	r2, #8
 8000f1a:	69b9      	ldr	r1, [r7, #24]
 8000f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0203 	and.w	r2, r3, #3
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f000 80a2 	beq.w	80010a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b57      	ldr	r3, [pc, #348]	@ (80010c4 <HAL_GPIO_Init+0x2e8>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6a:	4a56      	ldr	r2, [pc, #344]	@ (80010c4 <HAL_GPIO_Init+0x2e8>)
 8000f6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f72:	4b54      	ldr	r3, [pc, #336]	@ (80010c4 <HAL_GPIO_Init+0x2e8>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f7e:	4a52      	ldr	r2, [pc, #328]	@ (80010c8 <HAL_GPIO_Init+0x2ec>)
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3302      	adds	r3, #2
 8000f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	220f      	movs	r2, #15
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a49      	ldr	r2, [pc, #292]	@ (80010cc <HAL_GPIO_Init+0x2f0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d019      	beq.n	8000fde <HAL_GPIO_Init+0x202>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a48      	ldr	r2, [pc, #288]	@ (80010d0 <HAL_GPIO_Init+0x2f4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d013      	beq.n	8000fda <HAL_GPIO_Init+0x1fe>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a47      	ldr	r2, [pc, #284]	@ (80010d4 <HAL_GPIO_Init+0x2f8>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d00d      	beq.n	8000fd6 <HAL_GPIO_Init+0x1fa>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a46      	ldr	r2, [pc, #280]	@ (80010d8 <HAL_GPIO_Init+0x2fc>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d007      	beq.n	8000fd2 <HAL_GPIO_Init+0x1f6>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a45      	ldr	r2, [pc, #276]	@ (80010dc <HAL_GPIO_Init+0x300>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d101      	bne.n	8000fce <HAL_GPIO_Init+0x1f2>
 8000fca:	2304      	movs	r3, #4
 8000fcc:	e008      	b.n	8000fe0 <HAL_GPIO_Init+0x204>
 8000fce:	2307      	movs	r3, #7
 8000fd0:	e006      	b.n	8000fe0 <HAL_GPIO_Init+0x204>
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e004      	b.n	8000fe0 <HAL_GPIO_Init+0x204>
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	e002      	b.n	8000fe0 <HAL_GPIO_Init+0x204>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <HAL_GPIO_Init+0x204>
 8000fde:	2300      	movs	r3, #0
 8000fe0:	69fa      	ldr	r2, [r7, #28]
 8000fe2:	f002 0203 	and.w	r2, r2, #3
 8000fe6:	0092      	lsls	r2, r2, #2
 8000fe8:	4093      	lsls	r3, r2
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ff0:	4935      	ldr	r1, [pc, #212]	@ (80010c8 <HAL_GPIO_Init+0x2ec>)
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ffe:	4b38      	ldr	r3, [pc, #224]	@ (80010e0 <HAL_GPIO_Init+0x304>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001022:	4a2f      	ldr	r2, [pc, #188]	@ (80010e0 <HAL_GPIO_Init+0x304>)
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001028:	4b2d      	ldr	r3, [pc, #180]	@ (80010e0 <HAL_GPIO_Init+0x304>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800104c:	4a24      	ldr	r2, [pc, #144]	@ (80010e0 <HAL_GPIO_Init+0x304>)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001052:	4b23      	ldr	r3, [pc, #140]	@ (80010e0 <HAL_GPIO_Init+0x304>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001076:	4a1a      	ldr	r2, [pc, #104]	@ (80010e0 <HAL_GPIO_Init+0x304>)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800107c:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <HAL_GPIO_Init+0x304>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010a0:	4a0f      	ldr	r2, [pc, #60]	@ (80010e0 <HAL_GPIO_Init+0x304>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3301      	adds	r3, #1
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	2b0f      	cmp	r3, #15
 80010b0:	f67f aea2 	bls.w	8000df8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3724      	adds	r7, #36	@ 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40013800 	.word	0x40013800
 80010cc:	40020000 	.word	0x40020000
 80010d0:	40020400 	.word	0x40020400
 80010d4:	40020800 	.word	0x40020800
 80010d8:	40020c00 	.word	0x40020c00
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40013c00 	.word	0x40013c00

080010e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	807b      	strh	r3, [r7, #2]
 80010f0:	4613      	mov	r3, r2
 80010f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010f4:	787b      	ldrb	r3, [r7, #1]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010fa:	887a      	ldrh	r2, [r7, #2]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001100:	e003      	b.n	800110a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001102:	887b      	ldrh	r3, [r7, #2]
 8001104:	041a      	lsls	r2, r3, #16
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	619a      	str	r2, [r3, #24]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e267      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d075      	beq.n	8001222 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001136:	4b88      	ldr	r3, [pc, #544]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 030c 	and.w	r3, r3, #12
 800113e:	2b04      	cmp	r3, #4
 8001140:	d00c      	beq.n	800115c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001142:	4b85      	ldr	r3, [pc, #532]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800114a:	2b08      	cmp	r3, #8
 800114c:	d112      	bne.n	8001174 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800114e:	4b82      	ldr	r3, [pc, #520]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001156:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800115a:	d10b      	bne.n	8001174 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115c:	4b7e      	ldr	r3, [pc, #504]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d05b      	beq.n	8001220 <HAL_RCC_OscConfig+0x108>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d157      	bne.n	8001220 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e242      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800117c:	d106      	bne.n	800118c <HAL_RCC_OscConfig+0x74>
 800117e:	4b76      	ldr	r3, [pc, #472]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a75      	ldr	r2, [pc, #468]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 8001184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	e01d      	b.n	80011c8 <HAL_RCC_OscConfig+0xb0>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001194:	d10c      	bne.n	80011b0 <HAL_RCC_OscConfig+0x98>
 8001196:	4b70      	ldr	r3, [pc, #448]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a6f      	ldr	r2, [pc, #444]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 800119c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a6c      	ldr	r2, [pc, #432]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 80011a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	e00b      	b.n	80011c8 <HAL_RCC_OscConfig+0xb0>
 80011b0:	4b69      	ldr	r3, [pc, #420]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a68      	ldr	r2, [pc, #416]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 80011b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	4b66      	ldr	r3, [pc, #408]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a65      	ldr	r2, [pc, #404]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 80011c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d013      	beq.n	80011f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fd12 	bl	8000bf8 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fd0e 	bl	8000bf8 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	@ 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e207      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f0      	beq.n	80011d8 <HAL_RCC_OscConfig+0xc0>
 80011f6:	e014      	b.n	8001222 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fcfe 	bl	8000bf8 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff fcfa 	bl	8000bf8 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b64      	cmp	r3, #100	@ 0x64
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e1f3      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001212:	4b51      	ldr	r3, [pc, #324]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f0      	bne.n	8001200 <HAL_RCC_OscConfig+0xe8>
 800121e:	e000      	b.n	8001222 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d063      	beq.n	80012f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800122e:	4b4a      	ldr	r3, [pc, #296]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00b      	beq.n	8001252 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800123a:	4b47      	ldr	r3, [pc, #284]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001242:	2b08      	cmp	r3, #8
 8001244:	d11c      	bne.n	8001280 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001246:	4b44      	ldr	r3, [pc, #272]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d116      	bne.n	8001280 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001252:	4b41      	ldr	r3, [pc, #260]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d005      	beq.n	800126a <HAL_RCC_OscConfig+0x152>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d001      	beq.n	800126a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e1c7      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126a:	4b3b      	ldr	r3, [pc, #236]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	4937      	ldr	r1, [pc, #220]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 800127a:	4313      	orrs	r3, r2
 800127c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800127e:	e03a      	b.n	80012f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d020      	beq.n	80012ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001288:	4b34      	ldr	r3, [pc, #208]	@ (800135c <HAL_RCC_OscConfig+0x244>)
 800128a:	2201      	movs	r2, #1
 800128c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128e:	f7ff fcb3 	bl	8000bf8 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001296:	f7ff fcaf 	bl	8000bf8 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e1a8      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0f0      	beq.n	8001296 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b4:	4b28      	ldr	r3, [pc, #160]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	4925      	ldr	r1, [pc, #148]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 80012c4:	4313      	orrs	r3, r2
 80012c6:	600b      	str	r3, [r1, #0]
 80012c8:	e015      	b.n	80012f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ca:	4b24      	ldr	r3, [pc, #144]	@ (800135c <HAL_RCC_OscConfig+0x244>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d0:	f7ff fc92 	bl	8000bf8 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d8:	f7ff fc8e 	bl	8000bf8 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e187      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f0      	bne.n	80012d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d036      	beq.n	8001370 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d016      	beq.n	8001338 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800130a:	4b15      	ldr	r3, [pc, #84]	@ (8001360 <HAL_RCC_OscConfig+0x248>)
 800130c:	2201      	movs	r2, #1
 800130e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001310:	f7ff fc72 	bl	8000bf8 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001318:	f7ff fc6e 	bl	8000bf8 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e167      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 800132c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0f0      	beq.n	8001318 <HAL_RCC_OscConfig+0x200>
 8001336:	e01b      	b.n	8001370 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001338:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <HAL_RCC_OscConfig+0x248>)
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133e:	f7ff fc5b 	bl	8000bf8 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001344:	e00e      	b.n	8001364 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001346:	f7ff fc57 	bl	8000bf8 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d907      	bls.n	8001364 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e150      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
 8001358:	40023800 	.word	0x40023800
 800135c:	42470000 	.word	0x42470000
 8001360:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001364:	4b88      	ldr	r3, [pc, #544]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1ea      	bne.n	8001346 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8097 	beq.w	80014ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001382:	4b81      	ldr	r3, [pc, #516]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10f      	bne.n	80013ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	4b7d      	ldr	r3, [pc, #500]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	4a7c      	ldr	r2, [pc, #496]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800139c:	6413      	str	r3, [r2, #64]	@ 0x40
 800139e:	4b7a      	ldr	r3, [pc, #488]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013aa:	2301      	movs	r3, #1
 80013ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ae:	4b77      	ldr	r3, [pc, #476]	@ (800158c <HAL_RCC_OscConfig+0x474>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d118      	bne.n	80013ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ba:	4b74      	ldr	r3, [pc, #464]	@ (800158c <HAL_RCC_OscConfig+0x474>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a73      	ldr	r2, [pc, #460]	@ (800158c <HAL_RCC_OscConfig+0x474>)
 80013c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c6:	f7ff fc17 	bl	8000bf8 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ce:	f7ff fc13 	bl	8000bf8 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e10c      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e0:	4b6a      	ldr	r3, [pc, #424]	@ (800158c <HAL_RCC_OscConfig+0x474>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d106      	bne.n	8001402 <HAL_RCC_OscConfig+0x2ea>
 80013f4:	4b64      	ldr	r3, [pc, #400]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 80013f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013f8:	4a63      	ldr	r2, [pc, #396]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001400:	e01c      	b.n	800143c <HAL_RCC_OscConfig+0x324>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b05      	cmp	r3, #5
 8001408:	d10c      	bne.n	8001424 <HAL_RCC_OscConfig+0x30c>
 800140a:	4b5f      	ldr	r3, [pc, #380]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 800140c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800140e:	4a5e      	ldr	r2, [pc, #376]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	6713      	str	r3, [r2, #112]	@ 0x70
 8001416:	4b5c      	ldr	r3, [pc, #368]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800141a:	4a5b      	ldr	r2, [pc, #364]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6713      	str	r3, [r2, #112]	@ 0x70
 8001422:	e00b      	b.n	800143c <HAL_RCC_OscConfig+0x324>
 8001424:	4b58      	ldr	r3, [pc, #352]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001428:	4a57      	ldr	r2, [pc, #348]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 800142a:	f023 0301 	bic.w	r3, r3, #1
 800142e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001430:	4b55      	ldr	r3, [pc, #340]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001434:	4a54      	ldr	r2, [pc, #336]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001436:	f023 0304 	bic.w	r3, r3, #4
 800143a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d015      	beq.n	8001470 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001444:	f7ff fbd8 	bl	8000bf8 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144a:	e00a      	b.n	8001462 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144c:	f7ff fbd4 	bl	8000bf8 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800145a:	4293      	cmp	r3, r2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e0cb      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001462:	4b49      	ldr	r3, [pc, #292]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0ee      	beq.n	800144c <HAL_RCC_OscConfig+0x334>
 800146e:	e014      	b.n	800149a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001470:	f7ff fbc2 	bl	8000bf8 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001476:	e00a      	b.n	800148e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001478:	f7ff fbbe 	bl	8000bf8 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001486:	4293      	cmp	r3, r2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e0b5      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148e:	4b3e      	ldr	r3, [pc, #248]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1ee      	bne.n	8001478 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800149a:	7dfb      	ldrb	r3, [r7, #23]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d105      	bne.n	80014ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a0:	4b39      	ldr	r3, [pc, #228]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a4:	4a38      	ldr	r2, [pc, #224]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 80014a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 80a1 	beq.w	80015f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014b6:	4b34      	ldr	r3, [pc, #208]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	2b08      	cmp	r3, #8
 80014c0:	d05c      	beq.n	800157c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d141      	bne.n	800154e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ca:	4b31      	ldr	r3, [pc, #196]	@ (8001590 <HAL_RCC_OscConfig+0x478>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fb92 	bl	8000bf8 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d8:	f7ff fb8e 	bl	8000bf8 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e087      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ea:	4b27      	ldr	r3, [pc, #156]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69da      	ldr	r2, [r3, #28]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001504:	019b      	lsls	r3, r3, #6
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800150c:	085b      	lsrs	r3, r3, #1
 800150e:	3b01      	subs	r3, #1
 8001510:	041b      	lsls	r3, r3, #16
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001518:	061b      	lsls	r3, r3, #24
 800151a:	491b      	ldr	r1, [pc, #108]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001520:	4b1b      	ldr	r3, [pc, #108]	@ (8001590 <HAL_RCC_OscConfig+0x478>)
 8001522:	2201      	movs	r2, #1
 8001524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001526:	f7ff fb67 	bl	8000bf8 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800152e:	f7ff fb63 	bl	8000bf8 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e05c      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001540:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x416>
 800154c:	e054      	b.n	80015f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <HAL_RCC_OscConfig+0x478>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7ff fb50 	bl	8000bf8 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800155c:	f7ff fb4c 	bl	8000bf8 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e045      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156e:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x444>
 800157a:	e03d      	b.n	80015f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d107      	bne.n	8001594 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e038      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
 8001588:	40023800 	.word	0x40023800
 800158c:	40007000 	.word	0x40007000
 8001590:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001594:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <HAL_RCC_OscConfig+0x4ec>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d028      	beq.n	80015f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d121      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d11a      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015c4:	4013      	ands	r3, r2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d111      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015da:	085b      	lsrs	r3, r3, #1
 80015dc:	3b01      	subs	r3, #1
 80015de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d107      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d001      	beq.n	80015f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800

08001608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0cc      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800161c:	4b68      	ldr	r3, [pc, #416]	@ (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d90c      	bls.n	8001644 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162a:	4b65      	ldr	r3, [pc, #404]	@ (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001632:	4b63      	ldr	r3, [pc, #396]	@ (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d001      	beq.n	8001644 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0b8      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d020      	beq.n	8001692 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800165c:	4b59      	ldr	r3, [pc, #356]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	4a58      	ldr	r2, [pc, #352]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001666:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001674:	4b53      	ldr	r3, [pc, #332]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	4a52      	ldr	r2, [pc, #328]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800167e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001680:	4b50      	ldr	r3, [pc, #320]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	494d      	ldr	r1, [pc, #308]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	4313      	orrs	r3, r2
 8001690:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d044      	beq.n	8001728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d107      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a6:	4b47      	ldr	r3, [pc, #284]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d119      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e07f      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d003      	beq.n	80016c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d107      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c6:	4b3f      	ldr	r3, [pc, #252]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d109      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e06f      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d6:	4b3b      	ldr	r3, [pc, #236]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e067      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016e6:	4b37      	ldr	r3, [pc, #220]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f023 0203 	bic.w	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4934      	ldr	r1, [pc, #208]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f8:	f7ff fa7e 	bl	8000bf8 <HAL_GetTick>
 80016fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fe:	e00a      	b.n	8001716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001700:	f7ff fa7a 	bl	8000bf8 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800170e:	4293      	cmp	r3, r2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e04f      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001716:	4b2b      	ldr	r3, [pc, #172]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 020c 	and.w	r2, r3, #12
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	429a      	cmp	r2, r3
 8001726:	d1eb      	bne.n	8001700 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001728:	4b25      	ldr	r3, [pc, #148]	@ (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d20c      	bcs.n	8001750 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	4b22      	ldr	r3, [pc, #136]	@ (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800173e:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e032      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d008      	beq.n	800176e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800175c:	4b19      	ldr	r3, [pc, #100]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	4916      	ldr	r1, [pc, #88]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	4313      	orrs	r3, r2
 800176c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d009      	beq.n	800178e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800177a:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	490e      	ldr	r1, [pc, #56]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	4313      	orrs	r3, r2
 800178c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800178e:	f000 f821 	bl	80017d4 <HAL_RCC_GetSysClockFreq>
 8001792:	4602      	mov	r2, r0
 8001794:	4b0b      	ldr	r3, [pc, #44]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	490a      	ldr	r1, [pc, #40]	@ (80017c8 <HAL_RCC_ClockConfig+0x1c0>)
 80017a0:	5ccb      	ldrb	r3, [r1, r3]
 80017a2:	fa22 f303 	lsr.w	r3, r2, r3
 80017a6:	4a09      	ldr	r2, [pc, #36]	@ (80017cc <HAL_RCC_ClockConfig+0x1c4>)
 80017a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80017aa:	4b09      	ldr	r3, [pc, #36]	@ (80017d0 <HAL_RCC_ClockConfig+0x1c8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff f9de 	bl	8000b70 <HAL_InitTick>

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023c00 	.word	0x40023c00
 80017c4:	40023800 	.word	0x40023800
 80017c8:	0800624c 	.word	0x0800624c
 80017cc:	20000014 	.word	0x20000014
 80017d0:	20000018 	.word	0x20000018

080017d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017d8:	b090      	sub	sp, #64	@ 0x40
 80017da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017ec:	4b59      	ldr	r3, [pc, #356]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 030c 	and.w	r3, r3, #12
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d00d      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0x40>
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	f200 80a1 	bhi.w	8001940 <HAL_RCC_GetSysClockFreq+0x16c>
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d002      	beq.n	8001808 <HAL_RCC_GetSysClockFreq+0x34>
 8001802:	2b04      	cmp	r3, #4
 8001804:	d003      	beq.n	800180e <HAL_RCC_GetSysClockFreq+0x3a>
 8001806:	e09b      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001808:	4b53      	ldr	r3, [pc, #332]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x184>)
 800180a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800180c:	e09b      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800180e:	4b53      	ldr	r3, [pc, #332]	@ (800195c <HAL_RCC_GetSysClockFreq+0x188>)
 8001810:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001812:	e098      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001814:	4b4f      	ldr	r3, [pc, #316]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x180>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800181c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800181e:	4b4d      	ldr	r3, [pc, #308]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x180>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d028      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800182a:	4b4a      	ldr	r3, [pc, #296]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x180>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	099b      	lsrs	r3, r3, #6
 8001830:	2200      	movs	r2, #0
 8001832:	623b      	str	r3, [r7, #32]
 8001834:	627a      	str	r2, [r7, #36]	@ 0x24
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800183c:	2100      	movs	r1, #0
 800183e:	4b47      	ldr	r3, [pc, #284]	@ (800195c <HAL_RCC_GetSysClockFreq+0x188>)
 8001840:	fb03 f201 	mul.w	r2, r3, r1
 8001844:	2300      	movs	r3, #0
 8001846:	fb00 f303 	mul.w	r3, r0, r3
 800184a:	4413      	add	r3, r2
 800184c:	4a43      	ldr	r2, [pc, #268]	@ (800195c <HAL_RCC_GetSysClockFreq+0x188>)
 800184e:	fba0 1202 	umull	r1, r2, r0, r2
 8001852:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001854:	460a      	mov	r2, r1
 8001856:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001858:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800185a:	4413      	add	r3, r2
 800185c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800185e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001860:	2200      	movs	r2, #0
 8001862:	61bb      	str	r3, [r7, #24]
 8001864:	61fa      	str	r2, [r7, #28]
 8001866:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800186a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800186e:	f7fe fd0f 	bl	8000290 <__aeabi_uldivmod>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4613      	mov	r3, r2
 8001878:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800187a:	e053      	b.n	8001924 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800187c:	4b35      	ldr	r3, [pc, #212]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x180>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	099b      	lsrs	r3, r3, #6
 8001882:	2200      	movs	r2, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	617a      	str	r2, [r7, #20]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800188e:	f04f 0b00 	mov.w	fp, #0
 8001892:	4652      	mov	r2, sl
 8001894:	465b      	mov	r3, fp
 8001896:	f04f 0000 	mov.w	r0, #0
 800189a:	f04f 0100 	mov.w	r1, #0
 800189e:	0159      	lsls	r1, r3, #5
 80018a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018a4:	0150      	lsls	r0, r2, #5
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	ebb2 080a 	subs.w	r8, r2, sl
 80018ae:	eb63 090b 	sbc.w	r9, r3, fp
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80018c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018c6:	ebb2 0408 	subs.w	r4, r2, r8
 80018ca:	eb63 0509 	sbc.w	r5, r3, r9
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	00eb      	lsls	r3, r5, #3
 80018d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018dc:	00e2      	lsls	r2, r4, #3
 80018de:	4614      	mov	r4, r2
 80018e0:	461d      	mov	r5, r3
 80018e2:	eb14 030a 	adds.w	r3, r4, sl
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	eb45 030b 	adc.w	r3, r5, fp
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018fa:	4629      	mov	r1, r5
 80018fc:	028b      	lsls	r3, r1, #10
 80018fe:	4621      	mov	r1, r4
 8001900:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001904:	4621      	mov	r1, r4
 8001906:	028a      	lsls	r2, r1, #10
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800190e:	2200      	movs	r2, #0
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	60fa      	str	r2, [r7, #12]
 8001914:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001918:	f7fe fcba 	bl	8000290 <__aeabi_uldivmod>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4613      	mov	r3, r2
 8001922:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001924:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x180>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	0c1b      	lsrs	r3, r3, #16
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	3301      	adds	r3, #1
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001934:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001938:	fbb2 f3f3 	udiv	r3, r2, r3
 800193c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800193e:	e002      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001940:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x184>)
 8001942:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001948:	4618      	mov	r0, r3
 800194a:	3740      	adds	r7, #64	@ 0x40
 800194c:	46bd      	mov	sp, r7
 800194e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800
 8001958:	00f42400 	.word	0x00f42400
 800195c:	017d7840 	.word	0x017d7840

08001960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001964:	4b03      	ldr	r3, [pc, #12]	@ (8001974 <HAL_RCC_GetHCLKFreq+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000014 	.word	0x20000014

08001978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800197c:	f7ff fff0 	bl	8001960 <HAL_RCC_GetHCLKFreq>
 8001980:	4602      	mov	r2, r0
 8001982:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	0a9b      	lsrs	r3, r3, #10
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	4903      	ldr	r1, [pc, #12]	@ (800199c <HAL_RCC_GetPCLK1Freq+0x24>)
 800198e:	5ccb      	ldrb	r3, [r1, r3]
 8001990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001994:	4618      	mov	r0, r3
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40023800 	.word	0x40023800
 800199c:	0800625c 	.word	0x0800625c

080019a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019a4:	f7ff ffdc 	bl	8001960 <HAL_RCC_GetHCLKFreq>
 80019a8:	4602      	mov	r2, r0
 80019aa:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	0b5b      	lsrs	r3, r3, #13
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	4903      	ldr	r1, [pc, #12]	@ (80019c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019b6:	5ccb      	ldrb	r3, [r1, r3]
 80019b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019bc:	4618      	mov	r0, r3
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	0800625c 	.word	0x0800625c

080019c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e042      	b.n	8001a60 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d106      	bne.n	80019f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7fe ffba 	bl	8000968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2224      	movs	r2, #36	@ 0x24
 80019f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 f973 	bl	8001cf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001a20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	695a      	ldr	r2, [r3, #20]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001a30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2220      	movs	r2, #32
 8001a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	@ 0x28
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	4613      	mov	r3, r2
 8001a76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b20      	cmp	r3, #32
 8001a86:	d175      	bne.n	8001b74 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <HAL_UART_Transmit+0x2c>
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e06e      	b.n	8001b76 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2221      	movs	r2, #33	@ 0x21
 8001aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001aa6:	f7ff f8a7 	bl	8000bf8 <HAL_GetTick>
 8001aaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	88fa      	ldrh	r2, [r7, #6]
 8001ab0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	88fa      	ldrh	r2, [r7, #6]
 8001ab6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ac0:	d108      	bne.n	8001ad4 <HAL_UART_Transmit+0x6c>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d104      	bne.n	8001ad4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	61bb      	str	r3, [r7, #24]
 8001ad2:	e003      	b.n	8001adc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001adc:	e02e      	b.n	8001b3c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2180      	movs	r1, #128	@ 0x80
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 f848 	bl	8001b7e <UART_WaitOnFlagUntilTimeout>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2220      	movs	r2, #32
 8001af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e03a      	b.n	8001b76 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10b      	bne.n	8001b1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	3302      	adds	r3, #2
 8001b1a:	61bb      	str	r3, [r7, #24]
 8001b1c:	e007      	b.n	8001b2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	781a      	ldrb	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1cb      	bne.n	8001ade <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2140      	movs	r1, #64	@ 0x40
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 f814 	bl	8001b7e <UART_WaitOnFlagUntilTimeout>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2220      	movs	r2, #32
 8001b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e006      	b.n	8001b76 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	e000      	b.n	8001b76 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001b74:	2302      	movs	r3, #2
  }
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3720      	adds	r7, #32
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b086      	sub	sp, #24
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b8e:	e03b      	b.n	8001c08 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b96:	d037      	beq.n	8001c08 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b98:	f7ff f82e 	bl	8000bf8 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	6a3a      	ldr	r2, [r7, #32]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d302      	bcc.n	8001bae <UART_WaitOnFlagUntilTimeout+0x30>
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e03a      	b.n	8001c28 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d023      	beq.n	8001c08 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2b80      	cmp	r3, #128	@ 0x80
 8001bc4:	d020      	beq.n	8001c08 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b40      	cmp	r3, #64	@ 0x40
 8001bca:	d01d      	beq.n	8001c08 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d116      	bne.n	8001c08 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f000 f81d 	bl	8001c30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2208      	movs	r2, #8
 8001bfa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e00f      	b.n	8001c28 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	4013      	ands	r3, r2
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	bf0c      	ite	eq
 8001c18:	2301      	moveq	r3, #1
 8001c1a:	2300      	movne	r3, #0
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	461a      	mov	r2, r3
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d0b4      	beq.n	8001b90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b095      	sub	sp, #84	@ 0x54
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	330c      	adds	r3, #12
 8001c3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c42:	e853 3f00 	ldrex	r3, [r3]
 8001c46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	330c      	adds	r3, #12
 8001c56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c58:	643a      	str	r2, [r7, #64]	@ 0x40
 8001c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001c5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c60:	e841 2300 	strex	r3, r2, [r1]
 8001c64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1e5      	bne.n	8001c38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	3314      	adds	r3, #20
 8001c72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	e853 3f00 	ldrex	r3, [r3]
 8001c7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f023 0301 	bic.w	r3, r3, #1
 8001c82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	3314      	adds	r3, #20
 8001c8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c94:	e841 2300 	strex	r3, r2, [r1]
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1e5      	bne.n	8001c6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d119      	bne.n	8001cdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	330c      	adds	r3, #12
 8001cae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	e853 3f00 	ldrex	r3, [r3]
 8001cb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f023 0310 	bic.w	r3, r3, #16
 8001cbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	330c      	adds	r3, #12
 8001cc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001cc8:	61ba      	str	r2, [r7, #24]
 8001cca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ccc:	6979      	ldr	r1, [r7, #20]
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	e841 2300 	strex	r3, r2, [r1]
 8001cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1e5      	bne.n	8001ca8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001cea:	bf00      	nop
 8001cec:	3754      	adds	r7, #84	@ 0x54
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cfc:	b0c0      	sub	sp, #256	@ 0x100
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d14:	68d9      	ldr	r1, [r3, #12]
 8001d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	ea40 0301 	orr.w	r3, r0, r1
 8001d20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	431a      	orrs	r2, r3
 8001d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001d50:	f021 010c 	bic.w	r1, r1, #12
 8001d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001d5e:	430b      	orrs	r3, r1
 8001d60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d72:	6999      	ldr	r1, [r3, #24]
 8001d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	ea40 0301 	orr.w	r3, r0, r1
 8001d7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	4b8f      	ldr	r3, [pc, #572]	@ (8001fc4 <UART_SetConfig+0x2cc>)
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d005      	beq.n	8001d98 <UART_SetConfig+0xa0>
 8001d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	4b8d      	ldr	r3, [pc, #564]	@ (8001fc8 <UART_SetConfig+0x2d0>)
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d104      	bne.n	8001da2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d98:	f7ff fe02 	bl	80019a0 <HAL_RCC_GetPCLK2Freq>
 8001d9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001da0:	e003      	b.n	8001daa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001da2:	f7ff fde9 	bl	8001978 <HAL_RCC_GetPCLK1Freq>
 8001da6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001db4:	f040 810c 	bne.w	8001fd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001dc2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001dc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001dca:	4622      	mov	r2, r4
 8001dcc:	462b      	mov	r3, r5
 8001dce:	1891      	adds	r1, r2, r2
 8001dd0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001dd2:	415b      	adcs	r3, r3
 8001dd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001dd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001dda:	4621      	mov	r1, r4
 8001ddc:	eb12 0801 	adds.w	r8, r2, r1
 8001de0:	4629      	mov	r1, r5
 8001de2:	eb43 0901 	adc.w	r9, r3, r1
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001df2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001df6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dfa:	4690      	mov	r8, r2
 8001dfc:	4699      	mov	r9, r3
 8001dfe:	4623      	mov	r3, r4
 8001e00:	eb18 0303 	adds.w	r3, r8, r3
 8001e04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001e08:	462b      	mov	r3, r5
 8001e0a:	eb49 0303 	adc.w	r3, r9, r3
 8001e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001e1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001e26:	460b      	mov	r3, r1
 8001e28:	18db      	adds	r3, r3, r3
 8001e2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	eb42 0303 	adc.w	r3, r2, r3
 8001e32:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001e3c:	f7fe fa28 	bl	8000290 <__aeabi_uldivmod>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4b61      	ldr	r3, [pc, #388]	@ (8001fcc <UART_SetConfig+0x2d4>)
 8001e46:	fba3 2302 	umull	r2, r3, r3, r2
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	011c      	lsls	r4, r3, #4
 8001e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e52:	2200      	movs	r2, #0
 8001e54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001e5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001e60:	4642      	mov	r2, r8
 8001e62:	464b      	mov	r3, r9
 8001e64:	1891      	adds	r1, r2, r2
 8001e66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001e68:	415b      	adcs	r3, r3
 8001e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001e70:	4641      	mov	r1, r8
 8001e72:	eb12 0a01 	adds.w	sl, r2, r1
 8001e76:	4649      	mov	r1, r9
 8001e78:	eb43 0b01 	adc.w	fp, r3, r1
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e90:	4692      	mov	sl, r2
 8001e92:	469b      	mov	fp, r3
 8001e94:	4643      	mov	r3, r8
 8001e96:	eb1a 0303 	adds.w	r3, sl, r3
 8001e9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001e9e:	464b      	mov	r3, r9
 8001ea0:	eb4b 0303 	adc.w	r3, fp, r3
 8001ea4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001eb4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001eb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	18db      	adds	r3, r3, r3
 8001ec0:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	eb42 0303 	adc.w	r3, r2, r3
 8001ec8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001eca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001ece:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001ed2:	f7fe f9dd 	bl	8000290 <__aeabi_uldivmod>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4611      	mov	r1, r2
 8001edc:	4b3b      	ldr	r3, [pc, #236]	@ (8001fcc <UART_SetConfig+0x2d4>)
 8001ede:	fba3 2301 	umull	r2, r3, r3, r1
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	2264      	movs	r2, #100	@ 0x64
 8001ee6:	fb02 f303 	mul.w	r3, r2, r3
 8001eea:	1acb      	subs	r3, r1, r3
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001ef2:	4b36      	ldr	r3, [pc, #216]	@ (8001fcc <UART_SetConfig+0x2d4>)
 8001ef4:	fba3 2302 	umull	r2, r3, r3, r2
 8001ef8:	095b      	lsrs	r3, r3, #5
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001f00:	441c      	add	r4, r3
 8001f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f06:	2200      	movs	r2, #0
 8001f08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f0c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001f10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001f14:	4642      	mov	r2, r8
 8001f16:	464b      	mov	r3, r9
 8001f18:	1891      	adds	r1, r2, r2
 8001f1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f1c:	415b      	adcs	r3, r3
 8001f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001f24:	4641      	mov	r1, r8
 8001f26:	1851      	adds	r1, r2, r1
 8001f28:	6339      	str	r1, [r7, #48]	@ 0x30
 8001f2a:	4649      	mov	r1, r9
 8001f2c:	414b      	adcs	r3, r1
 8001f2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	f04f 0300 	mov.w	r3, #0
 8001f38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001f3c:	4659      	mov	r1, fp
 8001f3e:	00cb      	lsls	r3, r1, #3
 8001f40:	4651      	mov	r1, sl
 8001f42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f46:	4651      	mov	r1, sl
 8001f48:	00ca      	lsls	r2, r1, #3
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4642      	mov	r2, r8
 8001f52:	189b      	adds	r3, r3, r2
 8001f54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001f58:	464b      	mov	r3, r9
 8001f5a:	460a      	mov	r2, r1
 8001f5c:	eb42 0303 	adc.w	r3, r2, r3
 8001f60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001f70:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001f74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001f78:	460b      	mov	r3, r1
 8001f7a:	18db      	adds	r3, r3, r3
 8001f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f7e:	4613      	mov	r3, r2
 8001f80:	eb42 0303 	adc.w	r3, r2, r3
 8001f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001f8e:	f7fe f97f 	bl	8000290 <__aeabi_uldivmod>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4b0d      	ldr	r3, [pc, #52]	@ (8001fcc <UART_SetConfig+0x2d4>)
 8001f98:	fba3 1302 	umull	r1, r3, r3, r2
 8001f9c:	095b      	lsrs	r3, r3, #5
 8001f9e:	2164      	movs	r1, #100	@ 0x64
 8001fa0:	fb01 f303 	mul.w	r3, r1, r3
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	3332      	adds	r3, #50	@ 0x32
 8001faa:	4a08      	ldr	r2, [pc, #32]	@ (8001fcc <UART_SetConfig+0x2d4>)
 8001fac:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb0:	095b      	lsrs	r3, r3, #5
 8001fb2:	f003 0207 	and.w	r2, r3, #7
 8001fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4422      	add	r2, r4
 8001fbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001fc0:	e106      	b.n	80021d0 <UART_SetConfig+0x4d8>
 8001fc2:	bf00      	nop
 8001fc4:	40011000 	.word	0x40011000
 8001fc8:	40011400 	.word	0x40011400
 8001fcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001fda:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001fde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001fe2:	4642      	mov	r2, r8
 8001fe4:	464b      	mov	r3, r9
 8001fe6:	1891      	adds	r1, r2, r2
 8001fe8:	6239      	str	r1, [r7, #32]
 8001fea:	415b      	adcs	r3, r3
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ff2:	4641      	mov	r1, r8
 8001ff4:	1854      	adds	r4, r2, r1
 8001ff6:	4649      	mov	r1, r9
 8001ff8:	eb43 0501 	adc.w	r5, r3, r1
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	00eb      	lsls	r3, r5, #3
 8002006:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800200a:	00e2      	lsls	r2, r4, #3
 800200c:	4614      	mov	r4, r2
 800200e:	461d      	mov	r5, r3
 8002010:	4643      	mov	r3, r8
 8002012:	18e3      	adds	r3, r4, r3
 8002014:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002018:	464b      	mov	r3, r9
 800201a:	eb45 0303 	adc.w	r3, r5, r3
 800201e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800202e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800203e:	4629      	mov	r1, r5
 8002040:	008b      	lsls	r3, r1, #2
 8002042:	4621      	mov	r1, r4
 8002044:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002048:	4621      	mov	r1, r4
 800204a:	008a      	lsls	r2, r1, #2
 800204c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002050:	f7fe f91e 	bl	8000290 <__aeabi_uldivmod>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4b60      	ldr	r3, [pc, #384]	@ (80021dc <UART_SetConfig+0x4e4>)
 800205a:	fba3 2302 	umull	r2, r3, r3, r2
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	011c      	lsls	r4, r3, #4
 8002062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002066:	2200      	movs	r2, #0
 8002068:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800206c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002070:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002074:	4642      	mov	r2, r8
 8002076:	464b      	mov	r3, r9
 8002078:	1891      	adds	r1, r2, r2
 800207a:	61b9      	str	r1, [r7, #24]
 800207c:	415b      	adcs	r3, r3
 800207e:	61fb      	str	r3, [r7, #28]
 8002080:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002084:	4641      	mov	r1, r8
 8002086:	1851      	adds	r1, r2, r1
 8002088:	6139      	str	r1, [r7, #16]
 800208a:	4649      	mov	r1, r9
 800208c:	414b      	adcs	r3, r1
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800209c:	4659      	mov	r1, fp
 800209e:	00cb      	lsls	r3, r1, #3
 80020a0:	4651      	mov	r1, sl
 80020a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020a6:	4651      	mov	r1, sl
 80020a8:	00ca      	lsls	r2, r1, #3
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	4603      	mov	r3, r0
 80020b0:	4642      	mov	r2, r8
 80020b2:	189b      	adds	r3, r3, r2
 80020b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80020b8:	464b      	mov	r3, r9
 80020ba:	460a      	mov	r2, r1
 80020bc:	eb42 0303 	adc.w	r3, r2, r3
 80020c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80020c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80020ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80020dc:	4649      	mov	r1, r9
 80020de:	008b      	lsls	r3, r1, #2
 80020e0:	4641      	mov	r1, r8
 80020e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020e6:	4641      	mov	r1, r8
 80020e8:	008a      	lsls	r2, r1, #2
 80020ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80020ee:	f7fe f8cf 	bl	8000290 <__aeabi_uldivmod>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4611      	mov	r1, r2
 80020f8:	4b38      	ldr	r3, [pc, #224]	@ (80021dc <UART_SetConfig+0x4e4>)
 80020fa:	fba3 2301 	umull	r2, r3, r3, r1
 80020fe:	095b      	lsrs	r3, r3, #5
 8002100:	2264      	movs	r2, #100	@ 0x64
 8002102:	fb02 f303 	mul.w	r3, r2, r3
 8002106:	1acb      	subs	r3, r1, r3
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	3332      	adds	r3, #50	@ 0x32
 800210c:	4a33      	ldr	r2, [pc, #204]	@ (80021dc <UART_SetConfig+0x4e4>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002118:	441c      	add	r4, r3
 800211a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800211e:	2200      	movs	r2, #0
 8002120:	673b      	str	r3, [r7, #112]	@ 0x70
 8002122:	677a      	str	r2, [r7, #116]	@ 0x74
 8002124:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002128:	4642      	mov	r2, r8
 800212a:	464b      	mov	r3, r9
 800212c:	1891      	adds	r1, r2, r2
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	415b      	adcs	r3, r3
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002138:	4641      	mov	r1, r8
 800213a:	1851      	adds	r1, r2, r1
 800213c:	6039      	str	r1, [r7, #0]
 800213e:	4649      	mov	r1, r9
 8002140:	414b      	adcs	r3, r1
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002150:	4659      	mov	r1, fp
 8002152:	00cb      	lsls	r3, r1, #3
 8002154:	4651      	mov	r1, sl
 8002156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800215a:	4651      	mov	r1, sl
 800215c:	00ca      	lsls	r2, r1, #3
 800215e:	4610      	mov	r0, r2
 8002160:	4619      	mov	r1, r3
 8002162:	4603      	mov	r3, r0
 8002164:	4642      	mov	r2, r8
 8002166:	189b      	adds	r3, r3, r2
 8002168:	66bb      	str	r3, [r7, #104]	@ 0x68
 800216a:	464b      	mov	r3, r9
 800216c:	460a      	mov	r2, r1
 800216e:	eb42 0303 	adc.w	r3, r2, r3
 8002172:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	663b      	str	r3, [r7, #96]	@ 0x60
 800217e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800218c:	4649      	mov	r1, r9
 800218e:	008b      	lsls	r3, r1, #2
 8002190:	4641      	mov	r1, r8
 8002192:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002196:	4641      	mov	r1, r8
 8002198:	008a      	lsls	r2, r1, #2
 800219a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800219e:	f7fe f877 	bl	8000290 <__aeabi_uldivmod>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4b0d      	ldr	r3, [pc, #52]	@ (80021dc <UART_SetConfig+0x4e4>)
 80021a8:	fba3 1302 	umull	r1, r3, r3, r2
 80021ac:	095b      	lsrs	r3, r3, #5
 80021ae:	2164      	movs	r1, #100	@ 0x64
 80021b0:	fb01 f303 	mul.w	r3, r1, r3
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	3332      	adds	r3, #50	@ 0x32
 80021ba:	4a08      	ldr	r2, [pc, #32]	@ (80021dc <UART_SetConfig+0x4e4>)
 80021bc:	fba2 2303 	umull	r2, r3, r2, r3
 80021c0:	095b      	lsrs	r3, r3, #5
 80021c2:	f003 020f 	and.w	r2, r3, #15
 80021c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4422      	add	r2, r4
 80021ce:	609a      	str	r2, [r3, #8]
}
 80021d0:	bf00      	nop
 80021d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80021d6:	46bd      	mov	sp, r7
 80021d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021dc:	51eb851f 	.word	0x51eb851f

080021e0 <__NVIC_SetPriority>:
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	6039      	str	r1, [r7, #0]
 80021ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	db0a      	blt.n	800220a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	490c      	ldr	r1, [pc, #48]	@ (800222c <__NVIC_SetPriority+0x4c>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	0112      	lsls	r2, r2, #4
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	440b      	add	r3, r1
 8002204:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002208:	e00a      	b.n	8002220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4908      	ldr	r1, [pc, #32]	@ (8002230 <__NVIC_SetPriority+0x50>)
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	3b04      	subs	r3, #4
 8002218:	0112      	lsls	r2, r2, #4
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	440b      	add	r3, r1
 800221e:	761a      	strb	r2, [r3, #24]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000e100 	.word	0xe000e100
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002238:	2100      	movs	r1, #0
 800223a:	f06f 0004 	mvn.w	r0, #4
 800223e:	f7ff ffcf 	bl	80021e0 <__NVIC_SetPriority>
#endif
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800224e:	f3ef 8305 	mrs	r3, IPSR
 8002252:	603b      	str	r3, [r7, #0]
  return(result);
 8002254:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800225a:	f06f 0305 	mvn.w	r3, #5
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	e00c      	b.n	800227c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002262:	4b0a      	ldr	r3, [pc, #40]	@ (800228c <osKernelInitialize+0x44>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d105      	bne.n	8002276 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800226a:	4b08      	ldr	r3, [pc, #32]	@ (800228c <osKernelInitialize+0x44>)
 800226c:	2201      	movs	r2, #1
 800226e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002270:	2300      	movs	r3, #0
 8002272:	607b      	str	r3, [r7, #4]
 8002274:	e002      	b.n	800227c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002276:	f04f 33ff 	mov.w	r3, #4294967295
 800227a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800227c:	687b      	ldr	r3, [r7, #4]
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	200000f0 	.word	0x200000f0

08002290 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002296:	f3ef 8305 	mrs	r3, IPSR
 800229a:	603b      	str	r3, [r7, #0]
  return(result);
 800229c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80022a2:	f06f 0305 	mvn.w	r3, #5
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	e010      	b.n	80022cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80022aa:	4b0b      	ldr	r3, [pc, #44]	@ (80022d8 <osKernelStart+0x48>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d109      	bne.n	80022c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80022b2:	f7ff ffbf 	bl	8002234 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80022b6:	4b08      	ldr	r3, [pc, #32]	@ (80022d8 <osKernelStart+0x48>)
 80022b8:	2202      	movs	r2, #2
 80022ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80022bc:	f001 fcba 	bl	8003c34 <vTaskStartScheduler>
      stat = osOK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	e002      	b.n	80022cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80022c6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80022cc:	687b      	ldr	r3, [r7, #4]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	200000f0 	.word	0x200000f0

080022dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08e      	sub	sp, #56	@ 0x38
 80022e0:	af04      	add	r7, sp, #16
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022ec:	f3ef 8305 	mrs	r3, IPSR
 80022f0:	617b      	str	r3, [r7, #20]
  return(result);
 80022f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d17e      	bne.n	80023f6 <osThreadNew+0x11a>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d07b      	beq.n	80023f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80022fe:	2380      	movs	r3, #128	@ 0x80
 8002300:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002302:	2318      	movs	r3, #24
 8002304:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002306:	2300      	movs	r3, #0
 8002308:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800230a:	f04f 33ff 	mov.w	r3, #4294967295
 800230e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d045      	beq.n	80023a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <osThreadNew+0x48>
        name = attr->name;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <osThreadNew+0x6e>
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	2b38      	cmp	r3, #56	@ 0x38
 800233c:	d805      	bhi.n	800234a <osThreadNew+0x6e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <osThreadNew+0x72>
        return (NULL);
 800234a:	2300      	movs	r3, #0
 800234c:	e054      	b.n	80023f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00e      	beq.n	8002384 <osThreadNew+0xa8>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b5b      	cmp	r3, #91	@ 0x5b
 800236c:	d90a      	bls.n	8002384 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002372:	2b00      	cmp	r3, #0
 8002374:	d006      	beq.n	8002384 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <osThreadNew+0xa8>
        mem = 1;
 800237e:	2301      	movs	r3, #1
 8002380:	61bb      	str	r3, [r7, #24]
 8002382:	e010      	b.n	80023a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10c      	bne.n	80023a6 <osThreadNew+0xca>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d108      	bne.n	80023a6 <osThreadNew+0xca>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d104      	bne.n	80023a6 <osThreadNew+0xca>
          mem = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	61bb      	str	r3, [r7, #24]
 80023a0:	e001      	b.n	80023a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d110      	bne.n	80023ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80023b4:	9202      	str	r2, [sp, #8]
 80023b6:	9301      	str	r3, [sp, #4]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	6a3a      	ldr	r2, [r7, #32]
 80023c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f001 f9f2 	bl	80037ac <xTaskCreateStatic>
 80023c8:	4603      	mov	r3, r0
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	e013      	b.n	80023f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d110      	bne.n	80023f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	f107 0310 	add.w	r3, r7, #16
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f001 fa40 	bl	800386c <xTaskCreate>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d001      	beq.n	80023f6 <osThreadNew+0x11a>
            hTask = NULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80023f6:	693b      	ldr	r3, [r7, #16]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3728      	adds	r7, #40	@ 0x28
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <osThreadGetState>:
  id = (osThreadId_t)xTaskGetCurrentTaskHandle();

  return (id);
}

osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800240c:	f3ef 8305 	mrs	r3, IPSR
 8002410:	60fb      	str	r3, [r7, #12]
  return(result);
 8002412:	68fb      	ldr	r3, [r7, #12]
  osThreadState_t state;

  if (IS_IRQ() || (hTask == NULL)) {
 8002414:	2b00      	cmp	r3, #0
 8002416:	d102      	bne.n	800241e <osThreadGetState+0x1e>
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d103      	bne.n	8002426 <osThreadGetState+0x26>
    state = osThreadError;
 800241e:	f04f 33ff 	mov.w	r3, #4294967295
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	e022      	b.n	800246c <osThreadGetState+0x6c>
  }
  else {
    switch (eTaskGetState (hTask)) {
 8002426:	6938      	ldr	r0, [r7, #16]
 8002428:	f001 fb9c 	bl	8003b64 <eTaskGetState>
 800242c:	4603      	mov	r3, r0
 800242e:	2b04      	cmp	r3, #4
 8002430:	d818      	bhi.n	8002464 <osThreadGetState+0x64>
 8002432:	a201      	add	r2, pc, #4	@ (adr r2, 8002438 <osThreadGetState+0x38>)
 8002434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002438:	0800244d 	.word	0x0800244d
 800243c:	08002453 	.word	0x08002453
 8002440:	08002459 	.word	0x08002459
 8002444:	08002459 	.word	0x08002459
 8002448:	0800245f 	.word	0x0800245f
      case eRunning:   state = osThreadRunning;    break;
 800244c:	2302      	movs	r3, #2
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	e00c      	b.n	800246c <osThreadGetState+0x6c>
      case eReady:     state = osThreadReady;      break;
 8002452:	2301      	movs	r3, #1
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	e009      	b.n	800246c <osThreadGetState+0x6c>
      case eBlocked:
      case eSuspended: state = osThreadBlocked;    break;
 8002458:	2303      	movs	r3, #3
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	e006      	b.n	800246c <osThreadGetState+0x6c>
      case eDeleted:   state = osThreadTerminated; break;
 800245e:	2304      	movs	r3, #4
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	e003      	b.n	800246c <osThreadGetState+0x6c>
      case eInvalid:
      default:         state = osThreadError;      break;
 8002464:	f04f 33ff 	mov.w	r3, #4294967295
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	bf00      	nop
    }
  }

  return (state);
 800246c:	697b      	ldr	r3, [r7, #20]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop

08002478 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002480:	f3ef 8305 	mrs	r3, IPSR
 8002484:	60bb      	str	r3, [r7, #8]
  return(result);
 8002486:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <osDelay+0x1c>
    stat = osErrorISR;
 800248c:	f06f 0305 	mvn.w	r3, #5
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	e007      	b.n	80024a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f001 fb2a 	bl	8003af8 <vTaskDelay>
    }
  }

  return (stat);
 80024a4:	68fb      	ldr	r3, [r7, #12]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b088      	sub	sp, #32
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024ba:	f3ef 8305 	mrs	r3, IPSR
 80024be:	60bb      	str	r3, [r7, #8]
  return(result);
 80024c0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d174      	bne.n	80025b0 <osMutexNew+0x102>
    if (attr != NULL) {
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <osMutexNew+0x26>
      type = attr->attr_bits;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	61bb      	str	r3, [r7, #24]
 80024d2:	e001      	b.n	80024d8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <osMutexNew+0x3a>
      rmtx = 1U;
 80024e2:	2301      	movs	r3, #1
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	e001      	b.n	80024ec <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d15c      	bne.n	80025b0 <osMutexNew+0x102>
      mem = -1;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295
 80024fa:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d015      	beq.n	800252e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d006      	beq.n	8002518 <osMutexNew+0x6a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2b4f      	cmp	r3, #79	@ 0x4f
 8002510:	d902      	bls.n	8002518 <osMutexNew+0x6a>
          mem = 1;
 8002512:	2301      	movs	r3, #1
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	e00c      	b.n	8002532 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d108      	bne.n	8002532 <osMutexNew+0x84>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d104      	bne.n	8002532 <osMutexNew+0x84>
            mem = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	e001      	b.n	8002532 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d112      	bne.n	800255e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d007      	beq.n	800254e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	4619      	mov	r1, r3
 8002544:	2004      	movs	r0, #4
 8002546:	f000 fb92 	bl	8002c6e <xQueueCreateMutexStatic>
 800254a:	61f8      	str	r0, [r7, #28]
 800254c:	e016      	b.n	800257c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	4619      	mov	r1, r3
 8002554:	2001      	movs	r0, #1
 8002556:	f000 fb8a 	bl	8002c6e <xQueueCreateMutexStatic>
 800255a:	61f8      	str	r0, [r7, #28]
 800255c:	e00e      	b.n	800257c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10b      	bne.n	800257c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d004      	beq.n	8002574 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800256a:	2004      	movs	r0, #4
 800256c:	f000 fb67 	bl	8002c3e <xQueueCreateMutex>
 8002570:	61f8      	str	r0, [r7, #28]
 8002572:	e003      	b.n	800257c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8002574:	2001      	movs	r0, #1
 8002576:	f000 fb62 	bl	8002c3e <xQueueCreateMutex>
 800257a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00c      	beq.n	800259c <osMutexNew+0xee>
        if (attr != NULL) {
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <osMutexNew+0xe2>
          name = attr->name;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	e001      	b.n	8002594 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8002590:	2300      	movs	r3, #0
 8002592:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8002594:	68f9      	ldr	r1, [r7, #12]
 8002596:	69f8      	ldr	r0, [r7, #28]
 8002598:	f001 f8aa 	bl	80036f0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d006      	beq.n	80025b0 <osMutexNew+0x102>
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80025b0:	69fb      	ldr	r3, [r7, #28]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3720      	adds	r7, #32
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b086      	sub	sp, #24
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f023 0301 	bic.w	r3, r3, #1
 80025ca:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025d8:	f3ef 8305 	mrs	r3, IPSR
 80025dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80025de:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <osMutexAcquire+0x32>
    stat = osErrorISR;
 80025e4:	f06f 0305 	mvn.w	r3, #5
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	e02c      	b.n	8002646 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d103      	bne.n	80025fa <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80025f2:	f06f 0303 	mvn.w	r3, #3
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	e025      	b.n	8002646 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d011      	beq.n	8002624 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8002600:	6839      	ldr	r1, [r7, #0]
 8002602:	6938      	ldr	r0, [r7, #16]
 8002604:	f000 fb83 	bl	8002d0e <xQueueTakeMutexRecursive>
 8002608:	4603      	mov	r3, r0
 800260a:	2b01      	cmp	r3, #1
 800260c:	d01b      	beq.n	8002646 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8002614:	f06f 0301 	mvn.w	r3, #1
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	e014      	b.n	8002646 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800261c:	f06f 0302 	mvn.w	r3, #2
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	e010      	b.n	8002646 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8002624:	6839      	ldr	r1, [r7, #0]
 8002626:	6938      	ldr	r0, [r7, #16]
 8002628:	f000 fe2a 	bl	8003280 <xQueueSemaphoreTake>
 800262c:	4603      	mov	r3, r0
 800262e:	2b01      	cmp	r3, #1
 8002630:	d009      	beq.n	8002646 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8002638:	f06f 0301 	mvn.w	r3, #1
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	e002      	b.n	8002646 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002640:	f06f 0302 	mvn.w	r3, #2
 8002644:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8002646:	697b      	ldr	r3, [r7, #20]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800266c:	f3ef 8305 	mrs	r3, IPSR
 8002670:	60bb      	str	r3, [r7, #8]
  return(result);
 8002672:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <osMutexRelease+0x30>
    stat = osErrorISR;
 8002678:	f06f 0305 	mvn.w	r3, #5
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	e01f      	b.n	80026c0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d103      	bne.n	800268e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8002686:	f06f 0303 	mvn.w	r3, #3
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	e018      	b.n	80026c0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d009      	beq.n	80026a8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8002694:	6938      	ldr	r0, [r7, #16]
 8002696:	f000 fb05 	bl	8002ca4 <xQueueGiveMutexRecursive>
 800269a:	4603      	mov	r3, r0
 800269c:	2b01      	cmp	r3, #1
 800269e:	d00f      	beq.n	80026c0 <osMutexRelease+0x70>
        stat = osErrorResource;
 80026a0:	f06f 0302 	mvn.w	r3, #2
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	e00b      	b.n	80026c0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80026a8:	2300      	movs	r3, #0
 80026aa:	2200      	movs	r2, #0
 80026ac:	2100      	movs	r1, #0
 80026ae:	6938      	ldr	r0, [r7, #16]
 80026b0:	f000 fb64 	bl	8002d7c <xQueueGenericSend>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d002      	beq.n	80026c0 <osMutexRelease+0x70>
        stat = osErrorResource;
 80026ba:	f06f 0302 	mvn.w	r3, #2
 80026be:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80026c0:	697b      	ldr	r3, [r7, #20]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b08a      	sub	sp, #40	@ 0x28
 80026ce:	af02      	add	r7, sp, #8
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026da:	f3ef 8305 	mrs	r3, IPSR
 80026de:	613b      	str	r3, [r7, #16]
  return(result);
 80026e0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d15f      	bne.n	80027a6 <osMessageQueueNew+0xdc>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d05c      	beq.n	80027a6 <osMessageQueueNew+0xdc>
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d059      	beq.n	80027a6 <osMessageQueueNew+0xdc>
    mem = -1;
 80026f2:	f04f 33ff 	mov.w	r3, #4294967295
 80026f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d029      	beq.n	8002752 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d012      	beq.n	800272c <osMessageQueueNew+0x62>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b4f      	cmp	r3, #79	@ 0x4f
 800270c:	d90e      	bls.n	800272c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	fb01 f303 	mul.w	r3, r1, r3
 8002722:	429a      	cmp	r2, r3
 8002724:	d302      	bcc.n	800272c <osMessageQueueNew+0x62>
        mem = 1;
 8002726:	2301      	movs	r3, #1
 8002728:	61bb      	str	r3, [r7, #24]
 800272a:	e014      	b.n	8002756 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d110      	bne.n	8002756 <osMessageQueueNew+0x8c>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10c      	bne.n	8002756 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002740:	2b00      	cmp	r3, #0
 8002742:	d108      	bne.n	8002756 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d104      	bne.n	8002756 <osMessageQueueNew+0x8c>
          mem = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	61bb      	str	r3, [r7, #24]
 8002750:	e001      	b.n	8002756 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d10b      	bne.n	8002774 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	2100      	movs	r1, #0
 8002766:	9100      	str	r1, [sp, #0]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 f972 	bl	8002a54 <xQueueGenericCreateStatic>
 8002770:	61f8      	str	r0, [r7, #28]
 8002772:	e008      	b.n	8002786 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d105      	bne.n	8002786 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800277a:	2200      	movs	r2, #0
 800277c:	68b9      	ldr	r1, [r7, #8]
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 f9e5 	bl	8002b4e <xQueueGenericCreate>
 8002784:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00c      	beq.n	80027a6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <osMessageQueueNew+0xd0>
        name = attr->name;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	e001      	b.n	800279e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800279e:	6979      	ldr	r1, [r7, #20]
 80027a0:	69f8      	ldr	r0, [r7, #28]
 80027a2:	f000 ffa5 	bl	80036f0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80027a6:	69fb      	ldr	r3, [r7, #28]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3720      	adds	r7, #32
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4a07      	ldr	r2, [pc, #28]	@ (80027dc <vApplicationGetIdleTaskMemory+0x2c>)
 80027c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	4a06      	ldr	r2, [pc, #24]	@ (80027e0 <vApplicationGetIdleTaskMemory+0x30>)
 80027c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2280      	movs	r2, #128	@ 0x80
 80027cc:	601a      	str	r2, [r3, #0]
}
 80027ce:	bf00      	nop
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	200000f4 	.word	0x200000f4
 80027e0:	20000150 	.word	0x20000150

080027e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4a07      	ldr	r2, [pc, #28]	@ (8002810 <vApplicationGetTimerTaskMemory+0x2c>)
 80027f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	4a06      	ldr	r2, [pc, #24]	@ (8002814 <vApplicationGetTimerTaskMemory+0x30>)
 80027fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002802:	601a      	str	r2, [r3, #0]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	20000350 	.word	0x20000350
 8002814:	200003ac 	.word	0x200003ac

08002818 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f103 0208 	add.w	r2, r3, #8
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f04f 32ff 	mov.w	r2, #4294967295
 8002830:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f103 0208 	add.w	r2, r3, #8
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f103 0208 	add.w	r2, r3, #8
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002872:	b480      	push	{r7}
 8002874:	b085      	sub	sp, #20
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	601a      	str	r2, [r3, #0]
}
 80028ae:	bf00      	nop
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028ba:	b480      	push	{r7}
 80028bc:	b085      	sub	sp, #20
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d0:	d103      	bne.n	80028da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	e00c      	b.n	80028f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3308      	adds	r3, #8
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	e002      	b.n	80028e8 <vListInsert+0x2e>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d2f6      	bcs.n	80028e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	601a      	str	r2, [r3, #0]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6892      	ldr	r2, [r2, #8]
 8002942:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6852      	ldr	r2, [r2, #4]
 800294c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	429a      	cmp	r2, r3
 8002956:	d103      	bne.n	8002960 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	1e5a      	subs	r2, r3, #1
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10b      	bne.n	80029ac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002998:	f383 8811 	msr	BASEPRI, r3
 800299c:	f3bf 8f6f 	isb	sy
 80029a0:	f3bf 8f4f 	dsb	sy
 80029a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80029a6:	bf00      	nop
 80029a8:	bf00      	nop
 80029aa:	e7fd      	b.n	80029a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80029ac:	f002 fc0c 	bl	80051c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b8:	68f9      	ldr	r1, [r7, #12]
 80029ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	441a      	add	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029dc:	3b01      	subs	r3, #1
 80029de:	68f9      	ldr	r1, [r7, #12]
 80029e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	441a      	add	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	22ff      	movs	r2, #255	@ 0xff
 80029f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	22ff      	movs	r2, #255	@ 0xff
 80029f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d114      	bne.n	8002a2c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d01a      	beq.n	8002a40 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	3310      	adds	r3, #16
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f001 fb9e 	bl	8004150 <xTaskRemoveFromEventList>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d012      	beq.n	8002a40 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a50 <xQueueGenericReset+0xd0>)
 8002a1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	f3bf 8f4f 	dsb	sy
 8002a26:	f3bf 8f6f 	isb	sy
 8002a2a:	e009      	b.n	8002a40 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	3310      	adds	r3, #16
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fef1 	bl	8002818 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3324      	adds	r3, #36	@ 0x24
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff feec 	bl	8002818 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a40:	f002 fbf4 	bl	800522c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a44:	2301      	movs	r3, #1
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	e000ed04 	.word	0xe000ed04

08002a54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08e      	sub	sp, #56	@ 0x38
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10b      	bne.n	8002a80 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a6c:	f383 8811 	msr	BASEPRI, r3
 8002a70:	f3bf 8f6f 	isb	sy
 8002a74:	f3bf 8f4f 	dsb	sy
 8002a78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002a7a:	bf00      	nop
 8002a7c:	bf00      	nop
 8002a7e:	e7fd      	b.n	8002a7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10b      	bne.n	8002a9e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a8a:	f383 8811 	msr	BASEPRI, r3
 8002a8e:	f3bf 8f6f 	isb	sy
 8002a92:	f3bf 8f4f 	dsb	sy
 8002a96:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002a98:	bf00      	nop
 8002a9a:	bf00      	nop
 8002a9c:	e7fd      	b.n	8002a9a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <xQueueGenericCreateStatic+0x56>
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <xQueueGenericCreateStatic+0x5a>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <xQueueGenericCreateStatic+0x5c>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10b      	bne.n	8002acc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ab8:	f383 8811 	msr	BASEPRI, r3
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	623b      	str	r3, [r7, #32]
}
 8002ac6:	bf00      	nop
 8002ac8:	bf00      	nop
 8002aca:	e7fd      	b.n	8002ac8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d102      	bne.n	8002ad8 <xQueueGenericCreateStatic+0x84>
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <xQueueGenericCreateStatic+0x88>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <xQueueGenericCreateStatic+0x8a>
 8002adc:	2300      	movs	r3, #0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10b      	bne.n	8002afa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ae6:	f383 8811 	msr	BASEPRI, r3
 8002aea:	f3bf 8f6f 	isb	sy
 8002aee:	f3bf 8f4f 	dsb	sy
 8002af2:	61fb      	str	r3, [r7, #28]
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	e7fd      	b.n	8002af6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002afa:	2350      	movs	r3, #80	@ 0x50
 8002afc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b50      	cmp	r3, #80	@ 0x50
 8002b02:	d00b      	beq.n	8002b1c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b08:	f383 8811 	msr	BASEPRI, r3
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	f3bf 8f4f 	dsb	sy
 8002b14:	61bb      	str	r3, [r7, #24]
}
 8002b16:	bf00      	nop
 8002b18:	bf00      	nop
 8002b1a:	e7fd      	b.n	8002b18 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002b1c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00d      	beq.n	8002b44 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b30:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	68b9      	ldr	r1, [r7, #8]
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f840 	bl	8002bc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3730      	adds	r7, #48	@ 0x30
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b08a      	sub	sp, #40	@ 0x28
 8002b52:	af02      	add	r7, sp, #8
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10b      	bne.n	8002b7a <xQueueGenericCreate+0x2c>
	__asm volatile
 8002b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b66:	f383 8811 	msr	BASEPRI, r3
 8002b6a:	f3bf 8f6f 	isb	sy
 8002b6e:	f3bf 8f4f 	dsb	sy
 8002b72:	613b      	str	r3, [r7, #16]
}
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop
 8002b78:	e7fd      	b.n	8002b76 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	fb02 f303 	mul.w	r3, r2, r3
 8002b82:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	3350      	adds	r3, #80	@ 0x50
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f002 fc3f 	bl	800540c <pvPortMalloc>
 8002b8e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d011      	beq.n	8002bba <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	3350      	adds	r3, #80	@ 0x50
 8002b9e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ba8:	79fa      	ldrb	r2, [r7, #7]
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	68b9      	ldr	r1, [r7, #8]
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 f805 	bl	8002bc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002bba:	69bb      	ldr	r3, [r7, #24]
	}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3720      	adds	r7, #32
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d103      	bne.n	8002be0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	e002      	b.n	8002be6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	69b8      	ldr	r0, [r7, #24]
 8002bf6:	f7ff fec3 	bl	8002980 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00e      	beq.n	8002c36 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2100      	movs	r1, #0
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f8a3 	bl	8002d7c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b086      	sub	sp, #24
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	4603      	mov	r3, r0
 8002c46:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	461a      	mov	r2, r3
 8002c54:	6939      	ldr	r1, [r7, #16]
 8002c56:	6978      	ldr	r0, [r7, #20]
 8002c58:	f7ff ff79 	bl	8002b4e <xQueueGenericCreate>
 8002c5c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f7ff ffd3 	bl	8002c0a <prvInitialiseMutex>

		return xNewQueue;
 8002c64:	68fb      	ldr	r3, [r7, #12]
	}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b088      	sub	sp, #32
 8002c72:	af02      	add	r7, sp, #8
 8002c74:	4603      	mov	r3, r0
 8002c76:	6039      	str	r1, [r7, #0]
 8002c78:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	6939      	ldr	r1, [r7, #16]
 8002c8c:	6978      	ldr	r0, [r7, #20]
 8002c8e:	f7ff fee1 	bl	8002a54 <xQueueGenericCreateStatic>
 8002c92:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f7ff ffb8 	bl	8002c0a <prvInitialiseMutex>

		return xNewQueue;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
	}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8002ca4:	b590      	push	{r4, r7, lr}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10b      	bne.n	8002cce <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8002cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	60fb      	str	r3, [r7, #12]
}
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop
 8002ccc:	e7fd      	b.n	8002cca <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	689c      	ldr	r4, [r3, #8]
 8002cd2:	f001 fbfd 	bl	80044d0 <xTaskGetCurrentTaskHandle>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	429c      	cmp	r4, r3
 8002cda:	d111      	bne.n	8002d00 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	1e5a      	subs	r2, r3, #1
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d105      	bne.n	8002cfa <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8002cee:	2300      	movs	r3, #0
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	6938      	ldr	r0, [r7, #16]
 8002cf6:	f000 f841 	bl	8002d7c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	e001      	b.n	8002d04 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8002d04:	697b      	ldr	r3, [r7, #20]
	}
 8002d06:	4618      	mov	r0, r3
 8002d08:	371c      	adds	r7, #28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd90      	pop	{r4, r7, pc}

08002d0e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8002d0e:	b590      	push	{r4, r7, lr}
 8002d10:	b087      	sub	sp, #28
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10b      	bne.n	8002d3a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8002d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d26:	f383 8811 	msr	BASEPRI, r3
 8002d2a:	f3bf 8f6f 	isb	sy
 8002d2e:	f3bf 8f4f 	dsb	sy
 8002d32:	60fb      	str	r3, [r7, #12]
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	e7fd      	b.n	8002d36 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	689c      	ldr	r4, [r3, #8]
 8002d3e:	f001 fbc7 	bl	80044d0 <xTaskGetCurrentTaskHandle>
 8002d42:	4603      	mov	r3, r0
 8002d44:	429c      	cmp	r4, r3
 8002d46:	d107      	bne.n	8002d58 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8002d52:	2301      	movs	r3, #1
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	e00c      	b.n	8002d72 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8002d58:	6839      	ldr	r1, [r7, #0]
 8002d5a:	6938      	ldr	r0, [r7, #16]
 8002d5c:	f000 fa90 	bl	8003280 <xQueueSemaphoreTake>
 8002d60:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d004      	beq.n	8002d72 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8002d72:	697b      	ldr	r3, [r7, #20]
	}
 8002d74:	4618      	mov	r0, r3
 8002d76:	371c      	adds	r7, #28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd90      	pop	{r4, r7, pc}

08002d7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08e      	sub	sp, #56	@ 0x38
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10b      	bne.n	8002db0 <xQueueGenericSend+0x34>
	__asm volatile
 8002d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002daa:	bf00      	nop
 8002dac:	bf00      	nop
 8002dae:	e7fd      	b.n	8002dac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d103      	bne.n	8002dbe <xQueueGenericSend+0x42>
 8002db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <xQueueGenericSend+0x46>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <xQueueGenericSend+0x48>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10b      	bne.n	8002de0 <xQueueGenericSend+0x64>
	__asm volatile
 8002dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dcc:	f383 8811 	msr	BASEPRI, r3
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002dda:	bf00      	nop
 8002ddc:	bf00      	nop
 8002dde:	e7fd      	b.n	8002ddc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d103      	bne.n	8002dee <xQueueGenericSend+0x72>
 8002de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <xQueueGenericSend+0x76>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <xQueueGenericSend+0x78>
 8002df2:	2300      	movs	r3, #0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10b      	bne.n	8002e10 <xQueueGenericSend+0x94>
	__asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	623b      	str	r3, [r7, #32]
}
 8002e0a:	bf00      	nop
 8002e0c:	bf00      	nop
 8002e0e:	e7fd      	b.n	8002e0c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e10:	f001 fb6e 	bl	80044f0 <xTaskGetSchedulerState>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d102      	bne.n	8002e20 <xQueueGenericSend+0xa4>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <xQueueGenericSend+0xa8>
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <xQueueGenericSend+0xaa>
 8002e24:	2300      	movs	r3, #0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10b      	bne.n	8002e42 <xQueueGenericSend+0xc6>
	__asm volatile
 8002e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e2e:	f383 8811 	msr	BASEPRI, r3
 8002e32:	f3bf 8f6f 	isb	sy
 8002e36:	f3bf 8f4f 	dsb	sy
 8002e3a:	61fb      	str	r3, [r7, #28]
}
 8002e3c:	bf00      	nop
 8002e3e:	bf00      	nop
 8002e40:	e7fd      	b.n	8002e3e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e42:	f002 f9c1 	bl	80051c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d302      	bcc.n	8002e58 <xQueueGenericSend+0xdc>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d129      	bne.n	8002eac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	68b9      	ldr	r1, [r7, #8]
 8002e5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e5e:	f000 fb37 	bl	80034d0 <prvCopyDataToQueue>
 8002e62:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d010      	beq.n	8002e8e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6e:	3324      	adds	r3, #36	@ 0x24
 8002e70:	4618      	mov	r0, r3
 8002e72:	f001 f96d 	bl	8004150 <xTaskRemoveFromEventList>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d013      	beq.n	8002ea4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e7c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f7c <xQueueGenericSend+0x200>)
 8002e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	e00a      	b.n	8002ea4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d007      	beq.n	8002ea4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e94:	4b39      	ldr	r3, [pc, #228]	@ (8002f7c <xQueueGenericSend+0x200>)
 8002e96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ea4:	f002 f9c2 	bl	800522c <vPortExitCritical>
				return pdPASS;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e063      	b.n	8002f74 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d103      	bne.n	8002eba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002eb2:	f002 f9bb 	bl	800522c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e05c      	b.n	8002f74 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d106      	bne.n	8002ece <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ec0:	f107 0314 	add.w	r3, r7, #20
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f001 f9a7 	bl	8004218 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ece:	f002 f9ad 	bl	800522c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ed2:	f000 ff17 	bl	8003d04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ed6:	f002 f977 	bl	80051c8 <vPortEnterCritical>
 8002eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002edc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ee0:	b25b      	sxtb	r3, r3
 8002ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee6:	d103      	bne.n	8002ef0 <xQueueGenericSend+0x174>
 8002ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ef6:	b25b      	sxtb	r3, r3
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d103      	bne.n	8002f06 <xQueueGenericSend+0x18a>
 8002efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f06:	f002 f991 	bl	800522c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f0a:	1d3a      	adds	r2, r7, #4
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	4611      	mov	r1, r2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f001 f996 	bl	8004244 <xTaskCheckForTimeOut>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d124      	bne.n	8002f68 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f20:	f000 fbce 	bl	80036c0 <prvIsQueueFull>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d018      	beq.n	8002f5c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f2c:	3310      	adds	r3, #16
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f001 f8ba 	bl	80040ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f3a:	f000 fb59 	bl	80035f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f3e:	f000 feef 	bl	8003d20 <xTaskResumeAll>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f47f af7c 	bne.w	8002e42 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f7c <xQueueGenericSend+0x200>)
 8002f4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	f3bf 8f4f 	dsb	sy
 8002f56:	f3bf 8f6f 	isb	sy
 8002f5a:	e772      	b.n	8002e42 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f5e:	f000 fb47 	bl	80035f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f62:	f000 fedd 	bl	8003d20 <xTaskResumeAll>
 8002f66:	e76c      	b.n	8002e42 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f6a:	f000 fb41 	bl	80035f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f6e:	f000 fed7 	bl	8003d20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3738      	adds	r7, #56	@ 0x38
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	e000ed04 	.word	0xe000ed04

08002f80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b090      	sub	sp, #64	@ 0x40
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10b      	bne.n	8002fb0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002faa:	bf00      	nop
 8002fac:	bf00      	nop
 8002fae:	e7fd      	b.n	8002fac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d103      	bne.n	8002fbe <xQueueGenericSendFromISR+0x3e>
 8002fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <xQueueGenericSendFromISR+0x42>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <xQueueGenericSendFromISR+0x44>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10b      	bne.n	8002fe0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fcc:	f383 8811 	msr	BASEPRI, r3
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002fda:	bf00      	nop
 8002fdc:	bf00      	nop
 8002fde:	e7fd      	b.n	8002fdc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d103      	bne.n	8002fee <xQueueGenericSendFromISR+0x6e>
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <xQueueGenericSendFromISR+0x72>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <xQueueGenericSendFromISR+0x74>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10b      	bne.n	8003010 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ffc:	f383 8811 	msr	BASEPRI, r3
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	623b      	str	r3, [r7, #32]
}
 800300a:	bf00      	nop
 800300c:	bf00      	nop
 800300e:	e7fd      	b.n	800300c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003010:	f002 f9ba 	bl	8005388 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003014:	f3ef 8211 	mrs	r2, BASEPRI
 8003018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800301c:	f383 8811 	msr	BASEPRI, r3
 8003020:	f3bf 8f6f 	isb	sy
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	61fa      	str	r2, [r7, #28]
 800302a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800302c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800302e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003032:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003038:	429a      	cmp	r2, r3
 800303a:	d302      	bcc.n	8003042 <xQueueGenericSendFromISR+0xc2>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d12f      	bne.n	80030a2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003044:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003048:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800304c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800304e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003050:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003058:	f000 fa3a 	bl	80034d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800305c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d112      	bne.n	800308c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306a:	2b00      	cmp	r3, #0
 800306c:	d016      	beq.n	800309c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800306e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003070:	3324      	adds	r3, #36	@ 0x24
 8003072:	4618      	mov	r0, r3
 8003074:	f001 f86c 	bl	8004150 <xTaskRemoveFromEventList>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00e      	beq.n	800309c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00b      	beq.n	800309c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	e007      	b.n	800309c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800308c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003090:	3301      	adds	r3, #1
 8003092:	b2db      	uxtb	r3, r3
 8003094:	b25a      	sxtb	r2, r3
 8003096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003098:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800309c:	2301      	movs	r3, #1
 800309e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80030a0:	e001      	b.n	80030a6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80030b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3740      	adds	r7, #64	@ 0x40
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08c      	sub	sp, #48	@ 0x30
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80030c8:	2300      	movs	r3, #0
 80030ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10b      	bne.n	80030ee <xQueueReceive+0x32>
	__asm volatile
 80030d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030da:	f383 8811 	msr	BASEPRI, r3
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	f3bf 8f4f 	dsb	sy
 80030e6:	623b      	str	r3, [r7, #32]
}
 80030e8:	bf00      	nop
 80030ea:	bf00      	nop
 80030ec:	e7fd      	b.n	80030ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d103      	bne.n	80030fc <xQueueReceive+0x40>
 80030f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <xQueueReceive+0x44>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <xQueueReceive+0x46>
 8003100:	2300      	movs	r3, #0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10b      	bne.n	800311e <xQueueReceive+0x62>
	__asm volatile
 8003106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	61fb      	str	r3, [r7, #28]
}
 8003118:	bf00      	nop
 800311a:	bf00      	nop
 800311c:	e7fd      	b.n	800311a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800311e:	f001 f9e7 	bl	80044f0 <xTaskGetSchedulerState>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d102      	bne.n	800312e <xQueueReceive+0x72>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <xQueueReceive+0x76>
 800312e:	2301      	movs	r3, #1
 8003130:	e000      	b.n	8003134 <xQueueReceive+0x78>
 8003132:	2300      	movs	r3, #0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10b      	bne.n	8003150 <xQueueReceive+0x94>
	__asm volatile
 8003138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	61bb      	str	r3, [r7, #24]
}
 800314a:	bf00      	nop
 800314c:	bf00      	nop
 800314e:	e7fd      	b.n	800314c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003150:	f002 f83a 	bl	80051c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003158:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800315a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315c:	2b00      	cmp	r3, #0
 800315e:	d01f      	beq.n	80031a0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003164:	f000 fa1e 	bl	80035a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316a:	1e5a      	subs	r2, r3, #1
 800316c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800316e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00f      	beq.n	8003198 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317a:	3310      	adds	r3, #16
 800317c:	4618      	mov	r0, r3
 800317e:	f000 ffe7 	bl	8004150 <xTaskRemoveFromEventList>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d007      	beq.n	8003198 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003188:	4b3c      	ldr	r3, [pc, #240]	@ (800327c <xQueueReceive+0x1c0>)
 800318a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	f3bf 8f4f 	dsb	sy
 8003194:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003198:	f002 f848 	bl	800522c <vPortExitCritical>
				return pdPASS;
 800319c:	2301      	movs	r3, #1
 800319e:	e069      	b.n	8003274 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d103      	bne.n	80031ae <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031a6:	f002 f841 	bl	800522c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e062      	b.n	8003274 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d106      	bne.n	80031c2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031b4:	f107 0310 	add.w	r3, r7, #16
 80031b8:	4618      	mov	r0, r3
 80031ba:	f001 f82d 	bl	8004218 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031be:	2301      	movs	r3, #1
 80031c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031c2:	f002 f833 	bl	800522c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031c6:	f000 fd9d 	bl	8003d04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031ca:	f001 fffd 	bl	80051c8 <vPortEnterCritical>
 80031ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031d4:	b25b      	sxtb	r3, r3
 80031d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031da:	d103      	bne.n	80031e4 <xQueueReceive+0x128>
 80031dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031ea:	b25b      	sxtb	r3, r3
 80031ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f0:	d103      	bne.n	80031fa <xQueueReceive+0x13e>
 80031f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031fa:	f002 f817 	bl	800522c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031fe:	1d3a      	adds	r2, r7, #4
 8003200:	f107 0310 	add.w	r3, r7, #16
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f001 f81c 	bl	8004244 <xTaskCheckForTimeOut>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d123      	bne.n	800325a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003212:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003214:	f000 fa3e 	bl	8003694 <prvIsQueueEmpty>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d017      	beq.n	800324e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800321e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003220:	3324      	adds	r3, #36	@ 0x24
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	4611      	mov	r1, r2
 8003226:	4618      	mov	r0, r3
 8003228:	f000 ff40 	bl	80040ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800322c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800322e:	f000 f9df 	bl	80035f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003232:	f000 fd75 	bl	8003d20 <xTaskResumeAll>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d189      	bne.n	8003150 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800323c:	4b0f      	ldr	r3, [pc, #60]	@ (800327c <xQueueReceive+0x1c0>)
 800323e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	f3bf 8f4f 	dsb	sy
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	e780      	b.n	8003150 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800324e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003250:	f000 f9ce 	bl	80035f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003254:	f000 fd64 	bl	8003d20 <xTaskResumeAll>
 8003258:	e77a      	b.n	8003150 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800325a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800325c:	f000 f9c8 	bl	80035f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003260:	f000 fd5e 	bl	8003d20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003264:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003266:	f000 fa15 	bl	8003694 <prvIsQueueEmpty>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	f43f af6f 	beq.w	8003150 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003272:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003274:	4618      	mov	r0, r3
 8003276:	3730      	adds	r7, #48	@ 0x30
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	e000ed04 	.word	0xe000ed04

08003280 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08e      	sub	sp, #56	@ 0x38
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800328a:	2300      	movs	r3, #0
 800328c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003292:	2300      	movs	r3, #0
 8003294:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10b      	bne.n	80032b4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800329c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	623b      	str	r3, [r7, #32]
}
 80032ae:	bf00      	nop
 80032b0:	bf00      	nop
 80032b2:	e7fd      	b.n	80032b0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80032b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00b      	beq.n	80032d4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80032bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c0:	f383 8811 	msr	BASEPRI, r3
 80032c4:	f3bf 8f6f 	isb	sy
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	61fb      	str	r3, [r7, #28]
}
 80032ce:	bf00      	nop
 80032d0:	bf00      	nop
 80032d2:	e7fd      	b.n	80032d0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032d4:	f001 f90c 	bl	80044f0 <xTaskGetSchedulerState>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d102      	bne.n	80032e4 <xQueueSemaphoreTake+0x64>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <xQueueSemaphoreTake+0x68>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <xQueueSemaphoreTake+0x6a>
 80032e8:	2300      	movs	r3, #0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10b      	bne.n	8003306 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80032ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	61bb      	str	r3, [r7, #24]
}
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	e7fd      	b.n	8003302 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003306:	f001 ff5f 	bl	80051c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800330a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800330c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003312:	2b00      	cmp	r3, #0
 8003314:	d024      	beq.n	8003360 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003318:	1e5a      	subs	r2, r3, #1
 800331a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800331c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800331e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d104      	bne.n	8003330 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003326:	f001 fa5d 	bl	80047e4 <pvTaskIncrementMutexHeldCount>
 800332a:	4602      	mov	r2, r0
 800332c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800332e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00f      	beq.n	8003358 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800333a:	3310      	adds	r3, #16
 800333c:	4618      	mov	r0, r3
 800333e:	f000 ff07 	bl	8004150 <xTaskRemoveFromEventList>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d007      	beq.n	8003358 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003348:	4b54      	ldr	r3, [pc, #336]	@ (800349c <xQueueSemaphoreTake+0x21c>)
 800334a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003358:	f001 ff68 	bl	800522c <vPortExitCritical>
				return pdPASS;
 800335c:	2301      	movs	r3, #1
 800335e:	e098      	b.n	8003492 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d112      	bne.n	800338c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00b      	beq.n	8003384 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800336c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003370:	f383 8811 	msr	BASEPRI, r3
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	617b      	str	r3, [r7, #20]
}
 800337e:	bf00      	nop
 8003380:	bf00      	nop
 8003382:	e7fd      	b.n	8003380 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003384:	f001 ff52 	bl	800522c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003388:	2300      	movs	r3, #0
 800338a:	e082      	b.n	8003492 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800338c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003392:	f107 030c 	add.w	r3, r7, #12
 8003396:	4618      	mov	r0, r3
 8003398:	f000 ff3e 	bl	8004218 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800339c:	2301      	movs	r3, #1
 800339e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033a0:	f001 ff44 	bl	800522c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033a4:	f000 fcae 	bl	8003d04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033a8:	f001 ff0e 	bl	80051c8 <vPortEnterCritical>
 80033ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033b2:	b25b      	sxtb	r3, r3
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b8:	d103      	bne.n	80033c2 <xQueueSemaphoreTake+0x142>
 80033ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033c8:	b25b      	sxtb	r3, r3
 80033ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ce:	d103      	bne.n	80033d8 <xQueueSemaphoreTake+0x158>
 80033d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033d8:	f001 ff28 	bl	800522c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033dc:	463a      	mov	r2, r7
 80033de:	f107 030c 	add.w	r3, r7, #12
 80033e2:	4611      	mov	r1, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 ff2d 	bl	8004244 <xTaskCheckForTimeOut>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d132      	bne.n	8003456 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80033f2:	f000 f94f 	bl	8003694 <prvIsQueueEmpty>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d026      	beq.n	800344a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d109      	bne.n	8003418 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003404:	f001 fee0 	bl	80051c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	4618      	mov	r0, r3
 800340e:	f001 f88d 	bl	800452c <xTaskPriorityInherit>
 8003412:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003414:	f001 ff0a 	bl	800522c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800341a:	3324      	adds	r3, #36	@ 0x24
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	4611      	mov	r1, r2
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fe43 	bl	80040ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003426:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003428:	f000 f8e2 	bl	80035f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800342c:	f000 fc78 	bl	8003d20 <xTaskResumeAll>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	f47f af67 	bne.w	8003306 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003438:	4b18      	ldr	r3, [pc, #96]	@ (800349c <xQueueSemaphoreTake+0x21c>)
 800343a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	e75d      	b.n	8003306 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800344a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800344c:	f000 f8d0 	bl	80035f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003450:	f000 fc66 	bl	8003d20 <xTaskResumeAll>
 8003454:	e757      	b.n	8003306 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003456:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003458:	f000 f8ca 	bl	80035f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800345c:	f000 fc60 	bl	8003d20 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003460:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003462:	f000 f917 	bl	8003694 <prvIsQueueEmpty>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	f43f af4c 	beq.w	8003306 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800346e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00d      	beq.n	8003490 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003474:	f001 fea8 	bl	80051c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003478:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800347a:	f000 f811 	bl	80034a0 <prvGetDisinheritPriorityAfterTimeout>
 800347e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003486:	4618      	mov	r0, r3
 8003488:	f001 f928 	bl	80046dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800348c:	f001 fece 	bl	800522c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003490:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003492:	4618      	mov	r0, r3
 8003494:	3738      	adds	r7, #56	@ 0x38
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	e000ed04 	.word	0xe000ed04

080034a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d006      	beq.n	80034be <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	e001      	b.n	80034c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80034c2:	68fb      	ldr	r3, [r7, #12]
	}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10d      	bne.n	800350a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d14d      	bne.n	8003592 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f001 f87e 	bl	80045fc <xTaskPriorityDisinherit>
 8003500:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	e043      	b.n	8003592 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d119      	bne.n	8003544 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6858      	ldr	r0, [r3, #4]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003518:	461a      	mov	r2, r3
 800351a:	68b9      	ldr	r1, [r7, #8]
 800351c:	f002 f9b8 	bl	8005890 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003528:	441a      	add	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	429a      	cmp	r2, r3
 8003538:	d32b      	bcc.n	8003592 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	605a      	str	r2, [r3, #4]
 8003542:	e026      	b.n	8003592 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	68d8      	ldr	r0, [r3, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354c:	461a      	mov	r2, r3
 800354e:	68b9      	ldr	r1, [r7, #8]
 8003550:	f002 f99e 	bl	8005890 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355c:	425b      	negs	r3, r3
 800355e:	441a      	add	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d207      	bcs.n	8003580 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003578:	425b      	negs	r3, r3
 800357a:	441a      	add	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d105      	bne.n	8003592 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	3b01      	subs	r3, #1
 8003590:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800359a:	697b      	ldr	r3, [r7, #20]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d018      	beq.n	80035e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035be:	441a      	add	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d303      	bcc.n	80035d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68d9      	ldr	r1, [r3, #12]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e0:	461a      	mov	r2, r3
 80035e2:	6838      	ldr	r0, [r7, #0]
 80035e4:	f002 f954 	bl	8005890 <memcpy>
	}
}
 80035e8:	bf00      	nop
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80035f8:	f001 fde6 	bl	80051c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003602:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003604:	e011      	b.n	800362a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	2b00      	cmp	r3, #0
 800360c:	d012      	beq.n	8003634 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3324      	adds	r3, #36	@ 0x24
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fd9c 	bl	8004150 <xTaskRemoveFromEventList>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800361e:	f000 fe75 	bl	800430c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	3b01      	subs	r3, #1
 8003626:	b2db      	uxtb	r3, r3
 8003628:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800362a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800362e:	2b00      	cmp	r3, #0
 8003630:	dce9      	bgt.n	8003606 <prvUnlockQueue+0x16>
 8003632:	e000      	b.n	8003636 <prvUnlockQueue+0x46>
					break;
 8003634:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	22ff      	movs	r2, #255	@ 0xff
 800363a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800363e:	f001 fdf5 	bl	800522c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003642:	f001 fdc1 	bl	80051c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800364c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800364e:	e011      	b.n	8003674 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d012      	beq.n	800367e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3310      	adds	r3, #16
 800365c:	4618      	mov	r0, r3
 800365e:	f000 fd77 	bl	8004150 <xTaskRemoveFromEventList>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003668:	f000 fe50 	bl	800430c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800366c:	7bbb      	ldrb	r3, [r7, #14]
 800366e:	3b01      	subs	r3, #1
 8003670:	b2db      	uxtb	r3, r3
 8003672:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003674:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003678:	2b00      	cmp	r3, #0
 800367a:	dce9      	bgt.n	8003650 <prvUnlockQueue+0x60>
 800367c:	e000      	b.n	8003680 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800367e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	22ff      	movs	r2, #255	@ 0xff
 8003684:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003688:	f001 fdd0 	bl	800522c <vPortExitCritical>
}
 800368c:	bf00      	nop
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800369c:	f001 fd94 	bl	80051c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d102      	bne.n	80036ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80036a8:	2301      	movs	r3, #1
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	e001      	b.n	80036b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036b2:	f001 fdbb 	bl	800522c <vPortExitCritical>

	return xReturn;
 80036b6:	68fb      	ldr	r3, [r7, #12]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036c8:	f001 fd7e 	bl	80051c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d102      	bne.n	80036de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80036d8:	2301      	movs	r3, #1
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	e001      	b.n	80036e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036e2:	f001 fda3 	bl	800522c <vPortExitCritical>

	return xReturn;
 80036e6:	68fb      	ldr	r3, [r7, #12]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	e014      	b.n	800372a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003700:	4a0f      	ldr	r2, [pc, #60]	@ (8003740 <vQueueAddToRegistry+0x50>)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10b      	bne.n	8003724 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800370c:	490c      	ldr	r1, [pc, #48]	@ (8003740 <vQueueAddToRegistry+0x50>)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003716:	4a0a      	ldr	r2, [pc, #40]	@ (8003740 <vQueueAddToRegistry+0x50>)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4413      	add	r3, r2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003722:	e006      	b.n	8003732 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	3301      	adds	r3, #1
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2b07      	cmp	r3, #7
 800372e:	d9e7      	bls.n	8003700 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003730:	bf00      	nop
 8003732:	bf00      	nop
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	200007ac 	.word	0x200007ac

08003744 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003754:	f001 fd38 	bl	80051c8 <vPortEnterCritical>
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800375e:	b25b      	sxtb	r3, r3
 8003760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003764:	d103      	bne.n	800376e <vQueueWaitForMessageRestricted+0x2a>
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003774:	b25b      	sxtb	r3, r3
 8003776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377a:	d103      	bne.n	8003784 <vQueueWaitForMessageRestricted+0x40>
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003784:	f001 fd52 	bl	800522c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378c:	2b00      	cmp	r3, #0
 800378e:	d106      	bne.n	800379e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	3324      	adds	r3, #36	@ 0x24
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fcad 	bl	80040f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800379e:	6978      	ldr	r0, [r7, #20]
 80037a0:	f7ff ff26 	bl	80035f0 <prvUnlockQueue>
	}
 80037a4:	bf00      	nop
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08e      	sub	sp, #56	@ 0x38
 80037b0:	af04      	add	r7, sp, #16
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80037ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10b      	bne.n	80037d8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80037c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c4:	f383 8811 	msr	BASEPRI, r3
 80037c8:	f3bf 8f6f 	isb	sy
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	623b      	str	r3, [r7, #32]
}
 80037d2:	bf00      	nop
 80037d4:	bf00      	nop
 80037d6:	e7fd      	b.n	80037d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80037d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10b      	bne.n	80037f6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80037de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	61fb      	str	r3, [r7, #28]
}
 80037f0:	bf00      	nop
 80037f2:	bf00      	nop
 80037f4:	e7fd      	b.n	80037f2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80037f6:	235c      	movs	r3, #92	@ 0x5c
 80037f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	2b5c      	cmp	r3, #92	@ 0x5c
 80037fe:	d00b      	beq.n	8003818 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	61bb      	str	r3, [r7, #24]
}
 8003812:	bf00      	nop
 8003814:	bf00      	nop
 8003816:	e7fd      	b.n	8003814 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003818:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800381a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01e      	beq.n	800385e <xTaskCreateStatic+0xb2>
 8003820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003822:	2b00      	cmp	r3, #0
 8003824:	d01b      	beq.n	800385e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003828:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800382a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800382e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003832:	2202      	movs	r2, #2
 8003834:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003838:	2300      	movs	r3, #0
 800383a:	9303      	str	r3, [sp, #12]
 800383c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383e:	9302      	str	r3, [sp, #8]
 8003840:	f107 0314 	add.w	r3, r7, #20
 8003844:	9301      	str	r3, [sp, #4]
 8003846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	68b9      	ldr	r1, [r7, #8]
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 f850 	bl	80038f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003856:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003858:	f000 f8de 	bl	8003a18 <prvAddNewTaskToReadyList>
 800385c:	e001      	b.n	8003862 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003862:	697b      	ldr	r3, [r7, #20]
	}
 8003864:	4618      	mov	r0, r3
 8003866:	3728      	adds	r7, #40	@ 0x28
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08c      	sub	sp, #48	@ 0x30
 8003870:	af04      	add	r7, sp, #16
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	4613      	mov	r3, r2
 800387a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4618      	mov	r0, r3
 8003882:	f001 fdc3 	bl	800540c <pvPortMalloc>
 8003886:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00e      	beq.n	80038ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800388e:	205c      	movs	r0, #92	@ 0x5c
 8003890:	f001 fdbc 	bl	800540c <pvPortMalloc>
 8003894:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80038a2:	e005      	b.n	80038b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80038a4:	6978      	ldr	r0, [r7, #20]
 80038a6:	f001 fe7f 	bl	80055a8 <vPortFree>
 80038aa:	e001      	b.n	80038b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038ac:	2300      	movs	r3, #0
 80038ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d017      	beq.n	80038e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038be:	88fa      	ldrh	r2, [r7, #6]
 80038c0:	2300      	movs	r3, #0
 80038c2:	9303      	str	r3, [sp, #12]
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	9302      	str	r3, [sp, #8]
 80038c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ca:	9301      	str	r3, [sp, #4]
 80038cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	68b9      	ldr	r1, [r7, #8]
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f80e 	bl	80038f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038da:	69f8      	ldr	r0, [r7, #28]
 80038dc:	f000 f89c 	bl	8003a18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038e0:	2301      	movs	r3, #1
 80038e2:	61bb      	str	r3, [r7, #24]
 80038e4:	e002      	b.n	80038ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038e6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038ec:	69bb      	ldr	r3, [r7, #24]
	}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3720      	adds	r7, #32
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b088      	sub	sp, #32
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	607a      	str	r2, [r7, #4]
 8003902:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003906:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	461a      	mov	r2, r3
 800390e:	21a5      	movs	r1, #165	@ 0xa5
 8003910:	f001 ff8a 	bl	8005828 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003916:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800391e:	3b01      	subs	r3, #1
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	f023 0307 	bic.w	r3, r3, #7
 800392c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00b      	beq.n	8003950 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	617b      	str	r3, [r7, #20]
}
 800394a:	bf00      	nop
 800394c:	bf00      	nop
 800394e:	e7fd      	b.n	800394c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d01f      	beq.n	8003996 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	e012      	b.n	8003982 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	4413      	add	r3, r2
 8003962:	7819      	ldrb	r1, [r3, #0]
 8003964:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	4413      	add	r3, r2
 800396a:	3334      	adds	r3, #52	@ 0x34
 800396c:	460a      	mov	r2, r1
 800396e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	4413      	add	r3, r2
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d006      	beq.n	800398a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	3301      	adds	r3, #1
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	2b0f      	cmp	r3, #15
 8003986:	d9e9      	bls.n	800395c <prvInitialiseNewTask+0x66>
 8003988:	e000      	b.n	800398c <prvInitialiseNewTask+0x96>
			{
				break;
 800398a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800398c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003994:	e003      	b.n	800399e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800399e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a0:	2b37      	cmp	r3, #55	@ 0x37
 80039a2:	d901      	bls.n	80039a8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039a4:	2337      	movs	r3, #55	@ 0x37
 80039a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039ac:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039b2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80039b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b6:	2200      	movs	r2, #0
 80039b8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039bc:	3304      	adds	r3, #4
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fe ff4a 	bl	8002858 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c6:	3318      	adds	r3, #24
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fe ff45 	bl	8002858 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80039da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80039de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039e2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80039e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e6:	2200      	movs	r2, #0
 80039e8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	68f9      	ldr	r1, [r7, #12]
 80039f6:	69b8      	ldr	r0, [r7, #24]
 80039f8:	f001 fab6 	bl	8004f68 <pxPortInitialiseStack>
 80039fc:	4602      	mov	r2, r0
 80039fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a0e:	bf00      	nop
 8003a10:	3720      	adds	r7, #32
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a20:	f001 fbd2 	bl	80051c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a24:	4b2d      	ldr	r3, [pc, #180]	@ (8003adc <prvAddNewTaskToReadyList+0xc4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	4a2c      	ldr	r2, [pc, #176]	@ (8003adc <prvAddNewTaskToReadyList+0xc4>)
 8003a2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a2e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ae0 <prvAddNewTaskToReadyList+0xc8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d109      	bne.n	8003a4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a36:	4a2a      	ldr	r2, [pc, #168]	@ (8003ae0 <prvAddNewTaskToReadyList+0xc8>)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a3c:	4b27      	ldr	r3, [pc, #156]	@ (8003adc <prvAddNewTaskToReadyList+0xc4>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d110      	bne.n	8003a66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a44:	f000 fc86 	bl	8004354 <prvInitialiseTaskLists>
 8003a48:	e00d      	b.n	8003a66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a4a:	4b26      	ldr	r3, [pc, #152]	@ (8003ae4 <prvAddNewTaskToReadyList+0xcc>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d109      	bne.n	8003a66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a52:	4b23      	ldr	r3, [pc, #140]	@ (8003ae0 <prvAddNewTaskToReadyList+0xc8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d802      	bhi.n	8003a66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a60:	4a1f      	ldr	r2, [pc, #124]	@ (8003ae0 <prvAddNewTaskToReadyList+0xc8>)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a66:	4b20      	ldr	r3, [pc, #128]	@ (8003ae8 <prvAddNewTaskToReadyList+0xd0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ae8 <prvAddNewTaskToReadyList+0xd0>)
 8003a6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a70:	4b1d      	ldr	r3, [pc, #116]	@ (8003ae8 <prvAddNewTaskToReadyList+0xd0>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8003aec <prvAddNewTaskToReadyList+0xd4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d903      	bls.n	8003a8c <prvAddNewTaskToReadyList+0x74>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a88:	4a18      	ldr	r2, [pc, #96]	@ (8003aec <prvAddNewTaskToReadyList+0xd4>)
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4a15      	ldr	r2, [pc, #84]	@ (8003af0 <prvAddNewTaskToReadyList+0xd8>)
 8003a9a:	441a      	add	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4610      	mov	r0, r2
 8003aa4:	f7fe fee5 	bl	8002872 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003aa8:	f001 fbc0 	bl	800522c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003aac:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae4 <prvAddNewTaskToReadyList+0xcc>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00e      	beq.n	8003ad2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae0 <prvAddNewTaskToReadyList+0xc8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d207      	bcs.n	8003ad2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8003af4 <prvAddNewTaskToReadyList+0xdc>)
 8003ac4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000cc0 	.word	0x20000cc0
 8003ae0:	200007ec 	.word	0x200007ec
 8003ae4:	20000ccc 	.word	0x20000ccc
 8003ae8:	20000cdc 	.word	0x20000cdc
 8003aec:	20000cc8 	.word	0x20000cc8
 8003af0:	200007f0 	.word	0x200007f0
 8003af4:	e000ed04 	.word	0xe000ed04

08003af8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d018      	beq.n	8003b3c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b0a:	4b14      	ldr	r3, [pc, #80]	@ (8003b5c <vTaskDelay+0x64>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00b      	beq.n	8003b2a <vTaskDelay+0x32>
	__asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	60bb      	str	r3, [r7, #8]
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
 8003b28:	e7fd      	b.n	8003b26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b2a:	f000 f8eb 	bl	8003d04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b2e:	2100      	movs	r1, #0
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 fe6b 	bl	800480c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b36:	f000 f8f3 	bl	8003d20 <xTaskResumeAll>
 8003b3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d107      	bne.n	8003b52 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003b42:	4b07      	ldr	r3, [pc, #28]	@ (8003b60 <vTaskDelay+0x68>)
 8003b44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b52:	bf00      	nop
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000ce8 	.word	0x20000ce8
 8003b60:	e000ed04 	.word	0xe000ed04

08003b64 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10b      	bne.n	8003b8e <eTaskGetState+0x2a>
	__asm volatile
 8003b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b7a:	f383 8811 	msr	BASEPRI, r3
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	60bb      	str	r3, [r7, #8]
}
 8003b88:	bf00      	nop
 8003b8a:	bf00      	nop
 8003b8c:	e7fd      	b.n	8003b8a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8003b8e:	4b24      	ldr	r3, [pc, #144]	@ (8003c20 <eTaskGetState+0xbc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d102      	bne.n	8003b9e <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	77fb      	strb	r3, [r7, #31]
 8003b9c:	e03a      	b.n	8003c14 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8003b9e:	f001 fb13 	bl	80051c8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8003ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8003c24 <eTaskGetState+0xc0>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8003bae:	4b1e      	ldr	r3, [pc, #120]	@ (8003c28 <eTaskGetState+0xc4>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8003bb4:	f001 fb3a 	bl	800522c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d003      	beq.n	8003bc8 <eTaskGetState+0x64>
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d102      	bne.n	8003bce <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	77fb      	strb	r3, [r7, #31]
 8003bcc:	e022      	b.n	8003c14 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	4a16      	ldr	r2, [pc, #88]	@ (8003c2c <eTaskGetState+0xc8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d112      	bne.n	8003bfc <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10b      	bne.n	8003bf6 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d102      	bne.n	8003bf0 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8003bea:	2302      	movs	r3, #2
 8003bec:	77fb      	strb	r3, [r7, #31]
 8003bee:	e011      	b.n	8003c14 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	77fb      	strb	r3, [r7, #31]
 8003bf4:	e00e      	b.n	8003c14 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	77fb      	strb	r3, [r7, #31]
 8003bfa:	e00b      	b.n	8003c14 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8003c30 <eTaskGetState+0xcc>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d002      	beq.n	8003c0a <eTaskGetState+0xa6>
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d102      	bne.n	8003c10 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8003c0a:	2304      	movs	r3, #4
 8003c0c:	77fb      	strb	r3, [r7, #31]
 8003c0e:	e001      	b.n	8003c14 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8003c10:	2301      	movs	r3, #1
 8003c12:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8003c14:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003c16:	4618      	mov	r0, r3
 8003c18:	3720      	adds	r7, #32
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	200007ec 	.word	0x200007ec
 8003c24:	20000c78 	.word	0x20000c78
 8003c28:	20000c7c 	.word	0x20000c7c
 8003c2c:	20000cac 	.word	0x20000cac
 8003c30:	20000c94 	.word	0x20000c94

08003c34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08a      	sub	sp, #40	@ 0x28
 8003c38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c42:	463a      	mov	r2, r7
 8003c44:	1d39      	adds	r1, r7, #4
 8003c46:	f107 0308 	add.w	r3, r7, #8
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fe fdb0 	bl	80027b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c50:	6839      	ldr	r1, [r7, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	9202      	str	r2, [sp, #8]
 8003c58:	9301      	str	r3, [sp, #4]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	460a      	mov	r2, r1
 8003c62:	4922      	ldr	r1, [pc, #136]	@ (8003cec <vTaskStartScheduler+0xb8>)
 8003c64:	4822      	ldr	r0, [pc, #136]	@ (8003cf0 <vTaskStartScheduler+0xbc>)
 8003c66:	f7ff fda1 	bl	80037ac <xTaskCreateStatic>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	4a21      	ldr	r2, [pc, #132]	@ (8003cf4 <vTaskStartScheduler+0xc0>)
 8003c6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c70:	4b20      	ldr	r3, [pc, #128]	@ (8003cf4 <vTaskStartScheduler+0xc0>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e001      	b.n	8003c82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d102      	bne.n	8003c8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c88:	f000 fe14 	bl	80048b4 <xTimerCreateTimerTask>
 8003c8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d116      	bne.n	8003cc2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	613b      	str	r3, [r7, #16]
}
 8003ca6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ca8:	4b13      	ldr	r3, [pc, #76]	@ (8003cf8 <vTaskStartScheduler+0xc4>)
 8003caa:	f04f 32ff 	mov.w	r2, #4294967295
 8003cae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003cb0:	4b12      	ldr	r3, [pc, #72]	@ (8003cfc <vTaskStartScheduler+0xc8>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003cb6:	4b12      	ldr	r3, [pc, #72]	@ (8003d00 <vTaskStartScheduler+0xcc>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003cbc:	f001 f9e0 	bl	8005080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003cc0:	e00f      	b.n	8003ce2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc8:	d10b      	bne.n	8003ce2 <vTaskStartScheduler+0xae>
	__asm volatile
 8003cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	60fb      	str	r3, [r7, #12]
}
 8003cdc:	bf00      	nop
 8003cde:	bf00      	nop
 8003ce0:	e7fd      	b.n	8003cde <vTaskStartScheduler+0xaa>
}
 8003ce2:	bf00      	nop
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	080061c4 	.word	0x080061c4
 8003cf0:	08004325 	.word	0x08004325
 8003cf4:	20000ce4 	.word	0x20000ce4
 8003cf8:	20000ce0 	.word	0x20000ce0
 8003cfc:	20000ccc 	.word	0x20000ccc
 8003d00:	20000cc4 	.word	0x20000cc4

08003d04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003d08:	4b04      	ldr	r3, [pc, #16]	@ (8003d1c <vTaskSuspendAll+0x18>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	4a03      	ldr	r2, [pc, #12]	@ (8003d1c <vTaskSuspendAll+0x18>)
 8003d10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003d12:	bf00      	nop
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	20000ce8 	.word	0x20000ce8

08003d20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d2e:	4b42      	ldr	r3, [pc, #264]	@ (8003e38 <xTaskResumeAll+0x118>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10b      	bne.n	8003d4e <xTaskResumeAll+0x2e>
	__asm volatile
 8003d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	603b      	str	r3, [r7, #0]
}
 8003d48:	bf00      	nop
 8003d4a:	bf00      	nop
 8003d4c:	e7fd      	b.n	8003d4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d4e:	f001 fa3b 	bl	80051c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d52:	4b39      	ldr	r3, [pc, #228]	@ (8003e38 <xTaskResumeAll+0x118>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	4a37      	ldr	r2, [pc, #220]	@ (8003e38 <xTaskResumeAll+0x118>)
 8003d5a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d5c:	4b36      	ldr	r3, [pc, #216]	@ (8003e38 <xTaskResumeAll+0x118>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d162      	bne.n	8003e2a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d64:	4b35      	ldr	r3, [pc, #212]	@ (8003e3c <xTaskResumeAll+0x11c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d05e      	beq.n	8003e2a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d6c:	e02f      	b.n	8003dce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d6e:	4b34      	ldr	r3, [pc, #208]	@ (8003e40 <xTaskResumeAll+0x120>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	3318      	adds	r3, #24
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe fdd6 	bl	800292c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	3304      	adds	r3, #4
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fe fdd1 	bl	800292c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d8e:	4b2d      	ldr	r3, [pc, #180]	@ (8003e44 <xTaskResumeAll+0x124>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d903      	bls.n	8003d9e <xTaskResumeAll+0x7e>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9a:	4a2a      	ldr	r2, [pc, #168]	@ (8003e44 <xTaskResumeAll+0x124>)
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003da2:	4613      	mov	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4a27      	ldr	r2, [pc, #156]	@ (8003e48 <xTaskResumeAll+0x128>)
 8003dac:	441a      	add	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3304      	adds	r3, #4
 8003db2:	4619      	mov	r1, r3
 8003db4:	4610      	mov	r0, r2
 8003db6:	f7fe fd5c 	bl	8002872 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dbe:	4b23      	ldr	r3, [pc, #140]	@ (8003e4c <xTaskResumeAll+0x12c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d302      	bcc.n	8003dce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003dc8:	4b21      	ldr	r3, [pc, #132]	@ (8003e50 <xTaskResumeAll+0x130>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dce:	4b1c      	ldr	r3, [pc, #112]	@ (8003e40 <xTaskResumeAll+0x120>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1cb      	bne.n	8003d6e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ddc:	f000 fb58 	bl	8004490 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003de0:	4b1c      	ldr	r3, [pc, #112]	@ (8003e54 <xTaskResumeAll+0x134>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d010      	beq.n	8003e0e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003dec:	f000 f846 	bl	8003e7c <xTaskIncrementTick>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003df6:	4b16      	ldr	r3, [pc, #88]	@ (8003e50 <xTaskResumeAll+0x130>)
 8003df8:	2201      	movs	r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1f1      	bne.n	8003dec <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003e08:	4b12      	ldr	r3, [pc, #72]	@ (8003e54 <xTaskResumeAll+0x134>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e0e:	4b10      	ldr	r3, [pc, #64]	@ (8003e50 <xTaskResumeAll+0x130>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d009      	beq.n	8003e2a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e16:	2301      	movs	r3, #1
 8003e18:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8003e58 <xTaskResumeAll+0x138>)
 8003e1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e2a:	f001 f9ff 	bl	800522c <vPortExitCritical>

	return xAlreadyYielded;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	20000ce8 	.word	0x20000ce8
 8003e3c:	20000cc0 	.word	0x20000cc0
 8003e40:	20000c80 	.word	0x20000c80
 8003e44:	20000cc8 	.word	0x20000cc8
 8003e48:	200007f0 	.word	0x200007f0
 8003e4c:	200007ec 	.word	0x200007ec
 8003e50:	20000cd4 	.word	0x20000cd4
 8003e54:	20000cd0 	.word	0x20000cd0
 8003e58:	e000ed04 	.word	0xe000ed04

08003e5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e62:	4b05      	ldr	r3, [pc, #20]	@ (8003e78 <xTaskGetTickCount+0x1c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e68:	687b      	ldr	r3, [r7, #4]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	20000cc4 	.word	0x20000cc4

08003e7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e86:	4b4f      	ldr	r3, [pc, #316]	@ (8003fc4 <xTaskIncrementTick+0x148>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f040 8090 	bne.w	8003fb0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e90:	4b4d      	ldr	r3, [pc, #308]	@ (8003fc8 <xTaskIncrementTick+0x14c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3301      	adds	r3, #1
 8003e96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e98:	4a4b      	ldr	r2, [pc, #300]	@ (8003fc8 <xTaskIncrementTick+0x14c>)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d121      	bne.n	8003ee8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ea4:	4b49      	ldr	r3, [pc, #292]	@ (8003fcc <xTaskIncrementTick+0x150>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00b      	beq.n	8003ec6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	603b      	str	r3, [r7, #0]
}
 8003ec0:	bf00      	nop
 8003ec2:	bf00      	nop
 8003ec4:	e7fd      	b.n	8003ec2 <xTaskIncrementTick+0x46>
 8003ec6:	4b41      	ldr	r3, [pc, #260]	@ (8003fcc <xTaskIncrementTick+0x150>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	4b40      	ldr	r3, [pc, #256]	@ (8003fd0 <xTaskIncrementTick+0x154>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a3e      	ldr	r2, [pc, #248]	@ (8003fcc <xTaskIncrementTick+0x150>)
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	4a3e      	ldr	r2, [pc, #248]	@ (8003fd0 <xTaskIncrementTick+0x154>)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	4b3e      	ldr	r3, [pc, #248]	@ (8003fd4 <xTaskIncrementTick+0x158>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	4a3c      	ldr	r2, [pc, #240]	@ (8003fd4 <xTaskIncrementTick+0x158>)
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	f000 fad4 	bl	8004490 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ee8:	4b3b      	ldr	r3, [pc, #236]	@ (8003fd8 <xTaskIncrementTick+0x15c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d349      	bcc.n	8003f86 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ef2:	4b36      	ldr	r3, [pc, #216]	@ (8003fcc <xTaskIncrementTick+0x150>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d104      	bne.n	8003f06 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003efc:	4b36      	ldr	r3, [pc, #216]	@ (8003fd8 <xTaskIncrementTick+0x15c>)
 8003efe:	f04f 32ff 	mov.w	r2, #4294967295
 8003f02:	601a      	str	r2, [r3, #0]
					break;
 8003f04:	e03f      	b.n	8003f86 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f06:	4b31      	ldr	r3, [pc, #196]	@ (8003fcc <xTaskIncrementTick+0x150>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d203      	bcs.n	8003f26 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f1e:	4a2e      	ldr	r2, [pc, #184]	@ (8003fd8 <xTaskIncrementTick+0x15c>)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f24:	e02f      	b.n	8003f86 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	3304      	adds	r3, #4
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fe fcfe 	bl	800292c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d004      	beq.n	8003f42 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	3318      	adds	r3, #24
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fe fcf5 	bl	800292c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f46:	4b25      	ldr	r3, [pc, #148]	@ (8003fdc <xTaskIncrementTick+0x160>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d903      	bls.n	8003f56 <xTaskIncrementTick+0xda>
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	4a22      	ldr	r2, [pc, #136]	@ (8003fdc <xTaskIncrementTick+0x160>)
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4a1f      	ldr	r2, [pc, #124]	@ (8003fe0 <xTaskIncrementTick+0x164>)
 8003f64:	441a      	add	r2, r3
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	f7fe fc80 	bl	8002872 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f76:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe4 <xTaskIncrementTick+0x168>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d3b8      	bcc.n	8003ef2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003f80:	2301      	movs	r3, #1
 8003f82:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f84:	e7b5      	b.n	8003ef2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f86:	4b17      	ldr	r3, [pc, #92]	@ (8003fe4 <xTaskIncrementTick+0x168>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f8c:	4914      	ldr	r1, [pc, #80]	@ (8003fe0 <xTaskIncrementTick+0x164>)
 8003f8e:	4613      	mov	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d901      	bls.n	8003fa2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003fa2:	4b11      	ldr	r3, [pc, #68]	@ (8003fe8 <xTaskIncrementTick+0x16c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d007      	beq.n	8003fba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003faa:	2301      	movs	r3, #1
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	e004      	b.n	8003fba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8003fec <xTaskIncrementTick+0x170>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	4a0d      	ldr	r2, [pc, #52]	@ (8003fec <xTaskIncrementTick+0x170>)
 8003fb8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003fba:	697b      	ldr	r3, [r7, #20]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	20000ce8 	.word	0x20000ce8
 8003fc8:	20000cc4 	.word	0x20000cc4
 8003fcc:	20000c78 	.word	0x20000c78
 8003fd0:	20000c7c 	.word	0x20000c7c
 8003fd4:	20000cd8 	.word	0x20000cd8
 8003fd8:	20000ce0 	.word	0x20000ce0
 8003fdc:	20000cc8 	.word	0x20000cc8
 8003fe0:	200007f0 	.word	0x200007f0
 8003fe4:	200007ec 	.word	0x200007ec
 8003fe8:	20000cd4 	.word	0x20000cd4
 8003fec:	20000cd0 	.word	0x20000cd0

08003ff0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ff6:	4b28      	ldr	r3, [pc, #160]	@ (8004098 <vTaskSwitchContext+0xa8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ffe:	4b27      	ldr	r3, [pc, #156]	@ (800409c <vTaskSwitchContext+0xac>)
 8004000:	2201      	movs	r2, #1
 8004002:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004004:	e042      	b.n	800408c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004006:	4b25      	ldr	r3, [pc, #148]	@ (800409c <vTaskSwitchContext+0xac>)
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800400c:	4b24      	ldr	r3, [pc, #144]	@ (80040a0 <vTaskSwitchContext+0xb0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	e011      	b.n	8004038 <vTaskSwitchContext+0x48>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10b      	bne.n	8004032 <vTaskSwitchContext+0x42>
	__asm volatile
 800401a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800401e:	f383 8811 	msr	BASEPRI, r3
 8004022:	f3bf 8f6f 	isb	sy
 8004026:	f3bf 8f4f 	dsb	sy
 800402a:	607b      	str	r3, [r7, #4]
}
 800402c:	bf00      	nop
 800402e:	bf00      	nop
 8004030:	e7fd      	b.n	800402e <vTaskSwitchContext+0x3e>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3b01      	subs	r3, #1
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	491a      	ldr	r1, [pc, #104]	@ (80040a4 <vTaskSwitchContext+0xb4>)
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4613      	mov	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0e3      	beq.n	8004014 <vTaskSwitchContext+0x24>
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	4613      	mov	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4a13      	ldr	r2, [pc, #76]	@ (80040a4 <vTaskSwitchContext+0xb4>)
 8004058:	4413      	add	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	3308      	adds	r3, #8
 800406e:	429a      	cmp	r2, r3
 8004070:	d104      	bne.n	800407c <vTaskSwitchContext+0x8c>
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	605a      	str	r2, [r3, #4]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	4a09      	ldr	r2, [pc, #36]	@ (80040a8 <vTaskSwitchContext+0xb8>)
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	4a06      	ldr	r2, [pc, #24]	@ (80040a0 <vTaskSwitchContext+0xb0>)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6013      	str	r3, [r2, #0]
}
 800408c:	bf00      	nop
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	20000ce8 	.word	0x20000ce8
 800409c:	20000cd4 	.word	0x20000cd4
 80040a0:	20000cc8 	.word	0x20000cc8
 80040a4:	200007f0 	.word	0x200007f0
 80040a8:	200007ec 	.word	0x200007ec

080040ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10b      	bne.n	80040d4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80040bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	60fb      	str	r3, [r7, #12]
}
 80040ce:	bf00      	nop
 80040d0:	bf00      	nop
 80040d2:	e7fd      	b.n	80040d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040d4:	4b07      	ldr	r3, [pc, #28]	@ (80040f4 <vTaskPlaceOnEventList+0x48>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3318      	adds	r3, #24
 80040da:	4619      	mov	r1, r3
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7fe fbec 	bl	80028ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040e2:	2101      	movs	r1, #1
 80040e4:	6838      	ldr	r0, [r7, #0]
 80040e6:	f000 fb91 	bl	800480c <prvAddCurrentTaskToDelayedList>
}
 80040ea:	bf00      	nop
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	200007ec 	.word	0x200007ec

080040f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10b      	bne.n	8004122 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800410a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	617b      	str	r3, [r7, #20]
}
 800411c:	bf00      	nop
 800411e:	bf00      	nop
 8004120:	e7fd      	b.n	800411e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004122:	4b0a      	ldr	r3, [pc, #40]	@ (800414c <vTaskPlaceOnEventListRestricted+0x54>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3318      	adds	r3, #24
 8004128:	4619      	mov	r1, r3
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f7fe fba1 	bl	8002872 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004136:	f04f 33ff 	mov.w	r3, #4294967295
 800413a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	68b8      	ldr	r0, [r7, #8]
 8004140:	f000 fb64 	bl	800480c <prvAddCurrentTaskToDelayedList>
	}
 8004144:	bf00      	nop
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	200007ec 	.word	0x200007ec

08004150 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10b      	bne.n	800417e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	60fb      	str	r3, [r7, #12]
}
 8004178:	bf00      	nop
 800417a:	bf00      	nop
 800417c:	e7fd      	b.n	800417a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	3318      	adds	r3, #24
 8004182:	4618      	mov	r0, r3
 8004184:	f7fe fbd2 	bl	800292c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004188:	4b1d      	ldr	r3, [pc, #116]	@ (8004200 <xTaskRemoveFromEventList+0xb0>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d11d      	bne.n	80041cc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	3304      	adds	r3, #4
 8004194:	4618      	mov	r0, r3
 8004196:	f7fe fbc9 	bl	800292c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800419e:	4b19      	ldr	r3, [pc, #100]	@ (8004204 <xTaskRemoveFromEventList+0xb4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d903      	bls.n	80041ae <xTaskRemoveFromEventList+0x5e>
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041aa:	4a16      	ldr	r2, [pc, #88]	@ (8004204 <xTaskRemoveFromEventList+0xb4>)
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4a13      	ldr	r2, [pc, #76]	@ (8004208 <xTaskRemoveFromEventList+0xb8>)
 80041bc:	441a      	add	r2, r3
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	3304      	adds	r3, #4
 80041c2:	4619      	mov	r1, r3
 80041c4:	4610      	mov	r0, r2
 80041c6:	f7fe fb54 	bl	8002872 <vListInsertEnd>
 80041ca:	e005      	b.n	80041d8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	3318      	adds	r3, #24
 80041d0:	4619      	mov	r1, r3
 80041d2:	480e      	ldr	r0, [pc, #56]	@ (800420c <xTaskRemoveFromEventList+0xbc>)
 80041d4:	f7fe fb4d 	bl	8002872 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004210 <xTaskRemoveFromEventList+0xc0>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d905      	bls.n	80041f2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80041e6:	2301      	movs	r3, #1
 80041e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80041ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004214 <xTaskRemoveFromEventList+0xc4>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	e001      	b.n	80041f6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80041f6:	697b      	ldr	r3, [r7, #20]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20000ce8 	.word	0x20000ce8
 8004204:	20000cc8 	.word	0x20000cc8
 8004208:	200007f0 	.word	0x200007f0
 800420c:	20000c80 	.word	0x20000c80
 8004210:	200007ec 	.word	0x200007ec
 8004214:	20000cd4 	.word	0x20000cd4

08004218 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004220:	4b06      	ldr	r3, [pc, #24]	@ (800423c <vTaskInternalSetTimeOutState+0x24>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004228:	4b05      	ldr	r3, [pc, #20]	@ (8004240 <vTaskInternalSetTimeOutState+0x28>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	605a      	str	r2, [r3, #4]
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	20000cd8 	.word	0x20000cd8
 8004240:	20000cc4 	.word	0x20000cc4

08004244 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10b      	bne.n	800426c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004258:	f383 8811 	msr	BASEPRI, r3
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	613b      	str	r3, [r7, #16]
}
 8004266:	bf00      	nop
 8004268:	bf00      	nop
 800426a:	e7fd      	b.n	8004268 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10b      	bne.n	800428a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	60fb      	str	r3, [r7, #12]
}
 8004284:	bf00      	nop
 8004286:	bf00      	nop
 8004288:	e7fd      	b.n	8004286 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800428a:	f000 ff9d 	bl	80051c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800428e:	4b1d      	ldr	r3, [pc, #116]	@ (8004304 <xTaskCheckForTimeOut+0xc0>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a6:	d102      	bne.n	80042ae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80042a8:	2300      	movs	r3, #0
 80042aa:	61fb      	str	r3, [r7, #28]
 80042ac:	e023      	b.n	80042f6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	4b15      	ldr	r3, [pc, #84]	@ (8004308 <xTaskCheckForTimeOut+0xc4>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d007      	beq.n	80042ca <xTaskCheckForTimeOut+0x86>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d302      	bcc.n	80042ca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80042c4:	2301      	movs	r3, #1
 80042c6:	61fb      	str	r3, [r7, #28]
 80042c8:	e015      	b.n	80042f6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d20b      	bcs.n	80042ec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	1ad2      	subs	r2, r2, r3
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff ff99 	bl	8004218 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80042e6:	2300      	movs	r3, #0
 80042e8:	61fb      	str	r3, [r7, #28]
 80042ea:	e004      	b.n	80042f6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80042f2:	2301      	movs	r3, #1
 80042f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80042f6:	f000 ff99 	bl	800522c <vPortExitCritical>

	return xReturn;
 80042fa:	69fb      	ldr	r3, [r7, #28]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3720      	adds	r7, #32
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	20000cc4 	.word	0x20000cc4
 8004308:	20000cd8 	.word	0x20000cd8

0800430c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004310:	4b03      	ldr	r3, [pc, #12]	@ (8004320 <vTaskMissedYield+0x14>)
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]
}
 8004316:	bf00      	nop
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	20000cd4 	.word	0x20000cd4

08004324 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800432c:	f000 f852 	bl	80043d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004330:	4b06      	ldr	r3, [pc, #24]	@ (800434c <prvIdleTask+0x28>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d9f9      	bls.n	800432c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004338:	4b05      	ldr	r3, [pc, #20]	@ (8004350 <prvIdleTask+0x2c>)
 800433a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004348:	e7f0      	b.n	800432c <prvIdleTask+0x8>
 800434a:	bf00      	nop
 800434c:	200007f0 	.word	0x200007f0
 8004350:	e000ed04 	.word	0xe000ed04

08004354 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800435a:	2300      	movs	r3, #0
 800435c:	607b      	str	r3, [r7, #4]
 800435e:	e00c      	b.n	800437a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4a12      	ldr	r2, [pc, #72]	@ (80043b4 <prvInitialiseTaskLists+0x60>)
 800436c:	4413      	add	r3, r2
 800436e:	4618      	mov	r0, r3
 8004370:	f7fe fa52 	bl	8002818 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3301      	adds	r3, #1
 8004378:	607b      	str	r3, [r7, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b37      	cmp	r3, #55	@ 0x37
 800437e:	d9ef      	bls.n	8004360 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004380:	480d      	ldr	r0, [pc, #52]	@ (80043b8 <prvInitialiseTaskLists+0x64>)
 8004382:	f7fe fa49 	bl	8002818 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004386:	480d      	ldr	r0, [pc, #52]	@ (80043bc <prvInitialiseTaskLists+0x68>)
 8004388:	f7fe fa46 	bl	8002818 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800438c:	480c      	ldr	r0, [pc, #48]	@ (80043c0 <prvInitialiseTaskLists+0x6c>)
 800438e:	f7fe fa43 	bl	8002818 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004392:	480c      	ldr	r0, [pc, #48]	@ (80043c4 <prvInitialiseTaskLists+0x70>)
 8004394:	f7fe fa40 	bl	8002818 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004398:	480b      	ldr	r0, [pc, #44]	@ (80043c8 <prvInitialiseTaskLists+0x74>)
 800439a:	f7fe fa3d 	bl	8002818 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800439e:	4b0b      	ldr	r3, [pc, #44]	@ (80043cc <prvInitialiseTaskLists+0x78>)
 80043a0:	4a05      	ldr	r2, [pc, #20]	@ (80043b8 <prvInitialiseTaskLists+0x64>)
 80043a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043a4:	4b0a      	ldr	r3, [pc, #40]	@ (80043d0 <prvInitialiseTaskLists+0x7c>)
 80043a6:	4a05      	ldr	r2, [pc, #20]	@ (80043bc <prvInitialiseTaskLists+0x68>)
 80043a8:	601a      	str	r2, [r3, #0]
}
 80043aa:	bf00      	nop
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	200007f0 	.word	0x200007f0
 80043b8:	20000c50 	.word	0x20000c50
 80043bc:	20000c64 	.word	0x20000c64
 80043c0:	20000c80 	.word	0x20000c80
 80043c4:	20000c94 	.word	0x20000c94
 80043c8:	20000cac 	.word	0x20000cac
 80043cc:	20000c78 	.word	0x20000c78
 80043d0:	20000c7c 	.word	0x20000c7c

080043d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043da:	e019      	b.n	8004410 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043dc:	f000 fef4 	bl	80051c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043e0:	4b10      	ldr	r3, [pc, #64]	@ (8004424 <prvCheckTasksWaitingTermination+0x50>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3304      	adds	r3, #4
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fe fa9d 	bl	800292c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004428 <prvCheckTasksWaitingTermination+0x54>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	4a0b      	ldr	r2, [pc, #44]	@ (8004428 <prvCheckTasksWaitingTermination+0x54>)
 80043fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043fc:	4b0b      	ldr	r3, [pc, #44]	@ (800442c <prvCheckTasksWaitingTermination+0x58>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3b01      	subs	r3, #1
 8004402:	4a0a      	ldr	r2, [pc, #40]	@ (800442c <prvCheckTasksWaitingTermination+0x58>)
 8004404:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004406:	f000 ff11 	bl	800522c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f810 	bl	8004430 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004410:	4b06      	ldr	r3, [pc, #24]	@ (800442c <prvCheckTasksWaitingTermination+0x58>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e1      	bne.n	80043dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004418:	bf00      	nop
 800441a:	bf00      	nop
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000c94 	.word	0x20000c94
 8004428:	20000cc0 	.word	0x20000cc0
 800442c:	20000ca8 	.word	0x20000ca8

08004430 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800443e:	2b00      	cmp	r3, #0
 8004440:	d108      	bne.n	8004454 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004446:	4618      	mov	r0, r3
 8004448:	f001 f8ae 	bl	80055a8 <vPortFree>
				vPortFree( pxTCB );
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f001 f8ab 	bl	80055a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004452:	e019      	b.n	8004488 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800445a:	2b01      	cmp	r3, #1
 800445c:	d103      	bne.n	8004466 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f001 f8a2 	bl	80055a8 <vPortFree>
	}
 8004464:	e010      	b.n	8004488 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800446c:	2b02      	cmp	r3, #2
 800446e:	d00b      	beq.n	8004488 <prvDeleteTCB+0x58>
	__asm volatile
 8004470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	60fb      	str	r3, [r7, #12]
}
 8004482:	bf00      	nop
 8004484:	bf00      	nop
 8004486:	e7fd      	b.n	8004484 <prvDeleteTCB+0x54>
	}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004496:	4b0c      	ldr	r3, [pc, #48]	@ (80044c8 <prvResetNextTaskUnblockTime+0x38>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d104      	bne.n	80044aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80044a0:	4b0a      	ldr	r3, [pc, #40]	@ (80044cc <prvResetNextTaskUnblockTime+0x3c>)
 80044a2:	f04f 32ff 	mov.w	r2, #4294967295
 80044a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80044a8:	e008      	b.n	80044bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044aa:	4b07      	ldr	r3, [pc, #28]	@ (80044c8 <prvResetNextTaskUnblockTime+0x38>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	4a04      	ldr	r2, [pc, #16]	@ (80044cc <prvResetNextTaskUnblockTime+0x3c>)
 80044ba:	6013      	str	r3, [r2, #0]
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	20000c78 	.word	0x20000c78
 80044cc:	20000ce0 	.word	0x20000ce0

080044d0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80044d6:	4b05      	ldr	r3, [pc, #20]	@ (80044ec <xTaskGetCurrentTaskHandle+0x1c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	607b      	str	r3, [r7, #4]

		return xReturn;
 80044dc:	687b      	ldr	r3, [r7, #4]
	}
 80044de:	4618      	mov	r0, r3
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	200007ec 	.word	0x200007ec

080044f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004524 <xTaskGetSchedulerState+0x34>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d102      	bne.n	8004504 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044fe:	2301      	movs	r3, #1
 8004500:	607b      	str	r3, [r7, #4]
 8004502:	e008      	b.n	8004516 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004504:	4b08      	ldr	r3, [pc, #32]	@ (8004528 <xTaskGetSchedulerState+0x38>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d102      	bne.n	8004512 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800450c:	2302      	movs	r3, #2
 800450e:	607b      	str	r3, [r7, #4]
 8004510:	e001      	b.n	8004516 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004512:	2300      	movs	r3, #0
 8004514:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004516:	687b      	ldr	r3, [r7, #4]
	}
 8004518:	4618      	mov	r0, r3
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	20000ccc 	.word	0x20000ccc
 8004528:	20000ce8 	.word	0x20000ce8

0800452c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004538:	2300      	movs	r3, #0
 800453a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d051      	beq.n	80045e6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004546:	4b2a      	ldr	r3, [pc, #168]	@ (80045f0 <xTaskPriorityInherit+0xc4>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454c:	429a      	cmp	r2, r3
 800454e:	d241      	bcs.n	80045d4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	2b00      	cmp	r3, #0
 8004556:	db06      	blt.n	8004566 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004558:	4b25      	ldr	r3, [pc, #148]	@ (80045f0 <xTaskPriorityInherit+0xc4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	6959      	ldr	r1, [r3, #20]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800456e:	4613      	mov	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4a1f      	ldr	r2, [pc, #124]	@ (80045f4 <xTaskPriorityInherit+0xc8>)
 8004578:	4413      	add	r3, r2
 800457a:	4299      	cmp	r1, r3
 800457c:	d122      	bne.n	80045c4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	3304      	adds	r3, #4
 8004582:	4618      	mov	r0, r3
 8004584:	f7fe f9d2 	bl	800292c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004588:	4b19      	ldr	r3, [pc, #100]	@ (80045f0 <xTaskPriorityInherit+0xc4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004596:	4b18      	ldr	r3, [pc, #96]	@ (80045f8 <xTaskPriorityInherit+0xcc>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d903      	bls.n	80045a6 <xTaskPriorityInherit+0x7a>
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a2:	4a15      	ldr	r2, [pc, #84]	@ (80045f8 <xTaskPriorityInherit+0xcc>)
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4a10      	ldr	r2, [pc, #64]	@ (80045f4 <xTaskPriorityInherit+0xc8>)
 80045b4:	441a      	add	r2, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	3304      	adds	r3, #4
 80045ba:	4619      	mov	r1, r3
 80045bc:	4610      	mov	r0, r2
 80045be:	f7fe f958 	bl	8002872 <vListInsertEnd>
 80045c2:	e004      	b.n	80045ce <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80045c4:	4b0a      	ldr	r3, [pc, #40]	@ (80045f0 <xTaskPriorityInherit+0xc4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80045ce:	2301      	movs	r3, #1
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	e008      	b.n	80045e6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80045d8:	4b05      	ldr	r3, [pc, #20]	@ (80045f0 <xTaskPriorityInherit+0xc4>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045de:	429a      	cmp	r2, r3
 80045e0:	d201      	bcs.n	80045e6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80045e2:	2301      	movs	r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045e6:	68fb      	ldr	r3, [r7, #12]
	}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	200007ec 	.word	0x200007ec
 80045f4:	200007f0 	.word	0x200007f0
 80045f8:	20000cc8 	.word	0x20000cc8

080045fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004608:	2300      	movs	r3, #0
 800460a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d058      	beq.n	80046c4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004612:	4b2f      	ldr	r3, [pc, #188]	@ (80046d0 <xTaskPriorityDisinherit+0xd4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	429a      	cmp	r2, r3
 800461a:	d00b      	beq.n	8004634 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	60fb      	str	r3, [r7, #12]
}
 800462e:	bf00      	nop
 8004630:	bf00      	nop
 8004632:	e7fd      	b.n	8004630 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10b      	bne.n	8004654 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800463c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	60bb      	str	r3, [r7, #8]
}
 800464e:	bf00      	nop
 8004650:	bf00      	nop
 8004652:	e7fd      	b.n	8004650 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004658:	1e5a      	subs	r2, r3, #1
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004666:	429a      	cmp	r2, r3
 8004668:	d02c      	beq.n	80046c4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800466e:	2b00      	cmp	r3, #0
 8004670:	d128      	bne.n	80046c4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	3304      	adds	r3, #4
 8004676:	4618      	mov	r0, r3
 8004678:	f7fe f958 	bl	800292c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004688:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004694:	4b0f      	ldr	r3, [pc, #60]	@ (80046d4 <xTaskPriorityDisinherit+0xd8>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d903      	bls.n	80046a4 <xTaskPriorityDisinherit+0xa8>
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a0:	4a0c      	ldr	r2, [pc, #48]	@ (80046d4 <xTaskPriorityDisinherit+0xd8>)
 80046a2:	6013      	str	r3, [r2, #0]
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4a09      	ldr	r2, [pc, #36]	@ (80046d8 <xTaskPriorityDisinherit+0xdc>)
 80046b2:	441a      	add	r2, r3
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	3304      	adds	r3, #4
 80046b8:	4619      	mov	r1, r3
 80046ba:	4610      	mov	r0, r2
 80046bc:	f7fe f8d9 	bl	8002872 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046c0:	2301      	movs	r3, #1
 80046c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046c4:	697b      	ldr	r3, [r7, #20]
	}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	200007ec 	.word	0x200007ec
 80046d4:	20000cc8 	.word	0x20000cc8
 80046d8:	200007f0 	.word	0x200007f0

080046dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80046ea:	2301      	movs	r3, #1
 80046ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d06c      	beq.n	80047ce <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10b      	bne.n	8004714 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	60fb      	str	r3, [r7, #12]
}
 800470e:	bf00      	nop
 8004710:	bf00      	nop
 8004712:	e7fd      	b.n	8004710 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d902      	bls.n	8004724 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	61fb      	str	r3, [r7, #28]
 8004722:	e002      	b.n	800472a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004728:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472e:	69fa      	ldr	r2, [r7, #28]
 8004730:	429a      	cmp	r2, r3
 8004732:	d04c      	beq.n	80047ce <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	429a      	cmp	r2, r3
 800473c:	d147      	bne.n	80047ce <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800473e:	4b26      	ldr	r3, [pc, #152]	@ (80047d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	429a      	cmp	r2, r3
 8004746:	d10b      	bne.n	8004760 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	60bb      	str	r3, [r7, #8]
}
 800475a:	bf00      	nop
 800475c:	bf00      	nop
 800475e:	e7fd      	b.n	800475c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004764:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	69fa      	ldr	r2, [r7, #28]
 800476a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	2b00      	cmp	r3, #0
 8004772:	db04      	blt.n	800477e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	6959      	ldr	r1, [r3, #20]
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	4613      	mov	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4a13      	ldr	r2, [pc, #76]	@ (80047dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800478e:	4413      	add	r3, r2
 8004790:	4299      	cmp	r1, r3
 8004792:	d11c      	bne.n	80047ce <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	3304      	adds	r3, #4
 8004798:	4618      	mov	r0, r3
 800479a:	f7fe f8c7 	bl	800292c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a2:	4b0f      	ldr	r3, [pc, #60]	@ (80047e0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d903      	bls.n	80047b2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ae:	4a0c      	ldr	r2, [pc, #48]	@ (80047e0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047b6:	4613      	mov	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4a07      	ldr	r2, [pc, #28]	@ (80047dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80047c0:	441a      	add	r2, r3
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	3304      	adds	r3, #4
 80047c6:	4619      	mov	r1, r3
 80047c8:	4610      	mov	r0, r2
 80047ca:	f7fe f852 	bl	8002872 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047ce:	bf00      	nop
 80047d0:	3720      	adds	r7, #32
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	200007ec 	.word	0x200007ec
 80047dc:	200007f0 	.word	0x200007f0
 80047e0:	20000cc8 	.word	0x20000cc8

080047e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80047e8:	4b07      	ldr	r3, [pc, #28]	@ (8004808 <pvTaskIncrementMutexHeldCount+0x24>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d004      	beq.n	80047fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80047f0:	4b05      	ldr	r3, [pc, #20]	@ (8004808 <pvTaskIncrementMutexHeldCount+0x24>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80047f6:	3201      	adds	r2, #1
 80047f8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80047fa:	4b03      	ldr	r3, [pc, #12]	@ (8004808 <pvTaskIncrementMutexHeldCount+0x24>)
 80047fc:	681b      	ldr	r3, [r3, #0]
	}
 80047fe:	4618      	mov	r0, r3
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	200007ec 	.word	0x200007ec

0800480c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004816:	4b21      	ldr	r3, [pc, #132]	@ (800489c <prvAddCurrentTaskToDelayedList+0x90>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800481c:	4b20      	ldr	r3, [pc, #128]	@ (80048a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3304      	adds	r3, #4
 8004822:	4618      	mov	r0, r3
 8004824:	f7fe f882 	bl	800292c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482e:	d10a      	bne.n	8004846 <prvAddCurrentTaskToDelayedList+0x3a>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d007      	beq.n	8004846 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004836:	4b1a      	ldr	r3, [pc, #104]	@ (80048a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3304      	adds	r3, #4
 800483c:	4619      	mov	r1, r3
 800483e:	4819      	ldr	r0, [pc, #100]	@ (80048a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004840:	f7fe f817 	bl	8002872 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004844:	e026      	b.n	8004894 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4413      	add	r3, r2
 800484c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800484e:	4b14      	ldr	r3, [pc, #80]	@ (80048a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	429a      	cmp	r2, r3
 800485c:	d209      	bcs.n	8004872 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800485e:	4b12      	ldr	r3, [pc, #72]	@ (80048a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	4b0f      	ldr	r3, [pc, #60]	@ (80048a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3304      	adds	r3, #4
 8004868:	4619      	mov	r1, r3
 800486a:	4610      	mov	r0, r2
 800486c:	f7fe f825 	bl	80028ba <vListInsert>
}
 8004870:	e010      	b.n	8004894 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004872:	4b0e      	ldr	r3, [pc, #56]	@ (80048ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	4b0a      	ldr	r3, [pc, #40]	@ (80048a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3304      	adds	r3, #4
 800487c:	4619      	mov	r1, r3
 800487e:	4610      	mov	r0, r2
 8004880:	f7fe f81b 	bl	80028ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004884:	4b0a      	ldr	r3, [pc, #40]	@ (80048b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	429a      	cmp	r2, r3
 800488c:	d202      	bcs.n	8004894 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800488e:	4a08      	ldr	r2, [pc, #32]	@ (80048b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	6013      	str	r3, [r2, #0]
}
 8004894:	bf00      	nop
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	20000cc4 	.word	0x20000cc4
 80048a0:	200007ec 	.word	0x200007ec
 80048a4:	20000cac 	.word	0x20000cac
 80048a8:	20000c7c 	.word	0x20000c7c
 80048ac:	20000c78 	.word	0x20000c78
 80048b0:	20000ce0 	.word	0x20000ce0

080048b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08a      	sub	sp, #40	@ 0x28
 80048b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80048ba:	2300      	movs	r3, #0
 80048bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80048be:	f000 fb13 	bl	8004ee8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80048c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004938 <xTimerCreateTimerTask+0x84>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d021      	beq.n	800490e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80048d2:	1d3a      	adds	r2, r7, #4
 80048d4:	f107 0108 	add.w	r1, r7, #8
 80048d8:	f107 030c 	add.w	r3, r7, #12
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fd ff81 	bl	80027e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80048e2:	6879      	ldr	r1, [r7, #4]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	9202      	str	r2, [sp, #8]
 80048ea:	9301      	str	r3, [sp, #4]
 80048ec:	2302      	movs	r3, #2
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	2300      	movs	r3, #0
 80048f2:	460a      	mov	r2, r1
 80048f4:	4911      	ldr	r1, [pc, #68]	@ (800493c <xTimerCreateTimerTask+0x88>)
 80048f6:	4812      	ldr	r0, [pc, #72]	@ (8004940 <xTimerCreateTimerTask+0x8c>)
 80048f8:	f7fe ff58 	bl	80037ac <xTaskCreateStatic>
 80048fc:	4603      	mov	r3, r0
 80048fe:	4a11      	ldr	r2, [pc, #68]	@ (8004944 <xTimerCreateTimerTask+0x90>)
 8004900:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004902:	4b10      	ldr	r3, [pc, #64]	@ (8004944 <xTimerCreateTimerTask+0x90>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800490a:	2301      	movs	r3, #1
 800490c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10b      	bne.n	800492c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	613b      	str	r3, [r7, #16]
}
 8004926:	bf00      	nop
 8004928:	bf00      	nop
 800492a:	e7fd      	b.n	8004928 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800492c:	697b      	ldr	r3, [r7, #20]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20000d1c 	.word	0x20000d1c
 800493c:	080061cc 	.word	0x080061cc
 8004940:	08004a81 	.word	0x08004a81
 8004944:	20000d20 	.word	0x20000d20

08004948 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	@ 0x28
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004956:	2300      	movs	r3, #0
 8004958:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10b      	bne.n	8004978 <xTimerGenericCommand+0x30>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	623b      	str	r3, [r7, #32]
}
 8004972:	bf00      	nop
 8004974:	bf00      	nop
 8004976:	e7fd      	b.n	8004974 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004978:	4b19      	ldr	r3, [pc, #100]	@ (80049e0 <xTimerGenericCommand+0x98>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d02a      	beq.n	80049d6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	2b05      	cmp	r3, #5
 8004990:	dc18      	bgt.n	80049c4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004992:	f7ff fdad 	bl	80044f0 <xTaskGetSchedulerState>
 8004996:	4603      	mov	r3, r0
 8004998:	2b02      	cmp	r3, #2
 800499a:	d109      	bne.n	80049b0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800499c:	4b10      	ldr	r3, [pc, #64]	@ (80049e0 <xTimerGenericCommand+0x98>)
 800499e:	6818      	ldr	r0, [r3, #0]
 80049a0:	f107 0110 	add.w	r1, r7, #16
 80049a4:	2300      	movs	r3, #0
 80049a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049a8:	f7fe f9e8 	bl	8002d7c <xQueueGenericSend>
 80049ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80049ae:	e012      	b.n	80049d6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80049b0:	4b0b      	ldr	r3, [pc, #44]	@ (80049e0 <xTimerGenericCommand+0x98>)
 80049b2:	6818      	ldr	r0, [r3, #0]
 80049b4:	f107 0110 	add.w	r1, r7, #16
 80049b8:	2300      	movs	r3, #0
 80049ba:	2200      	movs	r2, #0
 80049bc:	f7fe f9de 	bl	8002d7c <xQueueGenericSend>
 80049c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80049c2:	e008      	b.n	80049d6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80049c4:	4b06      	ldr	r3, [pc, #24]	@ (80049e0 <xTimerGenericCommand+0x98>)
 80049c6:	6818      	ldr	r0, [r3, #0]
 80049c8:	f107 0110 	add.w	r1, r7, #16
 80049cc:	2300      	movs	r3, #0
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	f7fe fad6 	bl	8002f80 <xQueueGenericSendFromISR>
 80049d4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3728      	adds	r7, #40	@ 0x28
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	20000d1c 	.word	0x20000d1c

080049e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049ee:	4b23      	ldr	r3, [pc, #140]	@ (8004a7c <prvProcessExpiredTimer+0x98>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	3304      	adds	r3, #4
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fd ff95 	bl	800292c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d023      	beq.n	8004a58 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	699a      	ldr	r2, [r3, #24]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	18d1      	adds	r1, r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	6978      	ldr	r0, [r7, #20]
 8004a1e:	f000 f8d5 	bl	8004bcc <prvInsertTimerInActiveList>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d020      	beq.n	8004a6a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a28:	2300      	movs	r3, #0
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	2100      	movs	r1, #0
 8004a32:	6978      	ldr	r0, [r7, #20]
 8004a34:	f7ff ff88 	bl	8004948 <xTimerGenericCommand>
 8004a38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d114      	bne.n	8004a6a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	60fb      	str	r3, [r7, #12]
}
 8004a52:	bf00      	nop
 8004a54:	bf00      	nop
 8004a56:	e7fd      	b.n	8004a54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a5e:	f023 0301 	bic.w	r3, r3, #1
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	6978      	ldr	r0, [r7, #20]
 8004a70:	4798      	blx	r3
}
 8004a72:	bf00      	nop
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20000d14 	.word	0x20000d14

08004a80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a88:	f107 0308 	add.w	r3, r7, #8
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 f859 	bl	8004b44 <prvGetNextExpireTime>
 8004a92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	4619      	mov	r1, r3
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f805 	bl	8004aa8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a9e:	f000 f8d7 	bl	8004c50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004aa2:	bf00      	nop
 8004aa4:	e7f0      	b.n	8004a88 <prvTimerTask+0x8>
	...

08004aa8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004ab2:	f7ff f927 	bl	8003d04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ab6:	f107 0308 	add.w	r3, r7, #8
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 f866 	bl	8004b8c <prvSampleTimeNow>
 8004ac0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d130      	bne.n	8004b2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10a      	bne.n	8004ae4 <prvProcessTimerOrBlockTask+0x3c>
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d806      	bhi.n	8004ae4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004ad6:	f7ff f923 	bl	8003d20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004ada:	68f9      	ldr	r1, [r7, #12]
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff ff81 	bl	80049e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004ae2:	e024      	b.n	8004b2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d008      	beq.n	8004afc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004aea:	4b13      	ldr	r3, [pc, #76]	@ (8004b38 <prvProcessTimerOrBlockTask+0x90>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <prvProcessTimerOrBlockTask+0x50>
 8004af4:	2301      	movs	r3, #1
 8004af6:	e000      	b.n	8004afa <prvProcessTimerOrBlockTask+0x52>
 8004af8:	2300      	movs	r3, #0
 8004afa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004afc:	4b0f      	ldr	r3, [pc, #60]	@ (8004b3c <prvProcessTimerOrBlockTask+0x94>)
 8004afe:	6818      	ldr	r0, [r3, #0]
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	4619      	mov	r1, r3
 8004b0a:	f7fe fe1b 	bl	8003744 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b0e:	f7ff f907 	bl	8003d20 <xTaskResumeAll>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10a      	bne.n	8004b2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004b18:	4b09      	ldr	r3, [pc, #36]	@ (8004b40 <prvProcessTimerOrBlockTask+0x98>)
 8004b1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	f3bf 8f6f 	isb	sy
}
 8004b28:	e001      	b.n	8004b2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004b2a:	f7ff f8f9 	bl	8003d20 <xTaskResumeAll>
}
 8004b2e:	bf00      	nop
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20000d18 	.word	0x20000d18
 8004b3c:	20000d1c 	.word	0x20000d1c
 8004b40:	e000ed04 	.word	0xe000ed04

08004b44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004b88 <prvGetNextExpireTime+0x44>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <prvGetNextExpireTime+0x16>
 8004b56:	2201      	movs	r2, #1
 8004b58:	e000      	b.n	8004b5c <prvGetNextExpireTime+0x18>
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d105      	bne.n	8004b74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b68:	4b07      	ldr	r3, [pc, #28]	@ (8004b88 <prvGetNextExpireTime+0x44>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	e001      	b.n	8004b78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b78:	68fb      	ldr	r3, [r7, #12]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	20000d14 	.word	0x20000d14

08004b8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b94:	f7ff f962 	bl	8003e5c <xTaskGetTickCount>
 8004b98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc8 <prvSampleTimeNow+0x3c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d205      	bcs.n	8004bb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ba4:	f000 f93a 	bl	8004e1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	e002      	b.n	8004bb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004bb6:	4a04      	ldr	r2, [pc, #16]	@ (8004bc8 <prvSampleTimeNow+0x3c>)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000d24 	.word	0x20000d24

08004bcc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d812      	bhi.n	8004c18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	1ad2      	subs	r2, r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d302      	bcc.n	8004c06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c00:	2301      	movs	r3, #1
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	e01b      	b.n	8004c3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c06:	4b10      	ldr	r3, [pc, #64]	@ (8004c48 <prvInsertTimerInActiveList+0x7c>)
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4610      	mov	r0, r2
 8004c12:	f7fd fe52 	bl	80028ba <vListInsert>
 8004c16:	e012      	b.n	8004c3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d206      	bcs.n	8004c2e <prvInsertTimerInActiveList+0x62>
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d302      	bcc.n	8004c2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	e007      	b.n	8004c3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c2e:	4b07      	ldr	r3, [pc, #28]	@ (8004c4c <prvInsertTimerInActiveList+0x80>)
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	3304      	adds	r3, #4
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f7fd fe3e 	bl	80028ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c3e:	697b      	ldr	r3, [r7, #20]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	20000d18 	.word	0x20000d18
 8004c4c:	20000d14 	.word	0x20000d14

08004c50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08e      	sub	sp, #56	@ 0x38
 8004c54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c56:	e0ce      	b.n	8004df6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	da19      	bge.n	8004c92 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004c5e:	1d3b      	adds	r3, r7, #4
 8004c60:	3304      	adds	r3, #4
 8004c62:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10b      	bne.n	8004c82 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	61fb      	str	r3, [r7, #28]
}
 8004c7c:	bf00      	nop
 8004c7e:	bf00      	nop
 8004c80:	e7fd      	b.n	8004c7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c88:	6850      	ldr	r0, [r2, #4]
 8004c8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c8c:	6892      	ldr	r2, [r2, #8]
 8004c8e:	4611      	mov	r1, r2
 8004c90:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f2c0 80ae 	blt.w	8004df6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d004      	beq.n	8004cb0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca8:	3304      	adds	r3, #4
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fd fe3e 	bl	800292c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cb0:	463b      	mov	r3, r7
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff ff6a 	bl	8004b8c <prvSampleTimeNow>
 8004cb8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b09      	cmp	r3, #9
 8004cbe:	f200 8097 	bhi.w	8004df0 <prvProcessReceivedCommands+0x1a0>
 8004cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc8 <prvProcessReceivedCommands+0x78>)
 8004cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc8:	08004cf1 	.word	0x08004cf1
 8004ccc:	08004cf1 	.word	0x08004cf1
 8004cd0:	08004cf1 	.word	0x08004cf1
 8004cd4:	08004d67 	.word	0x08004d67
 8004cd8:	08004d7b 	.word	0x08004d7b
 8004cdc:	08004dc7 	.word	0x08004dc7
 8004ce0:	08004cf1 	.word	0x08004cf1
 8004ce4:	08004cf1 	.word	0x08004cf1
 8004ce8:	08004d67 	.word	0x08004d67
 8004cec:	08004d7b 	.word	0x08004d7b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cf6:	f043 0301 	orr.w	r3, r3, #1
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	18d1      	adds	r1, r2, r3
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d10:	f7ff ff5c 	bl	8004bcc <prvInsertTimerInActiveList>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d06c      	beq.n	8004df4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d061      	beq.n	8004df4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	441a      	add	r2, r3
 8004d38:	2300      	movs	r3, #0
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	2100      	movs	r1, #0
 8004d40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d42:	f7ff fe01 	bl	8004948 <xTimerGenericCommand>
 8004d46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d152      	bne.n	8004df4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	61bb      	str	r3, [r7, #24]
}
 8004d60:	bf00      	nop
 8004d62:	bf00      	nop
 8004d64:	e7fd      	b.n	8004d62 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d6c:	f023 0301 	bic.w	r3, r3, #1
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004d78:	e03d      	b.n	8004df6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d90:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10b      	bne.n	8004db2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	617b      	str	r3, [r7, #20]
}
 8004dac:	bf00      	nop
 8004dae:	bf00      	nop
 8004db0:	e7fd      	b.n	8004dae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db4:	699a      	ldr	r2, [r3, #24]
 8004db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db8:	18d1      	adds	r1, r2, r3
 8004dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dc0:	f7ff ff04 	bl	8004bcc <prvInsertTimerInActiveList>
					break;
 8004dc4:	e017      	b.n	8004df6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d103      	bne.n	8004ddc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004dd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dd6:	f000 fbe7 	bl	80055a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004dda:	e00c      	b.n	8004df6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004de2:	f023 0301 	bic.w	r3, r3, #1
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004dee:	e002      	b.n	8004df6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004df0:	bf00      	nop
 8004df2:	e000      	b.n	8004df6 <prvProcessReceivedCommands+0x1a6>
					break;
 8004df4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004df6:	4b08      	ldr	r3, [pc, #32]	@ (8004e18 <prvProcessReceivedCommands+0x1c8>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	1d39      	adds	r1, r7, #4
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fe f95c 	bl	80030bc <xQueueReceive>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f47f af26 	bne.w	8004c58 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004e0c:	bf00      	nop
 8004e0e:	bf00      	nop
 8004e10:	3730      	adds	r7, #48	@ 0x30
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	20000d1c 	.word	0x20000d1c

08004e1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e22:	e049      	b.n	8004eb8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e24:	4b2e      	ldr	r3, [pc, #184]	@ (8004ee0 <prvSwitchTimerLists+0xc4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8004ee0 <prvSwitchTimerLists+0xc4>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7fd fd75 	bl	800292c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d02f      	beq.n	8004eb8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4413      	add	r3, r2
 8004e60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d90e      	bls.n	8004e88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e76:	4b1a      	ldr	r3, [pc, #104]	@ (8004ee0 <prvSwitchTimerLists+0xc4>)
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4610      	mov	r0, r2
 8004e82:	f7fd fd1a 	bl	80028ba <vListInsert>
 8004e86:	e017      	b.n	8004eb8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e88:	2300      	movs	r3, #0
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	2100      	movs	r1, #0
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f7ff fd58 	bl	8004948 <xTimerGenericCommand>
 8004e98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10b      	bne.n	8004eb8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	603b      	str	r3, [r7, #0]
}
 8004eb2:	bf00      	nop
 8004eb4:	bf00      	nop
 8004eb6:	e7fd      	b.n	8004eb4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004eb8:	4b09      	ldr	r3, [pc, #36]	@ (8004ee0 <prvSwitchTimerLists+0xc4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1b0      	bne.n	8004e24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004ec2:	4b07      	ldr	r3, [pc, #28]	@ (8004ee0 <prvSwitchTimerLists+0xc4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004ec8:	4b06      	ldr	r3, [pc, #24]	@ (8004ee4 <prvSwitchTimerLists+0xc8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a04      	ldr	r2, [pc, #16]	@ (8004ee0 <prvSwitchTimerLists+0xc4>)
 8004ece:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004ed0:	4a04      	ldr	r2, [pc, #16]	@ (8004ee4 <prvSwitchTimerLists+0xc8>)
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	6013      	str	r3, [r2, #0]
}
 8004ed6:	bf00      	nop
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	20000d14 	.word	0x20000d14
 8004ee4:	20000d18 	.word	0x20000d18

08004ee8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004eee:	f000 f96b 	bl	80051c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ef2:	4b15      	ldr	r3, [pc, #84]	@ (8004f48 <prvCheckForValidListAndQueue+0x60>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d120      	bne.n	8004f3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004efa:	4814      	ldr	r0, [pc, #80]	@ (8004f4c <prvCheckForValidListAndQueue+0x64>)
 8004efc:	f7fd fc8c 	bl	8002818 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004f00:	4813      	ldr	r0, [pc, #76]	@ (8004f50 <prvCheckForValidListAndQueue+0x68>)
 8004f02:	f7fd fc89 	bl	8002818 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004f06:	4b13      	ldr	r3, [pc, #76]	@ (8004f54 <prvCheckForValidListAndQueue+0x6c>)
 8004f08:	4a10      	ldr	r2, [pc, #64]	@ (8004f4c <prvCheckForValidListAndQueue+0x64>)
 8004f0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004f0c:	4b12      	ldr	r3, [pc, #72]	@ (8004f58 <prvCheckForValidListAndQueue+0x70>)
 8004f0e:	4a10      	ldr	r2, [pc, #64]	@ (8004f50 <prvCheckForValidListAndQueue+0x68>)
 8004f10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004f12:	2300      	movs	r3, #0
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	4b11      	ldr	r3, [pc, #68]	@ (8004f5c <prvCheckForValidListAndQueue+0x74>)
 8004f18:	4a11      	ldr	r2, [pc, #68]	@ (8004f60 <prvCheckForValidListAndQueue+0x78>)
 8004f1a:	2110      	movs	r1, #16
 8004f1c:	200a      	movs	r0, #10
 8004f1e:	f7fd fd99 	bl	8002a54 <xQueueGenericCreateStatic>
 8004f22:	4603      	mov	r3, r0
 8004f24:	4a08      	ldr	r2, [pc, #32]	@ (8004f48 <prvCheckForValidListAndQueue+0x60>)
 8004f26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f28:	4b07      	ldr	r3, [pc, #28]	@ (8004f48 <prvCheckForValidListAndQueue+0x60>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d005      	beq.n	8004f3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f30:	4b05      	ldr	r3, [pc, #20]	@ (8004f48 <prvCheckForValidListAndQueue+0x60>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	490b      	ldr	r1, [pc, #44]	@ (8004f64 <prvCheckForValidListAndQueue+0x7c>)
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fe fbda 	bl	80036f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f3c:	f000 f976 	bl	800522c <vPortExitCritical>
}
 8004f40:	bf00      	nop
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20000d1c 	.word	0x20000d1c
 8004f4c:	20000cec 	.word	0x20000cec
 8004f50:	20000d00 	.word	0x20000d00
 8004f54:	20000d14 	.word	0x20000d14
 8004f58:	20000d18 	.word	0x20000d18
 8004f5c:	20000dc8 	.word	0x20000dc8
 8004f60:	20000d28 	.word	0x20000d28
 8004f64:	080061d4 	.word	0x080061d4

08004f68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3b04      	subs	r3, #4
 8004f78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	3b04      	subs	r3, #4
 8004f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f023 0201 	bic.w	r2, r3, #1
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	3b04      	subs	r3, #4
 8004f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f98:	4a0c      	ldr	r2, [pc, #48]	@ (8004fcc <pxPortInitialiseStack+0x64>)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3b14      	subs	r3, #20
 8004fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3b04      	subs	r3, #4
 8004fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f06f 0202 	mvn.w	r2, #2
 8004fb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	3b20      	subs	r3, #32
 8004fbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	08004fd1 	.word	0x08004fd1

08004fd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fda:	4b13      	ldr	r3, [pc, #76]	@ (8005028 <prvTaskExitError+0x58>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe2:	d00b      	beq.n	8004ffc <prvTaskExitError+0x2c>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	60fb      	str	r3, [r7, #12]
}
 8004ff6:	bf00      	nop
 8004ff8:	bf00      	nop
 8004ffa:	e7fd      	b.n	8004ff8 <prvTaskExitError+0x28>
	__asm volatile
 8004ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	60bb      	str	r3, [r7, #8]
}
 800500e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005010:	bf00      	nop
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0fc      	beq.n	8005012 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005018:	bf00      	nop
 800501a:	bf00      	nop
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	20000020 	.word	0x20000020
 800502c:	00000000 	.word	0x00000000

08005030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005030:	4b07      	ldr	r3, [pc, #28]	@ (8005050 <pxCurrentTCBConst2>)
 8005032:	6819      	ldr	r1, [r3, #0]
 8005034:	6808      	ldr	r0, [r1, #0]
 8005036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800503a:	f380 8809 	msr	PSP, r0
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f04f 0000 	mov.w	r0, #0
 8005046:	f380 8811 	msr	BASEPRI, r0
 800504a:	4770      	bx	lr
 800504c:	f3af 8000 	nop.w

08005050 <pxCurrentTCBConst2>:
 8005050:	200007ec 	.word	0x200007ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005054:	bf00      	nop
 8005056:	bf00      	nop

08005058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005058:	4808      	ldr	r0, [pc, #32]	@ (800507c <prvPortStartFirstTask+0x24>)
 800505a:	6800      	ldr	r0, [r0, #0]
 800505c:	6800      	ldr	r0, [r0, #0]
 800505e:	f380 8808 	msr	MSP, r0
 8005062:	f04f 0000 	mov.w	r0, #0
 8005066:	f380 8814 	msr	CONTROL, r0
 800506a:	b662      	cpsie	i
 800506c:	b661      	cpsie	f
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	df00      	svc	0
 8005078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800507a:	bf00      	nop
 800507c:	e000ed08 	.word	0xe000ed08

08005080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005086:	4b47      	ldr	r3, [pc, #284]	@ (80051a4 <xPortStartScheduler+0x124>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a47      	ldr	r2, [pc, #284]	@ (80051a8 <xPortStartScheduler+0x128>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d10b      	bne.n	80050a8 <xPortStartScheduler+0x28>
	__asm volatile
 8005090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	60fb      	str	r3, [r7, #12]
}
 80050a2:	bf00      	nop
 80050a4:	bf00      	nop
 80050a6:	e7fd      	b.n	80050a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80050a8:	4b3e      	ldr	r3, [pc, #248]	@ (80051a4 <xPortStartScheduler+0x124>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a3f      	ldr	r2, [pc, #252]	@ (80051ac <xPortStartScheduler+0x12c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d10b      	bne.n	80050ca <xPortStartScheduler+0x4a>
	__asm volatile
 80050b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	613b      	str	r3, [r7, #16]
}
 80050c4:	bf00      	nop
 80050c6:	bf00      	nop
 80050c8:	e7fd      	b.n	80050c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050ca:	4b39      	ldr	r3, [pc, #228]	@ (80051b0 <xPortStartScheduler+0x130>)
 80050cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	22ff      	movs	r2, #255	@ 0xff
 80050da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050e4:	78fb      	ldrb	r3, [r7, #3]
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	4b31      	ldr	r3, [pc, #196]	@ (80051b4 <xPortStartScheduler+0x134>)
 80050f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050f2:	4b31      	ldr	r3, [pc, #196]	@ (80051b8 <xPortStartScheduler+0x138>)
 80050f4:	2207      	movs	r2, #7
 80050f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050f8:	e009      	b.n	800510e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80050fa:	4b2f      	ldr	r3, [pc, #188]	@ (80051b8 <xPortStartScheduler+0x138>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3b01      	subs	r3, #1
 8005100:	4a2d      	ldr	r2, [pc, #180]	@ (80051b8 <xPortStartScheduler+0x138>)
 8005102:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005104:	78fb      	ldrb	r3, [r7, #3]
 8005106:	b2db      	uxtb	r3, r3
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	b2db      	uxtb	r3, r3
 800510c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800510e:	78fb      	ldrb	r3, [r7, #3]
 8005110:	b2db      	uxtb	r3, r3
 8005112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005116:	2b80      	cmp	r3, #128	@ 0x80
 8005118:	d0ef      	beq.n	80050fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800511a:	4b27      	ldr	r3, [pc, #156]	@ (80051b8 <xPortStartScheduler+0x138>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f1c3 0307 	rsb	r3, r3, #7
 8005122:	2b04      	cmp	r3, #4
 8005124:	d00b      	beq.n	800513e <xPortStartScheduler+0xbe>
	__asm volatile
 8005126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	60bb      	str	r3, [r7, #8]
}
 8005138:	bf00      	nop
 800513a:	bf00      	nop
 800513c:	e7fd      	b.n	800513a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800513e:	4b1e      	ldr	r3, [pc, #120]	@ (80051b8 <xPortStartScheduler+0x138>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	4a1c      	ldr	r2, [pc, #112]	@ (80051b8 <xPortStartScheduler+0x138>)
 8005146:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005148:	4b1b      	ldr	r3, [pc, #108]	@ (80051b8 <xPortStartScheduler+0x138>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005150:	4a19      	ldr	r2, [pc, #100]	@ (80051b8 <xPortStartScheduler+0x138>)
 8005152:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	b2da      	uxtb	r2, r3
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800515c:	4b17      	ldr	r3, [pc, #92]	@ (80051bc <xPortStartScheduler+0x13c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a16      	ldr	r2, [pc, #88]	@ (80051bc <xPortStartScheduler+0x13c>)
 8005162:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005166:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005168:	4b14      	ldr	r3, [pc, #80]	@ (80051bc <xPortStartScheduler+0x13c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a13      	ldr	r2, [pc, #76]	@ (80051bc <xPortStartScheduler+0x13c>)
 800516e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005172:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005174:	f000 f8da 	bl	800532c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005178:	4b11      	ldr	r3, [pc, #68]	@ (80051c0 <xPortStartScheduler+0x140>)
 800517a:	2200      	movs	r2, #0
 800517c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800517e:	f000 f8f9 	bl	8005374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005182:	4b10      	ldr	r3, [pc, #64]	@ (80051c4 <xPortStartScheduler+0x144>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a0f      	ldr	r2, [pc, #60]	@ (80051c4 <xPortStartScheduler+0x144>)
 8005188:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800518c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800518e:	f7ff ff63 	bl	8005058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005192:	f7fe ff2d 	bl	8003ff0 <vTaskSwitchContext>
	prvTaskExitError();
 8005196:	f7ff ff1b 	bl	8004fd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	e000ed00 	.word	0xe000ed00
 80051a8:	410fc271 	.word	0x410fc271
 80051ac:	410fc270 	.word	0x410fc270
 80051b0:	e000e400 	.word	0xe000e400
 80051b4:	20000e18 	.word	0x20000e18
 80051b8:	20000e1c 	.word	0x20000e1c
 80051bc:	e000ed20 	.word	0xe000ed20
 80051c0:	20000020 	.word	0x20000020
 80051c4:	e000ef34 	.word	0xe000ef34

080051c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
	__asm volatile
 80051ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	607b      	str	r3, [r7, #4]
}
 80051e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051e2:	4b10      	ldr	r3, [pc, #64]	@ (8005224 <vPortEnterCritical+0x5c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3301      	adds	r3, #1
 80051e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005224 <vPortEnterCritical+0x5c>)
 80051ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005224 <vPortEnterCritical+0x5c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d110      	bne.n	8005216 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005228 <vPortEnterCritical+0x60>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00b      	beq.n	8005216 <vPortEnterCritical+0x4e>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	603b      	str	r3, [r7, #0]
}
 8005210:	bf00      	nop
 8005212:	bf00      	nop
 8005214:	e7fd      	b.n	8005212 <vPortEnterCritical+0x4a>
	}
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	20000020 	.word	0x20000020
 8005228:	e000ed04 	.word	0xe000ed04

0800522c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005232:	4b12      	ldr	r3, [pc, #72]	@ (800527c <vPortExitCritical+0x50>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10b      	bne.n	8005252 <vPortExitCritical+0x26>
	__asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	607b      	str	r3, [r7, #4]
}
 800524c:	bf00      	nop
 800524e:	bf00      	nop
 8005250:	e7fd      	b.n	800524e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005252:	4b0a      	ldr	r3, [pc, #40]	@ (800527c <vPortExitCritical+0x50>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3b01      	subs	r3, #1
 8005258:	4a08      	ldr	r2, [pc, #32]	@ (800527c <vPortExitCritical+0x50>)
 800525a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800525c:	4b07      	ldr	r3, [pc, #28]	@ (800527c <vPortExitCritical+0x50>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d105      	bne.n	8005270 <vPortExitCritical+0x44>
 8005264:	2300      	movs	r3, #0
 8005266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	f383 8811 	msr	BASEPRI, r3
}
 800526e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	20000020 	.word	0x20000020

08005280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005280:	f3ef 8009 	mrs	r0, PSP
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	4b15      	ldr	r3, [pc, #84]	@ (80052e0 <pxCurrentTCBConst>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	f01e 0f10 	tst.w	lr, #16
 8005290:	bf08      	it	eq
 8005292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529a:	6010      	str	r0, [r2, #0]
 800529c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80052a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80052a4:	f380 8811 	msr	BASEPRI, r0
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f7fe fe9e 	bl	8003ff0 <vTaskSwitchContext>
 80052b4:	f04f 0000 	mov.w	r0, #0
 80052b8:	f380 8811 	msr	BASEPRI, r0
 80052bc:	bc09      	pop	{r0, r3}
 80052be:	6819      	ldr	r1, [r3, #0]
 80052c0:	6808      	ldr	r0, [r1, #0]
 80052c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c6:	f01e 0f10 	tst.w	lr, #16
 80052ca:	bf08      	it	eq
 80052cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052d0:	f380 8809 	msr	PSP, r0
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	f3af 8000 	nop.w

080052e0 <pxCurrentTCBConst>:
 80052e0:	200007ec 	.word	0x200007ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop

080052e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	607b      	str	r3, [r7, #4]
}
 8005300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005302:	f7fe fdbb 	bl	8003e7c <xTaskIncrementTick>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800530c:	4b06      	ldr	r3, [pc, #24]	@ (8005328 <xPortSysTickHandler+0x40>)
 800530e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	2300      	movs	r3, #0
 8005316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	f383 8811 	msr	BASEPRI, r3
}
 800531e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005320:	bf00      	nop
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	e000ed04 	.word	0xe000ed04

0800532c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005330:	4b0b      	ldr	r3, [pc, #44]	@ (8005360 <vPortSetupTimerInterrupt+0x34>)
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005336:	4b0b      	ldr	r3, [pc, #44]	@ (8005364 <vPortSetupTimerInterrupt+0x38>)
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800533c:	4b0a      	ldr	r3, [pc, #40]	@ (8005368 <vPortSetupTimerInterrupt+0x3c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a0a      	ldr	r2, [pc, #40]	@ (800536c <vPortSetupTimerInterrupt+0x40>)
 8005342:	fba2 2303 	umull	r2, r3, r2, r3
 8005346:	099b      	lsrs	r3, r3, #6
 8005348:	4a09      	ldr	r2, [pc, #36]	@ (8005370 <vPortSetupTimerInterrupt+0x44>)
 800534a:	3b01      	subs	r3, #1
 800534c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800534e:	4b04      	ldr	r3, [pc, #16]	@ (8005360 <vPortSetupTimerInterrupt+0x34>)
 8005350:	2207      	movs	r2, #7
 8005352:	601a      	str	r2, [r3, #0]
}
 8005354:	bf00      	nop
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	e000e010 	.word	0xe000e010
 8005364:	e000e018 	.word	0xe000e018
 8005368:	20000014 	.word	0x20000014
 800536c:	10624dd3 	.word	0x10624dd3
 8005370:	e000e014 	.word	0xe000e014

08005374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005374:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005384 <vPortEnableVFP+0x10>
 8005378:	6801      	ldr	r1, [r0, #0]
 800537a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800537e:	6001      	str	r1, [r0, #0]
 8005380:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005382:	bf00      	nop
 8005384:	e000ed88 	.word	0xe000ed88

08005388 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800538e:	f3ef 8305 	mrs	r3, IPSR
 8005392:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b0f      	cmp	r3, #15
 8005398:	d915      	bls.n	80053c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800539a:	4a18      	ldr	r2, [pc, #96]	@ (80053fc <vPortValidateInterruptPriority+0x74>)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4413      	add	r3, r2
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80053a4:	4b16      	ldr	r3, [pc, #88]	@ (8005400 <vPortValidateInterruptPriority+0x78>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	7afa      	ldrb	r2, [r7, #11]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d20b      	bcs.n	80053c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	607b      	str	r3, [r7, #4]
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	e7fd      	b.n	80053c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005404 <vPortValidateInterruptPriority+0x7c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80053ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005408 <vPortValidateInterruptPriority+0x80>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d90b      	bls.n	80053ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	603b      	str	r3, [r7, #0]
}
 80053e8:	bf00      	nop
 80053ea:	bf00      	nop
 80053ec:	e7fd      	b.n	80053ea <vPortValidateInterruptPriority+0x62>
	}
 80053ee:	bf00      	nop
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	e000e3f0 	.word	0xe000e3f0
 8005400:	20000e18 	.word	0x20000e18
 8005404:	e000ed0c 	.word	0xe000ed0c
 8005408:	20000e1c 	.word	0x20000e1c

0800540c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08a      	sub	sp, #40	@ 0x28
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005414:	2300      	movs	r3, #0
 8005416:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005418:	f7fe fc74 	bl	8003d04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800541c:	4b5c      	ldr	r3, [pc, #368]	@ (8005590 <pvPortMalloc+0x184>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005424:	f000 f924 	bl	8005670 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005428:	4b5a      	ldr	r3, [pc, #360]	@ (8005594 <pvPortMalloc+0x188>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4013      	ands	r3, r2
 8005430:	2b00      	cmp	r3, #0
 8005432:	f040 8095 	bne.w	8005560 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01e      	beq.n	800547a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800543c:	2208      	movs	r2, #8
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4413      	add	r3, r2
 8005442:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	2b00      	cmp	r3, #0
 800544c:	d015      	beq.n	800547a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f023 0307 	bic.w	r3, r3, #7
 8005454:	3308      	adds	r3, #8
 8005456:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00b      	beq.n	800547a <pvPortMalloc+0x6e>
	__asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	617b      	str	r3, [r7, #20]
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop
 8005478:	e7fd      	b.n	8005476 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d06f      	beq.n	8005560 <pvPortMalloc+0x154>
 8005480:	4b45      	ldr	r3, [pc, #276]	@ (8005598 <pvPortMalloc+0x18c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	429a      	cmp	r2, r3
 8005488:	d86a      	bhi.n	8005560 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800548a:	4b44      	ldr	r3, [pc, #272]	@ (800559c <pvPortMalloc+0x190>)
 800548c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800548e:	4b43      	ldr	r3, [pc, #268]	@ (800559c <pvPortMalloc+0x190>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005494:	e004      	b.n	80054a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005498:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d903      	bls.n	80054b2 <pvPortMalloc+0xa6>
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1f1      	bne.n	8005496 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054b2:	4b37      	ldr	r3, [pc, #220]	@ (8005590 <pvPortMalloc+0x184>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d051      	beq.n	8005560 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2208      	movs	r2, #8
 80054c2:	4413      	add	r3, r2
 80054c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	1ad2      	subs	r2, r2, r3
 80054d6:	2308      	movs	r3, #8
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	429a      	cmp	r2, r3
 80054dc:	d920      	bls.n	8005520 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4413      	add	r3, r2
 80054e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00b      	beq.n	8005508 <pvPortMalloc+0xfc>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	613b      	str	r3, [r7, #16]
}
 8005502:	bf00      	nop
 8005504:	bf00      	nop
 8005506:	e7fd      	b.n	8005504 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	1ad2      	subs	r2, r2, r3
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800551a:	69b8      	ldr	r0, [r7, #24]
 800551c:	f000 f90a 	bl	8005734 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005520:	4b1d      	ldr	r3, [pc, #116]	@ (8005598 <pvPortMalloc+0x18c>)
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	4a1b      	ldr	r2, [pc, #108]	@ (8005598 <pvPortMalloc+0x18c>)
 800552c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800552e:	4b1a      	ldr	r3, [pc, #104]	@ (8005598 <pvPortMalloc+0x18c>)
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	4b1b      	ldr	r3, [pc, #108]	@ (80055a0 <pvPortMalloc+0x194>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d203      	bcs.n	8005542 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800553a:	4b17      	ldr	r3, [pc, #92]	@ (8005598 <pvPortMalloc+0x18c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a18      	ldr	r2, [pc, #96]	@ (80055a0 <pvPortMalloc+0x194>)
 8005540:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	4b13      	ldr	r3, [pc, #76]	@ (8005594 <pvPortMalloc+0x188>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	431a      	orrs	r2, r3
 800554c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005556:	4b13      	ldr	r3, [pc, #76]	@ (80055a4 <pvPortMalloc+0x198>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3301      	adds	r3, #1
 800555c:	4a11      	ldr	r2, [pc, #68]	@ (80055a4 <pvPortMalloc+0x198>)
 800555e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005560:	f7fe fbde 	bl	8003d20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	f003 0307 	and.w	r3, r3, #7
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <pvPortMalloc+0x17a>
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	60fb      	str	r3, [r7, #12]
}
 8005580:	bf00      	nop
 8005582:	bf00      	nop
 8005584:	e7fd      	b.n	8005582 <pvPortMalloc+0x176>
	return pvReturn;
 8005586:	69fb      	ldr	r3, [r7, #28]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3728      	adds	r7, #40	@ 0x28
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	20004a28 	.word	0x20004a28
 8005594:	20004a3c 	.word	0x20004a3c
 8005598:	20004a2c 	.word	0x20004a2c
 800559c:	20004a20 	.word	0x20004a20
 80055a0:	20004a30 	.word	0x20004a30
 80055a4:	20004a34 	.word	0x20004a34

080055a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d04f      	beq.n	800565a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055ba:	2308      	movs	r3, #8
 80055bc:	425b      	negs	r3, r3
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	4413      	add	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	4b25      	ldr	r3, [pc, #148]	@ (8005664 <vPortFree+0xbc>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4013      	ands	r3, r2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10b      	bne.n	80055ee <vPortFree+0x46>
	__asm volatile
 80055d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055da:	f383 8811 	msr	BASEPRI, r3
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f3bf 8f4f 	dsb	sy
 80055e6:	60fb      	str	r3, [r7, #12]
}
 80055e8:	bf00      	nop
 80055ea:	bf00      	nop
 80055ec:	e7fd      	b.n	80055ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00b      	beq.n	800560e <vPortFree+0x66>
	__asm volatile
 80055f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	60bb      	str	r3, [r7, #8]
}
 8005608:	bf00      	nop
 800560a:	bf00      	nop
 800560c:	e7fd      	b.n	800560a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	4b14      	ldr	r3, [pc, #80]	@ (8005664 <vPortFree+0xbc>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4013      	ands	r3, r2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d01e      	beq.n	800565a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d11a      	bne.n	800565a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	4b0e      	ldr	r3, [pc, #56]	@ (8005664 <vPortFree+0xbc>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	43db      	mvns	r3, r3
 800562e:	401a      	ands	r2, r3
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005634:	f7fe fb66 	bl	8003d04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	4b0a      	ldr	r3, [pc, #40]	@ (8005668 <vPortFree+0xc0>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4413      	add	r3, r2
 8005642:	4a09      	ldr	r2, [pc, #36]	@ (8005668 <vPortFree+0xc0>)
 8005644:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005646:	6938      	ldr	r0, [r7, #16]
 8005648:	f000 f874 	bl	8005734 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800564c:	4b07      	ldr	r3, [pc, #28]	@ (800566c <vPortFree+0xc4>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3301      	adds	r3, #1
 8005652:	4a06      	ldr	r2, [pc, #24]	@ (800566c <vPortFree+0xc4>)
 8005654:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005656:	f7fe fb63 	bl	8003d20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800565a:	bf00      	nop
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	20004a3c 	.word	0x20004a3c
 8005668:	20004a2c 	.word	0x20004a2c
 800566c:	20004a38 	.word	0x20004a38

08005670 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005676:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800567a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800567c:	4b27      	ldr	r3, [pc, #156]	@ (800571c <prvHeapInit+0xac>)
 800567e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00c      	beq.n	80056a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3307      	adds	r3, #7
 800568e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 0307 	bic.w	r3, r3, #7
 8005696:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	4a1f      	ldr	r2, [pc, #124]	@ (800571c <prvHeapInit+0xac>)
 80056a0:	4413      	add	r3, r2
 80056a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005720 <prvHeapInit+0xb0>)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005720 <prvHeapInit+0xb0>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	4413      	add	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056bc:	2208      	movs	r2, #8
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	1a9b      	subs	r3, r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f023 0307 	bic.w	r3, r3, #7
 80056ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4a15      	ldr	r2, [pc, #84]	@ (8005724 <prvHeapInit+0xb4>)
 80056d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056d2:	4b14      	ldr	r3, [pc, #80]	@ (8005724 <prvHeapInit+0xb4>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2200      	movs	r2, #0
 80056d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056da:	4b12      	ldr	r3, [pc, #72]	@ (8005724 <prvHeapInit+0xb4>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	1ad2      	subs	r2, r2, r3
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005724 <prvHeapInit+0xb4>)
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005728 <prvHeapInit+0xb8>)
 80056fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	4a09      	ldr	r2, [pc, #36]	@ (800572c <prvHeapInit+0xbc>)
 8005706:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005708:	4b09      	ldr	r3, [pc, #36]	@ (8005730 <prvHeapInit+0xc0>)
 800570a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800570e:	601a      	str	r2, [r3, #0]
}
 8005710:	bf00      	nop
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	20000e20 	.word	0x20000e20
 8005720:	20004a20 	.word	0x20004a20
 8005724:	20004a28 	.word	0x20004a28
 8005728:	20004a30 	.word	0x20004a30
 800572c:	20004a2c 	.word	0x20004a2c
 8005730:	20004a3c 	.word	0x20004a3c

08005734 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800573c:	4b28      	ldr	r3, [pc, #160]	@ (80057e0 <prvInsertBlockIntoFreeList+0xac>)
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	e002      	b.n	8005748 <prvInsertBlockIntoFreeList+0x14>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	429a      	cmp	r2, r3
 8005750:	d8f7      	bhi.n	8005742 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	4413      	add	r3, r2
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	429a      	cmp	r2, r3
 8005762:	d108      	bne.n	8005776 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	441a      	add	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	441a      	add	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	429a      	cmp	r2, r3
 8005788:	d118      	bne.n	80057bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	4b15      	ldr	r3, [pc, #84]	@ (80057e4 <prvInsertBlockIntoFreeList+0xb0>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d00d      	beq.n	80057b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	441a      	add	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	e008      	b.n	80057c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057b2:	4b0c      	ldr	r3, [pc, #48]	@ (80057e4 <prvInsertBlockIntoFreeList+0xb0>)
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	e003      	b.n	80057c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d002      	beq.n	80057d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057d2:	bf00      	nop
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	20004a20 	.word	0x20004a20
 80057e4:	20004a28 	.word	0x20004a28

080057e8 <_vsiprintf_r>:
 80057e8:	b510      	push	{r4, lr}
 80057ea:	b09a      	sub	sp, #104	@ 0x68
 80057ec:	2400      	movs	r4, #0
 80057ee:	9100      	str	r1, [sp, #0]
 80057f0:	9104      	str	r1, [sp, #16]
 80057f2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80057f6:	9105      	str	r1, [sp, #20]
 80057f8:	9102      	str	r1, [sp, #8]
 80057fa:	4905      	ldr	r1, [pc, #20]	@ (8005810 <_vsiprintf_r+0x28>)
 80057fc:	9103      	str	r1, [sp, #12]
 80057fe:	4669      	mov	r1, sp
 8005800:	9419      	str	r4, [sp, #100]	@ 0x64
 8005802:	f000 f9a7 	bl	8005b54 <_svfiprintf_r>
 8005806:	9b00      	ldr	r3, [sp, #0]
 8005808:	701c      	strb	r4, [r3, #0]
 800580a:	b01a      	add	sp, #104	@ 0x68
 800580c:	bd10      	pop	{r4, pc}
 800580e:	bf00      	nop
 8005810:	ffff0208 	.word	0xffff0208

08005814 <vsiprintf>:
 8005814:	4613      	mov	r3, r2
 8005816:	460a      	mov	r2, r1
 8005818:	4601      	mov	r1, r0
 800581a:	4802      	ldr	r0, [pc, #8]	@ (8005824 <vsiprintf+0x10>)
 800581c:	6800      	ldr	r0, [r0, #0]
 800581e:	f7ff bfe3 	b.w	80057e8 <_vsiprintf_r>
 8005822:	bf00      	nop
 8005824:	20000024 	.word	0x20000024

08005828 <memset>:
 8005828:	4402      	add	r2, r0
 800582a:	4603      	mov	r3, r0
 800582c:	4293      	cmp	r3, r2
 800582e:	d100      	bne.n	8005832 <memset+0xa>
 8005830:	4770      	bx	lr
 8005832:	f803 1b01 	strb.w	r1, [r3], #1
 8005836:	e7f9      	b.n	800582c <memset+0x4>

08005838 <__errno>:
 8005838:	4b01      	ldr	r3, [pc, #4]	@ (8005840 <__errno+0x8>)
 800583a:	6818      	ldr	r0, [r3, #0]
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	20000024 	.word	0x20000024

08005844 <__libc_init_array>:
 8005844:	b570      	push	{r4, r5, r6, lr}
 8005846:	4d0d      	ldr	r5, [pc, #52]	@ (800587c <__libc_init_array+0x38>)
 8005848:	4c0d      	ldr	r4, [pc, #52]	@ (8005880 <__libc_init_array+0x3c>)
 800584a:	1b64      	subs	r4, r4, r5
 800584c:	10a4      	asrs	r4, r4, #2
 800584e:	2600      	movs	r6, #0
 8005850:	42a6      	cmp	r6, r4
 8005852:	d109      	bne.n	8005868 <__libc_init_array+0x24>
 8005854:	4d0b      	ldr	r5, [pc, #44]	@ (8005884 <__libc_init_array+0x40>)
 8005856:	4c0c      	ldr	r4, [pc, #48]	@ (8005888 <__libc_init_array+0x44>)
 8005858:	f000 fc64 	bl	8006124 <_init>
 800585c:	1b64      	subs	r4, r4, r5
 800585e:	10a4      	asrs	r4, r4, #2
 8005860:	2600      	movs	r6, #0
 8005862:	42a6      	cmp	r6, r4
 8005864:	d105      	bne.n	8005872 <__libc_init_array+0x2e>
 8005866:	bd70      	pop	{r4, r5, r6, pc}
 8005868:	f855 3b04 	ldr.w	r3, [r5], #4
 800586c:	4798      	blx	r3
 800586e:	3601      	adds	r6, #1
 8005870:	e7ee      	b.n	8005850 <__libc_init_array+0xc>
 8005872:	f855 3b04 	ldr.w	r3, [r5], #4
 8005876:	4798      	blx	r3
 8005878:	3601      	adds	r6, #1
 800587a:	e7f2      	b.n	8005862 <__libc_init_array+0x1e>
 800587c:	080062a0 	.word	0x080062a0
 8005880:	080062a0 	.word	0x080062a0
 8005884:	080062a0 	.word	0x080062a0
 8005888:	080062a4 	.word	0x080062a4

0800588c <__retarget_lock_acquire_recursive>:
 800588c:	4770      	bx	lr

0800588e <__retarget_lock_release_recursive>:
 800588e:	4770      	bx	lr

08005890 <memcpy>:
 8005890:	440a      	add	r2, r1
 8005892:	4291      	cmp	r1, r2
 8005894:	f100 33ff 	add.w	r3, r0, #4294967295
 8005898:	d100      	bne.n	800589c <memcpy+0xc>
 800589a:	4770      	bx	lr
 800589c:	b510      	push	{r4, lr}
 800589e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058a6:	4291      	cmp	r1, r2
 80058a8:	d1f9      	bne.n	800589e <memcpy+0xe>
 80058aa:	bd10      	pop	{r4, pc}

080058ac <_free_r>:
 80058ac:	b538      	push	{r3, r4, r5, lr}
 80058ae:	4605      	mov	r5, r0
 80058b0:	2900      	cmp	r1, #0
 80058b2:	d041      	beq.n	8005938 <_free_r+0x8c>
 80058b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058b8:	1f0c      	subs	r4, r1, #4
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	bfb8      	it	lt
 80058be:	18e4      	addlt	r4, r4, r3
 80058c0:	f000 f8e0 	bl	8005a84 <__malloc_lock>
 80058c4:	4a1d      	ldr	r2, [pc, #116]	@ (800593c <_free_r+0x90>)
 80058c6:	6813      	ldr	r3, [r2, #0]
 80058c8:	b933      	cbnz	r3, 80058d8 <_free_r+0x2c>
 80058ca:	6063      	str	r3, [r4, #4]
 80058cc:	6014      	str	r4, [r2, #0]
 80058ce:	4628      	mov	r0, r5
 80058d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058d4:	f000 b8dc 	b.w	8005a90 <__malloc_unlock>
 80058d8:	42a3      	cmp	r3, r4
 80058da:	d908      	bls.n	80058ee <_free_r+0x42>
 80058dc:	6820      	ldr	r0, [r4, #0]
 80058de:	1821      	adds	r1, r4, r0
 80058e0:	428b      	cmp	r3, r1
 80058e2:	bf01      	itttt	eq
 80058e4:	6819      	ldreq	r1, [r3, #0]
 80058e6:	685b      	ldreq	r3, [r3, #4]
 80058e8:	1809      	addeq	r1, r1, r0
 80058ea:	6021      	streq	r1, [r4, #0]
 80058ec:	e7ed      	b.n	80058ca <_free_r+0x1e>
 80058ee:	461a      	mov	r2, r3
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	b10b      	cbz	r3, 80058f8 <_free_r+0x4c>
 80058f4:	42a3      	cmp	r3, r4
 80058f6:	d9fa      	bls.n	80058ee <_free_r+0x42>
 80058f8:	6811      	ldr	r1, [r2, #0]
 80058fa:	1850      	adds	r0, r2, r1
 80058fc:	42a0      	cmp	r0, r4
 80058fe:	d10b      	bne.n	8005918 <_free_r+0x6c>
 8005900:	6820      	ldr	r0, [r4, #0]
 8005902:	4401      	add	r1, r0
 8005904:	1850      	adds	r0, r2, r1
 8005906:	4283      	cmp	r3, r0
 8005908:	6011      	str	r1, [r2, #0]
 800590a:	d1e0      	bne.n	80058ce <_free_r+0x22>
 800590c:	6818      	ldr	r0, [r3, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	6053      	str	r3, [r2, #4]
 8005912:	4408      	add	r0, r1
 8005914:	6010      	str	r0, [r2, #0]
 8005916:	e7da      	b.n	80058ce <_free_r+0x22>
 8005918:	d902      	bls.n	8005920 <_free_r+0x74>
 800591a:	230c      	movs	r3, #12
 800591c:	602b      	str	r3, [r5, #0]
 800591e:	e7d6      	b.n	80058ce <_free_r+0x22>
 8005920:	6820      	ldr	r0, [r4, #0]
 8005922:	1821      	adds	r1, r4, r0
 8005924:	428b      	cmp	r3, r1
 8005926:	bf04      	itt	eq
 8005928:	6819      	ldreq	r1, [r3, #0]
 800592a:	685b      	ldreq	r3, [r3, #4]
 800592c:	6063      	str	r3, [r4, #4]
 800592e:	bf04      	itt	eq
 8005930:	1809      	addeq	r1, r1, r0
 8005932:	6021      	streq	r1, [r4, #0]
 8005934:	6054      	str	r4, [r2, #4]
 8005936:	e7ca      	b.n	80058ce <_free_r+0x22>
 8005938:	bd38      	pop	{r3, r4, r5, pc}
 800593a:	bf00      	nop
 800593c:	20004b84 	.word	0x20004b84

08005940 <sbrk_aligned>:
 8005940:	b570      	push	{r4, r5, r6, lr}
 8005942:	4e0f      	ldr	r6, [pc, #60]	@ (8005980 <sbrk_aligned+0x40>)
 8005944:	460c      	mov	r4, r1
 8005946:	6831      	ldr	r1, [r6, #0]
 8005948:	4605      	mov	r5, r0
 800594a:	b911      	cbnz	r1, 8005952 <sbrk_aligned+0x12>
 800594c:	f000 fba4 	bl	8006098 <_sbrk_r>
 8005950:	6030      	str	r0, [r6, #0]
 8005952:	4621      	mov	r1, r4
 8005954:	4628      	mov	r0, r5
 8005956:	f000 fb9f 	bl	8006098 <_sbrk_r>
 800595a:	1c43      	adds	r3, r0, #1
 800595c:	d103      	bne.n	8005966 <sbrk_aligned+0x26>
 800595e:	f04f 34ff 	mov.w	r4, #4294967295
 8005962:	4620      	mov	r0, r4
 8005964:	bd70      	pop	{r4, r5, r6, pc}
 8005966:	1cc4      	adds	r4, r0, #3
 8005968:	f024 0403 	bic.w	r4, r4, #3
 800596c:	42a0      	cmp	r0, r4
 800596e:	d0f8      	beq.n	8005962 <sbrk_aligned+0x22>
 8005970:	1a21      	subs	r1, r4, r0
 8005972:	4628      	mov	r0, r5
 8005974:	f000 fb90 	bl	8006098 <_sbrk_r>
 8005978:	3001      	adds	r0, #1
 800597a:	d1f2      	bne.n	8005962 <sbrk_aligned+0x22>
 800597c:	e7ef      	b.n	800595e <sbrk_aligned+0x1e>
 800597e:	bf00      	nop
 8005980:	20004b80 	.word	0x20004b80

08005984 <_malloc_r>:
 8005984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005988:	1ccd      	adds	r5, r1, #3
 800598a:	f025 0503 	bic.w	r5, r5, #3
 800598e:	3508      	adds	r5, #8
 8005990:	2d0c      	cmp	r5, #12
 8005992:	bf38      	it	cc
 8005994:	250c      	movcc	r5, #12
 8005996:	2d00      	cmp	r5, #0
 8005998:	4606      	mov	r6, r0
 800599a:	db01      	blt.n	80059a0 <_malloc_r+0x1c>
 800599c:	42a9      	cmp	r1, r5
 800599e:	d904      	bls.n	80059aa <_malloc_r+0x26>
 80059a0:	230c      	movs	r3, #12
 80059a2:	6033      	str	r3, [r6, #0]
 80059a4:	2000      	movs	r0, #0
 80059a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a80 <_malloc_r+0xfc>
 80059ae:	f000 f869 	bl	8005a84 <__malloc_lock>
 80059b2:	f8d8 3000 	ldr.w	r3, [r8]
 80059b6:	461c      	mov	r4, r3
 80059b8:	bb44      	cbnz	r4, 8005a0c <_malloc_r+0x88>
 80059ba:	4629      	mov	r1, r5
 80059bc:	4630      	mov	r0, r6
 80059be:	f7ff ffbf 	bl	8005940 <sbrk_aligned>
 80059c2:	1c43      	adds	r3, r0, #1
 80059c4:	4604      	mov	r4, r0
 80059c6:	d158      	bne.n	8005a7a <_malloc_r+0xf6>
 80059c8:	f8d8 4000 	ldr.w	r4, [r8]
 80059cc:	4627      	mov	r7, r4
 80059ce:	2f00      	cmp	r7, #0
 80059d0:	d143      	bne.n	8005a5a <_malloc_r+0xd6>
 80059d2:	2c00      	cmp	r4, #0
 80059d4:	d04b      	beq.n	8005a6e <_malloc_r+0xea>
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	4639      	mov	r1, r7
 80059da:	4630      	mov	r0, r6
 80059dc:	eb04 0903 	add.w	r9, r4, r3
 80059e0:	f000 fb5a 	bl	8006098 <_sbrk_r>
 80059e4:	4581      	cmp	r9, r0
 80059e6:	d142      	bne.n	8005a6e <_malloc_r+0xea>
 80059e8:	6821      	ldr	r1, [r4, #0]
 80059ea:	1a6d      	subs	r5, r5, r1
 80059ec:	4629      	mov	r1, r5
 80059ee:	4630      	mov	r0, r6
 80059f0:	f7ff ffa6 	bl	8005940 <sbrk_aligned>
 80059f4:	3001      	adds	r0, #1
 80059f6:	d03a      	beq.n	8005a6e <_malloc_r+0xea>
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	442b      	add	r3, r5
 80059fc:	6023      	str	r3, [r4, #0]
 80059fe:	f8d8 3000 	ldr.w	r3, [r8]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	bb62      	cbnz	r2, 8005a60 <_malloc_r+0xdc>
 8005a06:	f8c8 7000 	str.w	r7, [r8]
 8005a0a:	e00f      	b.n	8005a2c <_malloc_r+0xa8>
 8005a0c:	6822      	ldr	r2, [r4, #0]
 8005a0e:	1b52      	subs	r2, r2, r5
 8005a10:	d420      	bmi.n	8005a54 <_malloc_r+0xd0>
 8005a12:	2a0b      	cmp	r2, #11
 8005a14:	d917      	bls.n	8005a46 <_malloc_r+0xc2>
 8005a16:	1961      	adds	r1, r4, r5
 8005a18:	42a3      	cmp	r3, r4
 8005a1a:	6025      	str	r5, [r4, #0]
 8005a1c:	bf18      	it	ne
 8005a1e:	6059      	strne	r1, [r3, #4]
 8005a20:	6863      	ldr	r3, [r4, #4]
 8005a22:	bf08      	it	eq
 8005a24:	f8c8 1000 	streq.w	r1, [r8]
 8005a28:	5162      	str	r2, [r4, r5]
 8005a2a:	604b      	str	r3, [r1, #4]
 8005a2c:	4630      	mov	r0, r6
 8005a2e:	f000 f82f 	bl	8005a90 <__malloc_unlock>
 8005a32:	f104 000b 	add.w	r0, r4, #11
 8005a36:	1d23      	adds	r3, r4, #4
 8005a38:	f020 0007 	bic.w	r0, r0, #7
 8005a3c:	1ac2      	subs	r2, r0, r3
 8005a3e:	bf1c      	itt	ne
 8005a40:	1a1b      	subne	r3, r3, r0
 8005a42:	50a3      	strne	r3, [r4, r2]
 8005a44:	e7af      	b.n	80059a6 <_malloc_r+0x22>
 8005a46:	6862      	ldr	r2, [r4, #4]
 8005a48:	42a3      	cmp	r3, r4
 8005a4a:	bf0c      	ite	eq
 8005a4c:	f8c8 2000 	streq.w	r2, [r8]
 8005a50:	605a      	strne	r2, [r3, #4]
 8005a52:	e7eb      	b.n	8005a2c <_malloc_r+0xa8>
 8005a54:	4623      	mov	r3, r4
 8005a56:	6864      	ldr	r4, [r4, #4]
 8005a58:	e7ae      	b.n	80059b8 <_malloc_r+0x34>
 8005a5a:	463c      	mov	r4, r7
 8005a5c:	687f      	ldr	r7, [r7, #4]
 8005a5e:	e7b6      	b.n	80059ce <_malloc_r+0x4a>
 8005a60:	461a      	mov	r2, r3
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	42a3      	cmp	r3, r4
 8005a66:	d1fb      	bne.n	8005a60 <_malloc_r+0xdc>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	6053      	str	r3, [r2, #4]
 8005a6c:	e7de      	b.n	8005a2c <_malloc_r+0xa8>
 8005a6e:	230c      	movs	r3, #12
 8005a70:	6033      	str	r3, [r6, #0]
 8005a72:	4630      	mov	r0, r6
 8005a74:	f000 f80c 	bl	8005a90 <__malloc_unlock>
 8005a78:	e794      	b.n	80059a4 <_malloc_r+0x20>
 8005a7a:	6005      	str	r5, [r0, #0]
 8005a7c:	e7d6      	b.n	8005a2c <_malloc_r+0xa8>
 8005a7e:	bf00      	nop
 8005a80:	20004b84 	.word	0x20004b84

08005a84 <__malloc_lock>:
 8005a84:	4801      	ldr	r0, [pc, #4]	@ (8005a8c <__malloc_lock+0x8>)
 8005a86:	f7ff bf01 	b.w	800588c <__retarget_lock_acquire_recursive>
 8005a8a:	bf00      	nop
 8005a8c:	20004b7c 	.word	0x20004b7c

08005a90 <__malloc_unlock>:
 8005a90:	4801      	ldr	r0, [pc, #4]	@ (8005a98 <__malloc_unlock+0x8>)
 8005a92:	f7ff befc 	b.w	800588e <__retarget_lock_release_recursive>
 8005a96:	bf00      	nop
 8005a98:	20004b7c 	.word	0x20004b7c

08005a9c <__ssputs_r>:
 8005a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa0:	688e      	ldr	r6, [r1, #8]
 8005aa2:	461f      	mov	r7, r3
 8005aa4:	42be      	cmp	r6, r7
 8005aa6:	680b      	ldr	r3, [r1, #0]
 8005aa8:	4682      	mov	sl, r0
 8005aaa:	460c      	mov	r4, r1
 8005aac:	4690      	mov	r8, r2
 8005aae:	d82d      	bhi.n	8005b0c <__ssputs_r+0x70>
 8005ab0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ab4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005ab8:	d026      	beq.n	8005b08 <__ssputs_r+0x6c>
 8005aba:	6965      	ldr	r5, [r4, #20]
 8005abc:	6909      	ldr	r1, [r1, #16]
 8005abe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ac2:	eba3 0901 	sub.w	r9, r3, r1
 8005ac6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005aca:	1c7b      	adds	r3, r7, #1
 8005acc:	444b      	add	r3, r9
 8005ace:	106d      	asrs	r5, r5, #1
 8005ad0:	429d      	cmp	r5, r3
 8005ad2:	bf38      	it	cc
 8005ad4:	461d      	movcc	r5, r3
 8005ad6:	0553      	lsls	r3, r2, #21
 8005ad8:	d527      	bpl.n	8005b2a <__ssputs_r+0x8e>
 8005ada:	4629      	mov	r1, r5
 8005adc:	f7ff ff52 	bl	8005984 <_malloc_r>
 8005ae0:	4606      	mov	r6, r0
 8005ae2:	b360      	cbz	r0, 8005b3e <__ssputs_r+0xa2>
 8005ae4:	6921      	ldr	r1, [r4, #16]
 8005ae6:	464a      	mov	r2, r9
 8005ae8:	f7ff fed2 	bl	8005890 <memcpy>
 8005aec:	89a3      	ldrh	r3, [r4, #12]
 8005aee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005af6:	81a3      	strh	r3, [r4, #12]
 8005af8:	6126      	str	r6, [r4, #16]
 8005afa:	6165      	str	r5, [r4, #20]
 8005afc:	444e      	add	r6, r9
 8005afe:	eba5 0509 	sub.w	r5, r5, r9
 8005b02:	6026      	str	r6, [r4, #0]
 8005b04:	60a5      	str	r5, [r4, #8]
 8005b06:	463e      	mov	r6, r7
 8005b08:	42be      	cmp	r6, r7
 8005b0a:	d900      	bls.n	8005b0e <__ssputs_r+0x72>
 8005b0c:	463e      	mov	r6, r7
 8005b0e:	6820      	ldr	r0, [r4, #0]
 8005b10:	4632      	mov	r2, r6
 8005b12:	4641      	mov	r1, r8
 8005b14:	f000 faa6 	bl	8006064 <memmove>
 8005b18:	68a3      	ldr	r3, [r4, #8]
 8005b1a:	1b9b      	subs	r3, r3, r6
 8005b1c:	60a3      	str	r3, [r4, #8]
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	4433      	add	r3, r6
 8005b22:	6023      	str	r3, [r4, #0]
 8005b24:	2000      	movs	r0, #0
 8005b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b2a:	462a      	mov	r2, r5
 8005b2c:	f000 fac4 	bl	80060b8 <_realloc_r>
 8005b30:	4606      	mov	r6, r0
 8005b32:	2800      	cmp	r0, #0
 8005b34:	d1e0      	bne.n	8005af8 <__ssputs_r+0x5c>
 8005b36:	6921      	ldr	r1, [r4, #16]
 8005b38:	4650      	mov	r0, sl
 8005b3a:	f7ff feb7 	bl	80058ac <_free_r>
 8005b3e:	230c      	movs	r3, #12
 8005b40:	f8ca 3000 	str.w	r3, [sl]
 8005b44:	89a3      	ldrh	r3, [r4, #12]
 8005b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b4a:	81a3      	strh	r3, [r4, #12]
 8005b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b50:	e7e9      	b.n	8005b26 <__ssputs_r+0x8a>
	...

08005b54 <_svfiprintf_r>:
 8005b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b58:	4698      	mov	r8, r3
 8005b5a:	898b      	ldrh	r3, [r1, #12]
 8005b5c:	061b      	lsls	r3, r3, #24
 8005b5e:	b09d      	sub	sp, #116	@ 0x74
 8005b60:	4607      	mov	r7, r0
 8005b62:	460d      	mov	r5, r1
 8005b64:	4614      	mov	r4, r2
 8005b66:	d510      	bpl.n	8005b8a <_svfiprintf_r+0x36>
 8005b68:	690b      	ldr	r3, [r1, #16]
 8005b6a:	b973      	cbnz	r3, 8005b8a <_svfiprintf_r+0x36>
 8005b6c:	2140      	movs	r1, #64	@ 0x40
 8005b6e:	f7ff ff09 	bl	8005984 <_malloc_r>
 8005b72:	6028      	str	r0, [r5, #0]
 8005b74:	6128      	str	r0, [r5, #16]
 8005b76:	b930      	cbnz	r0, 8005b86 <_svfiprintf_r+0x32>
 8005b78:	230c      	movs	r3, #12
 8005b7a:	603b      	str	r3, [r7, #0]
 8005b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b80:	b01d      	add	sp, #116	@ 0x74
 8005b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b86:	2340      	movs	r3, #64	@ 0x40
 8005b88:	616b      	str	r3, [r5, #20]
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b8e:	2320      	movs	r3, #32
 8005b90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b94:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b98:	2330      	movs	r3, #48	@ 0x30
 8005b9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005d38 <_svfiprintf_r+0x1e4>
 8005b9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ba2:	f04f 0901 	mov.w	r9, #1
 8005ba6:	4623      	mov	r3, r4
 8005ba8:	469a      	mov	sl, r3
 8005baa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bae:	b10a      	cbz	r2, 8005bb4 <_svfiprintf_r+0x60>
 8005bb0:	2a25      	cmp	r2, #37	@ 0x25
 8005bb2:	d1f9      	bne.n	8005ba8 <_svfiprintf_r+0x54>
 8005bb4:	ebba 0b04 	subs.w	fp, sl, r4
 8005bb8:	d00b      	beq.n	8005bd2 <_svfiprintf_r+0x7e>
 8005bba:	465b      	mov	r3, fp
 8005bbc:	4622      	mov	r2, r4
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	4638      	mov	r0, r7
 8005bc2:	f7ff ff6b 	bl	8005a9c <__ssputs_r>
 8005bc6:	3001      	adds	r0, #1
 8005bc8:	f000 80a7 	beq.w	8005d1a <_svfiprintf_r+0x1c6>
 8005bcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bce:	445a      	add	r2, fp
 8005bd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f000 809f 	beq.w	8005d1a <_svfiprintf_r+0x1c6>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	f04f 32ff 	mov.w	r2, #4294967295
 8005be2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005be6:	f10a 0a01 	add.w	sl, sl, #1
 8005bea:	9304      	str	r3, [sp, #16]
 8005bec:	9307      	str	r3, [sp, #28]
 8005bee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bf2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bf4:	4654      	mov	r4, sl
 8005bf6:	2205      	movs	r2, #5
 8005bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bfc:	484e      	ldr	r0, [pc, #312]	@ (8005d38 <_svfiprintf_r+0x1e4>)
 8005bfe:	f7fa faf7 	bl	80001f0 <memchr>
 8005c02:	9a04      	ldr	r2, [sp, #16]
 8005c04:	b9d8      	cbnz	r0, 8005c3e <_svfiprintf_r+0xea>
 8005c06:	06d0      	lsls	r0, r2, #27
 8005c08:	bf44      	itt	mi
 8005c0a:	2320      	movmi	r3, #32
 8005c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c10:	0711      	lsls	r1, r2, #28
 8005c12:	bf44      	itt	mi
 8005c14:	232b      	movmi	r3, #43	@ 0x2b
 8005c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8005c1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c20:	d015      	beq.n	8005c4e <_svfiprintf_r+0xfa>
 8005c22:	9a07      	ldr	r2, [sp, #28]
 8005c24:	4654      	mov	r4, sl
 8005c26:	2000      	movs	r0, #0
 8005c28:	f04f 0c0a 	mov.w	ip, #10
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c32:	3b30      	subs	r3, #48	@ 0x30
 8005c34:	2b09      	cmp	r3, #9
 8005c36:	d94b      	bls.n	8005cd0 <_svfiprintf_r+0x17c>
 8005c38:	b1b0      	cbz	r0, 8005c68 <_svfiprintf_r+0x114>
 8005c3a:	9207      	str	r2, [sp, #28]
 8005c3c:	e014      	b.n	8005c68 <_svfiprintf_r+0x114>
 8005c3e:	eba0 0308 	sub.w	r3, r0, r8
 8005c42:	fa09 f303 	lsl.w	r3, r9, r3
 8005c46:	4313      	orrs	r3, r2
 8005c48:	9304      	str	r3, [sp, #16]
 8005c4a:	46a2      	mov	sl, r4
 8005c4c:	e7d2      	b.n	8005bf4 <_svfiprintf_r+0xa0>
 8005c4e:	9b03      	ldr	r3, [sp, #12]
 8005c50:	1d19      	adds	r1, r3, #4
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	9103      	str	r1, [sp, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	bfbb      	ittet	lt
 8005c5a:	425b      	neglt	r3, r3
 8005c5c:	f042 0202 	orrlt.w	r2, r2, #2
 8005c60:	9307      	strge	r3, [sp, #28]
 8005c62:	9307      	strlt	r3, [sp, #28]
 8005c64:	bfb8      	it	lt
 8005c66:	9204      	strlt	r2, [sp, #16]
 8005c68:	7823      	ldrb	r3, [r4, #0]
 8005c6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c6c:	d10a      	bne.n	8005c84 <_svfiprintf_r+0x130>
 8005c6e:	7863      	ldrb	r3, [r4, #1]
 8005c70:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c72:	d132      	bne.n	8005cda <_svfiprintf_r+0x186>
 8005c74:	9b03      	ldr	r3, [sp, #12]
 8005c76:	1d1a      	adds	r2, r3, #4
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	9203      	str	r2, [sp, #12]
 8005c7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c80:	3402      	adds	r4, #2
 8005c82:	9305      	str	r3, [sp, #20]
 8005c84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005d48 <_svfiprintf_r+0x1f4>
 8005c88:	7821      	ldrb	r1, [r4, #0]
 8005c8a:	2203      	movs	r2, #3
 8005c8c:	4650      	mov	r0, sl
 8005c8e:	f7fa faaf 	bl	80001f0 <memchr>
 8005c92:	b138      	cbz	r0, 8005ca4 <_svfiprintf_r+0x150>
 8005c94:	9b04      	ldr	r3, [sp, #16]
 8005c96:	eba0 000a 	sub.w	r0, r0, sl
 8005c9a:	2240      	movs	r2, #64	@ 0x40
 8005c9c:	4082      	lsls	r2, r0
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	3401      	adds	r4, #1
 8005ca2:	9304      	str	r3, [sp, #16]
 8005ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ca8:	4824      	ldr	r0, [pc, #144]	@ (8005d3c <_svfiprintf_r+0x1e8>)
 8005caa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005cae:	2206      	movs	r2, #6
 8005cb0:	f7fa fa9e 	bl	80001f0 <memchr>
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	d036      	beq.n	8005d26 <_svfiprintf_r+0x1d2>
 8005cb8:	4b21      	ldr	r3, [pc, #132]	@ (8005d40 <_svfiprintf_r+0x1ec>)
 8005cba:	bb1b      	cbnz	r3, 8005d04 <_svfiprintf_r+0x1b0>
 8005cbc:	9b03      	ldr	r3, [sp, #12]
 8005cbe:	3307      	adds	r3, #7
 8005cc0:	f023 0307 	bic.w	r3, r3, #7
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	9303      	str	r3, [sp, #12]
 8005cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cca:	4433      	add	r3, r6
 8005ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cce:	e76a      	b.n	8005ba6 <_svfiprintf_r+0x52>
 8005cd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cd4:	460c      	mov	r4, r1
 8005cd6:	2001      	movs	r0, #1
 8005cd8:	e7a8      	b.n	8005c2c <_svfiprintf_r+0xd8>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	3401      	adds	r4, #1
 8005cde:	9305      	str	r3, [sp, #20]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	f04f 0c0a 	mov.w	ip, #10
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cec:	3a30      	subs	r2, #48	@ 0x30
 8005cee:	2a09      	cmp	r2, #9
 8005cf0:	d903      	bls.n	8005cfa <_svfiprintf_r+0x1a6>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0c6      	beq.n	8005c84 <_svfiprintf_r+0x130>
 8005cf6:	9105      	str	r1, [sp, #20]
 8005cf8:	e7c4      	b.n	8005c84 <_svfiprintf_r+0x130>
 8005cfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cfe:	4604      	mov	r4, r0
 8005d00:	2301      	movs	r3, #1
 8005d02:	e7f0      	b.n	8005ce6 <_svfiprintf_r+0x192>
 8005d04:	ab03      	add	r3, sp, #12
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	462a      	mov	r2, r5
 8005d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8005d44 <_svfiprintf_r+0x1f0>)
 8005d0c:	a904      	add	r1, sp, #16
 8005d0e:	4638      	mov	r0, r7
 8005d10:	f3af 8000 	nop.w
 8005d14:	1c42      	adds	r2, r0, #1
 8005d16:	4606      	mov	r6, r0
 8005d18:	d1d6      	bne.n	8005cc8 <_svfiprintf_r+0x174>
 8005d1a:	89ab      	ldrh	r3, [r5, #12]
 8005d1c:	065b      	lsls	r3, r3, #25
 8005d1e:	f53f af2d 	bmi.w	8005b7c <_svfiprintf_r+0x28>
 8005d22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d24:	e72c      	b.n	8005b80 <_svfiprintf_r+0x2c>
 8005d26:	ab03      	add	r3, sp, #12
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	462a      	mov	r2, r5
 8005d2c:	4b05      	ldr	r3, [pc, #20]	@ (8005d44 <_svfiprintf_r+0x1f0>)
 8005d2e:	a904      	add	r1, sp, #16
 8005d30:	4638      	mov	r0, r7
 8005d32:	f000 f879 	bl	8005e28 <_printf_i>
 8005d36:	e7ed      	b.n	8005d14 <_svfiprintf_r+0x1c0>
 8005d38:	08006264 	.word	0x08006264
 8005d3c:	0800626e 	.word	0x0800626e
 8005d40:	00000000 	.word	0x00000000
 8005d44:	08005a9d 	.word	0x08005a9d
 8005d48:	0800626a 	.word	0x0800626a

08005d4c <_printf_common>:
 8005d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d50:	4616      	mov	r6, r2
 8005d52:	4698      	mov	r8, r3
 8005d54:	688a      	ldr	r2, [r1, #8]
 8005d56:	690b      	ldr	r3, [r1, #16]
 8005d58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	bfb8      	it	lt
 8005d60:	4613      	movlt	r3, r2
 8005d62:	6033      	str	r3, [r6, #0]
 8005d64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d68:	4607      	mov	r7, r0
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	b10a      	cbz	r2, 8005d72 <_printf_common+0x26>
 8005d6e:	3301      	adds	r3, #1
 8005d70:	6033      	str	r3, [r6, #0]
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	0699      	lsls	r1, r3, #26
 8005d76:	bf42      	ittt	mi
 8005d78:	6833      	ldrmi	r3, [r6, #0]
 8005d7a:	3302      	addmi	r3, #2
 8005d7c:	6033      	strmi	r3, [r6, #0]
 8005d7e:	6825      	ldr	r5, [r4, #0]
 8005d80:	f015 0506 	ands.w	r5, r5, #6
 8005d84:	d106      	bne.n	8005d94 <_printf_common+0x48>
 8005d86:	f104 0a19 	add.w	sl, r4, #25
 8005d8a:	68e3      	ldr	r3, [r4, #12]
 8005d8c:	6832      	ldr	r2, [r6, #0]
 8005d8e:	1a9b      	subs	r3, r3, r2
 8005d90:	42ab      	cmp	r3, r5
 8005d92:	dc26      	bgt.n	8005de2 <_printf_common+0x96>
 8005d94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d98:	6822      	ldr	r2, [r4, #0]
 8005d9a:	3b00      	subs	r3, #0
 8005d9c:	bf18      	it	ne
 8005d9e:	2301      	movne	r3, #1
 8005da0:	0692      	lsls	r2, r2, #26
 8005da2:	d42b      	bmi.n	8005dfc <_printf_common+0xb0>
 8005da4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005da8:	4641      	mov	r1, r8
 8005daa:	4638      	mov	r0, r7
 8005dac:	47c8      	blx	r9
 8005dae:	3001      	adds	r0, #1
 8005db0:	d01e      	beq.n	8005df0 <_printf_common+0xa4>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	6922      	ldr	r2, [r4, #16]
 8005db6:	f003 0306 	and.w	r3, r3, #6
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	bf02      	ittt	eq
 8005dbe:	68e5      	ldreq	r5, [r4, #12]
 8005dc0:	6833      	ldreq	r3, [r6, #0]
 8005dc2:	1aed      	subeq	r5, r5, r3
 8005dc4:	68a3      	ldr	r3, [r4, #8]
 8005dc6:	bf0c      	ite	eq
 8005dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dcc:	2500      	movne	r5, #0
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	bfc4      	itt	gt
 8005dd2:	1a9b      	subgt	r3, r3, r2
 8005dd4:	18ed      	addgt	r5, r5, r3
 8005dd6:	2600      	movs	r6, #0
 8005dd8:	341a      	adds	r4, #26
 8005dda:	42b5      	cmp	r5, r6
 8005ddc:	d11a      	bne.n	8005e14 <_printf_common+0xc8>
 8005dde:	2000      	movs	r0, #0
 8005de0:	e008      	b.n	8005df4 <_printf_common+0xa8>
 8005de2:	2301      	movs	r3, #1
 8005de4:	4652      	mov	r2, sl
 8005de6:	4641      	mov	r1, r8
 8005de8:	4638      	mov	r0, r7
 8005dea:	47c8      	blx	r9
 8005dec:	3001      	adds	r0, #1
 8005dee:	d103      	bne.n	8005df8 <_printf_common+0xac>
 8005df0:	f04f 30ff 	mov.w	r0, #4294967295
 8005df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df8:	3501      	adds	r5, #1
 8005dfa:	e7c6      	b.n	8005d8a <_printf_common+0x3e>
 8005dfc:	18e1      	adds	r1, r4, r3
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	2030      	movs	r0, #48	@ 0x30
 8005e02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e06:	4422      	add	r2, r4
 8005e08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e10:	3302      	adds	r3, #2
 8005e12:	e7c7      	b.n	8005da4 <_printf_common+0x58>
 8005e14:	2301      	movs	r3, #1
 8005e16:	4622      	mov	r2, r4
 8005e18:	4641      	mov	r1, r8
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	47c8      	blx	r9
 8005e1e:	3001      	adds	r0, #1
 8005e20:	d0e6      	beq.n	8005df0 <_printf_common+0xa4>
 8005e22:	3601      	adds	r6, #1
 8005e24:	e7d9      	b.n	8005dda <_printf_common+0x8e>
	...

08005e28 <_printf_i>:
 8005e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e2c:	7e0f      	ldrb	r7, [r1, #24]
 8005e2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e30:	2f78      	cmp	r7, #120	@ 0x78
 8005e32:	4691      	mov	r9, r2
 8005e34:	4680      	mov	r8, r0
 8005e36:	460c      	mov	r4, r1
 8005e38:	469a      	mov	sl, r3
 8005e3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e3e:	d807      	bhi.n	8005e50 <_printf_i+0x28>
 8005e40:	2f62      	cmp	r7, #98	@ 0x62
 8005e42:	d80a      	bhi.n	8005e5a <_printf_i+0x32>
 8005e44:	2f00      	cmp	r7, #0
 8005e46:	f000 80d1 	beq.w	8005fec <_printf_i+0x1c4>
 8005e4a:	2f58      	cmp	r7, #88	@ 0x58
 8005e4c:	f000 80b8 	beq.w	8005fc0 <_printf_i+0x198>
 8005e50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e58:	e03a      	b.n	8005ed0 <_printf_i+0xa8>
 8005e5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e5e:	2b15      	cmp	r3, #21
 8005e60:	d8f6      	bhi.n	8005e50 <_printf_i+0x28>
 8005e62:	a101      	add	r1, pc, #4	@ (adr r1, 8005e68 <_printf_i+0x40>)
 8005e64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e68:	08005ec1 	.word	0x08005ec1
 8005e6c:	08005ed5 	.word	0x08005ed5
 8005e70:	08005e51 	.word	0x08005e51
 8005e74:	08005e51 	.word	0x08005e51
 8005e78:	08005e51 	.word	0x08005e51
 8005e7c:	08005e51 	.word	0x08005e51
 8005e80:	08005ed5 	.word	0x08005ed5
 8005e84:	08005e51 	.word	0x08005e51
 8005e88:	08005e51 	.word	0x08005e51
 8005e8c:	08005e51 	.word	0x08005e51
 8005e90:	08005e51 	.word	0x08005e51
 8005e94:	08005fd3 	.word	0x08005fd3
 8005e98:	08005eff 	.word	0x08005eff
 8005e9c:	08005f8d 	.word	0x08005f8d
 8005ea0:	08005e51 	.word	0x08005e51
 8005ea4:	08005e51 	.word	0x08005e51
 8005ea8:	08005ff5 	.word	0x08005ff5
 8005eac:	08005e51 	.word	0x08005e51
 8005eb0:	08005eff 	.word	0x08005eff
 8005eb4:	08005e51 	.word	0x08005e51
 8005eb8:	08005e51 	.word	0x08005e51
 8005ebc:	08005f95 	.word	0x08005f95
 8005ec0:	6833      	ldr	r3, [r6, #0]
 8005ec2:	1d1a      	adds	r2, r3, #4
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6032      	str	r2, [r6, #0]
 8005ec8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ecc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e09c      	b.n	800600e <_printf_i+0x1e6>
 8005ed4:	6833      	ldr	r3, [r6, #0]
 8005ed6:	6820      	ldr	r0, [r4, #0]
 8005ed8:	1d19      	adds	r1, r3, #4
 8005eda:	6031      	str	r1, [r6, #0]
 8005edc:	0606      	lsls	r6, r0, #24
 8005ede:	d501      	bpl.n	8005ee4 <_printf_i+0xbc>
 8005ee0:	681d      	ldr	r5, [r3, #0]
 8005ee2:	e003      	b.n	8005eec <_printf_i+0xc4>
 8005ee4:	0645      	lsls	r5, r0, #25
 8005ee6:	d5fb      	bpl.n	8005ee0 <_printf_i+0xb8>
 8005ee8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005eec:	2d00      	cmp	r5, #0
 8005eee:	da03      	bge.n	8005ef8 <_printf_i+0xd0>
 8005ef0:	232d      	movs	r3, #45	@ 0x2d
 8005ef2:	426d      	negs	r5, r5
 8005ef4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ef8:	4858      	ldr	r0, [pc, #352]	@ (800605c <_printf_i+0x234>)
 8005efa:	230a      	movs	r3, #10
 8005efc:	e011      	b.n	8005f22 <_printf_i+0xfa>
 8005efe:	6821      	ldr	r1, [r4, #0]
 8005f00:	6833      	ldr	r3, [r6, #0]
 8005f02:	0608      	lsls	r0, r1, #24
 8005f04:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f08:	d402      	bmi.n	8005f10 <_printf_i+0xe8>
 8005f0a:	0649      	lsls	r1, r1, #25
 8005f0c:	bf48      	it	mi
 8005f0e:	b2ad      	uxthmi	r5, r5
 8005f10:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f12:	4852      	ldr	r0, [pc, #328]	@ (800605c <_printf_i+0x234>)
 8005f14:	6033      	str	r3, [r6, #0]
 8005f16:	bf14      	ite	ne
 8005f18:	230a      	movne	r3, #10
 8005f1a:	2308      	moveq	r3, #8
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f22:	6866      	ldr	r6, [r4, #4]
 8005f24:	60a6      	str	r6, [r4, #8]
 8005f26:	2e00      	cmp	r6, #0
 8005f28:	db05      	blt.n	8005f36 <_printf_i+0x10e>
 8005f2a:	6821      	ldr	r1, [r4, #0]
 8005f2c:	432e      	orrs	r6, r5
 8005f2e:	f021 0104 	bic.w	r1, r1, #4
 8005f32:	6021      	str	r1, [r4, #0]
 8005f34:	d04b      	beq.n	8005fce <_printf_i+0x1a6>
 8005f36:	4616      	mov	r6, r2
 8005f38:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f3c:	fb03 5711 	mls	r7, r3, r1, r5
 8005f40:	5dc7      	ldrb	r7, [r0, r7]
 8005f42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f46:	462f      	mov	r7, r5
 8005f48:	42bb      	cmp	r3, r7
 8005f4a:	460d      	mov	r5, r1
 8005f4c:	d9f4      	bls.n	8005f38 <_printf_i+0x110>
 8005f4e:	2b08      	cmp	r3, #8
 8005f50:	d10b      	bne.n	8005f6a <_printf_i+0x142>
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	07df      	lsls	r7, r3, #31
 8005f56:	d508      	bpl.n	8005f6a <_printf_i+0x142>
 8005f58:	6923      	ldr	r3, [r4, #16]
 8005f5a:	6861      	ldr	r1, [r4, #4]
 8005f5c:	4299      	cmp	r1, r3
 8005f5e:	bfde      	ittt	le
 8005f60:	2330      	movle	r3, #48	@ 0x30
 8005f62:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f66:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f6a:	1b92      	subs	r2, r2, r6
 8005f6c:	6122      	str	r2, [r4, #16]
 8005f6e:	f8cd a000 	str.w	sl, [sp]
 8005f72:	464b      	mov	r3, r9
 8005f74:	aa03      	add	r2, sp, #12
 8005f76:	4621      	mov	r1, r4
 8005f78:	4640      	mov	r0, r8
 8005f7a:	f7ff fee7 	bl	8005d4c <_printf_common>
 8005f7e:	3001      	adds	r0, #1
 8005f80:	d14a      	bne.n	8006018 <_printf_i+0x1f0>
 8005f82:	f04f 30ff 	mov.w	r0, #4294967295
 8005f86:	b004      	add	sp, #16
 8005f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	f043 0320 	orr.w	r3, r3, #32
 8005f92:	6023      	str	r3, [r4, #0]
 8005f94:	4832      	ldr	r0, [pc, #200]	@ (8006060 <_printf_i+0x238>)
 8005f96:	2778      	movs	r7, #120	@ 0x78
 8005f98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	6831      	ldr	r1, [r6, #0]
 8005fa0:	061f      	lsls	r7, r3, #24
 8005fa2:	f851 5b04 	ldr.w	r5, [r1], #4
 8005fa6:	d402      	bmi.n	8005fae <_printf_i+0x186>
 8005fa8:	065f      	lsls	r7, r3, #25
 8005faa:	bf48      	it	mi
 8005fac:	b2ad      	uxthmi	r5, r5
 8005fae:	6031      	str	r1, [r6, #0]
 8005fb0:	07d9      	lsls	r1, r3, #31
 8005fb2:	bf44      	itt	mi
 8005fb4:	f043 0320 	orrmi.w	r3, r3, #32
 8005fb8:	6023      	strmi	r3, [r4, #0]
 8005fba:	b11d      	cbz	r5, 8005fc4 <_printf_i+0x19c>
 8005fbc:	2310      	movs	r3, #16
 8005fbe:	e7ad      	b.n	8005f1c <_printf_i+0xf4>
 8005fc0:	4826      	ldr	r0, [pc, #152]	@ (800605c <_printf_i+0x234>)
 8005fc2:	e7e9      	b.n	8005f98 <_printf_i+0x170>
 8005fc4:	6823      	ldr	r3, [r4, #0]
 8005fc6:	f023 0320 	bic.w	r3, r3, #32
 8005fca:	6023      	str	r3, [r4, #0]
 8005fcc:	e7f6      	b.n	8005fbc <_printf_i+0x194>
 8005fce:	4616      	mov	r6, r2
 8005fd0:	e7bd      	b.n	8005f4e <_printf_i+0x126>
 8005fd2:	6833      	ldr	r3, [r6, #0]
 8005fd4:	6825      	ldr	r5, [r4, #0]
 8005fd6:	6961      	ldr	r1, [r4, #20]
 8005fd8:	1d18      	adds	r0, r3, #4
 8005fda:	6030      	str	r0, [r6, #0]
 8005fdc:	062e      	lsls	r6, r5, #24
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	d501      	bpl.n	8005fe6 <_printf_i+0x1be>
 8005fe2:	6019      	str	r1, [r3, #0]
 8005fe4:	e002      	b.n	8005fec <_printf_i+0x1c4>
 8005fe6:	0668      	lsls	r0, r5, #25
 8005fe8:	d5fb      	bpl.n	8005fe2 <_printf_i+0x1ba>
 8005fea:	8019      	strh	r1, [r3, #0]
 8005fec:	2300      	movs	r3, #0
 8005fee:	6123      	str	r3, [r4, #16]
 8005ff0:	4616      	mov	r6, r2
 8005ff2:	e7bc      	b.n	8005f6e <_printf_i+0x146>
 8005ff4:	6833      	ldr	r3, [r6, #0]
 8005ff6:	1d1a      	adds	r2, r3, #4
 8005ff8:	6032      	str	r2, [r6, #0]
 8005ffa:	681e      	ldr	r6, [r3, #0]
 8005ffc:	6862      	ldr	r2, [r4, #4]
 8005ffe:	2100      	movs	r1, #0
 8006000:	4630      	mov	r0, r6
 8006002:	f7fa f8f5 	bl	80001f0 <memchr>
 8006006:	b108      	cbz	r0, 800600c <_printf_i+0x1e4>
 8006008:	1b80      	subs	r0, r0, r6
 800600a:	6060      	str	r0, [r4, #4]
 800600c:	6863      	ldr	r3, [r4, #4]
 800600e:	6123      	str	r3, [r4, #16]
 8006010:	2300      	movs	r3, #0
 8006012:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006016:	e7aa      	b.n	8005f6e <_printf_i+0x146>
 8006018:	6923      	ldr	r3, [r4, #16]
 800601a:	4632      	mov	r2, r6
 800601c:	4649      	mov	r1, r9
 800601e:	4640      	mov	r0, r8
 8006020:	47d0      	blx	sl
 8006022:	3001      	adds	r0, #1
 8006024:	d0ad      	beq.n	8005f82 <_printf_i+0x15a>
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	079b      	lsls	r3, r3, #30
 800602a:	d413      	bmi.n	8006054 <_printf_i+0x22c>
 800602c:	68e0      	ldr	r0, [r4, #12]
 800602e:	9b03      	ldr	r3, [sp, #12]
 8006030:	4298      	cmp	r0, r3
 8006032:	bfb8      	it	lt
 8006034:	4618      	movlt	r0, r3
 8006036:	e7a6      	b.n	8005f86 <_printf_i+0x15e>
 8006038:	2301      	movs	r3, #1
 800603a:	4632      	mov	r2, r6
 800603c:	4649      	mov	r1, r9
 800603e:	4640      	mov	r0, r8
 8006040:	47d0      	blx	sl
 8006042:	3001      	adds	r0, #1
 8006044:	d09d      	beq.n	8005f82 <_printf_i+0x15a>
 8006046:	3501      	adds	r5, #1
 8006048:	68e3      	ldr	r3, [r4, #12]
 800604a:	9903      	ldr	r1, [sp, #12]
 800604c:	1a5b      	subs	r3, r3, r1
 800604e:	42ab      	cmp	r3, r5
 8006050:	dcf2      	bgt.n	8006038 <_printf_i+0x210>
 8006052:	e7eb      	b.n	800602c <_printf_i+0x204>
 8006054:	2500      	movs	r5, #0
 8006056:	f104 0619 	add.w	r6, r4, #25
 800605a:	e7f5      	b.n	8006048 <_printf_i+0x220>
 800605c:	08006275 	.word	0x08006275
 8006060:	08006286 	.word	0x08006286

08006064 <memmove>:
 8006064:	4288      	cmp	r0, r1
 8006066:	b510      	push	{r4, lr}
 8006068:	eb01 0402 	add.w	r4, r1, r2
 800606c:	d902      	bls.n	8006074 <memmove+0x10>
 800606e:	4284      	cmp	r4, r0
 8006070:	4623      	mov	r3, r4
 8006072:	d807      	bhi.n	8006084 <memmove+0x20>
 8006074:	1e43      	subs	r3, r0, #1
 8006076:	42a1      	cmp	r1, r4
 8006078:	d008      	beq.n	800608c <memmove+0x28>
 800607a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800607e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006082:	e7f8      	b.n	8006076 <memmove+0x12>
 8006084:	4402      	add	r2, r0
 8006086:	4601      	mov	r1, r0
 8006088:	428a      	cmp	r2, r1
 800608a:	d100      	bne.n	800608e <memmove+0x2a>
 800608c:	bd10      	pop	{r4, pc}
 800608e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006092:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006096:	e7f7      	b.n	8006088 <memmove+0x24>

08006098 <_sbrk_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	4d06      	ldr	r5, [pc, #24]	@ (80060b4 <_sbrk_r+0x1c>)
 800609c:	2300      	movs	r3, #0
 800609e:	4604      	mov	r4, r0
 80060a0:	4608      	mov	r0, r1
 80060a2:	602b      	str	r3, [r5, #0]
 80060a4:	f7fa fcd0 	bl	8000a48 <_sbrk>
 80060a8:	1c43      	adds	r3, r0, #1
 80060aa:	d102      	bne.n	80060b2 <_sbrk_r+0x1a>
 80060ac:	682b      	ldr	r3, [r5, #0]
 80060ae:	b103      	cbz	r3, 80060b2 <_sbrk_r+0x1a>
 80060b0:	6023      	str	r3, [r4, #0]
 80060b2:	bd38      	pop	{r3, r4, r5, pc}
 80060b4:	20004b78 	.word	0x20004b78

080060b8 <_realloc_r>:
 80060b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060bc:	4607      	mov	r7, r0
 80060be:	4614      	mov	r4, r2
 80060c0:	460d      	mov	r5, r1
 80060c2:	b921      	cbnz	r1, 80060ce <_realloc_r+0x16>
 80060c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060c8:	4611      	mov	r1, r2
 80060ca:	f7ff bc5b 	b.w	8005984 <_malloc_r>
 80060ce:	b92a      	cbnz	r2, 80060dc <_realloc_r+0x24>
 80060d0:	f7ff fbec 	bl	80058ac <_free_r>
 80060d4:	4625      	mov	r5, r4
 80060d6:	4628      	mov	r0, r5
 80060d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060dc:	f000 f81a 	bl	8006114 <_malloc_usable_size_r>
 80060e0:	4284      	cmp	r4, r0
 80060e2:	4606      	mov	r6, r0
 80060e4:	d802      	bhi.n	80060ec <_realloc_r+0x34>
 80060e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80060ea:	d8f4      	bhi.n	80060d6 <_realloc_r+0x1e>
 80060ec:	4621      	mov	r1, r4
 80060ee:	4638      	mov	r0, r7
 80060f0:	f7ff fc48 	bl	8005984 <_malloc_r>
 80060f4:	4680      	mov	r8, r0
 80060f6:	b908      	cbnz	r0, 80060fc <_realloc_r+0x44>
 80060f8:	4645      	mov	r5, r8
 80060fa:	e7ec      	b.n	80060d6 <_realloc_r+0x1e>
 80060fc:	42b4      	cmp	r4, r6
 80060fe:	4622      	mov	r2, r4
 8006100:	4629      	mov	r1, r5
 8006102:	bf28      	it	cs
 8006104:	4632      	movcs	r2, r6
 8006106:	f7ff fbc3 	bl	8005890 <memcpy>
 800610a:	4629      	mov	r1, r5
 800610c:	4638      	mov	r0, r7
 800610e:	f7ff fbcd 	bl	80058ac <_free_r>
 8006112:	e7f1      	b.n	80060f8 <_realloc_r+0x40>

08006114 <_malloc_usable_size_r>:
 8006114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006118:	1f18      	subs	r0, r3, #4
 800611a:	2b00      	cmp	r3, #0
 800611c:	bfbc      	itt	lt
 800611e:	580b      	ldrlt	r3, [r1, r0]
 8006120:	18c0      	addlt	r0, r0, r3
 8006122:	4770      	bx	lr

08006124 <_init>:
 8006124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006126:	bf00      	nop
 8006128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800612a:	bc08      	pop	{r3}
 800612c:	469e      	mov	lr, r3
 800612e:	4770      	bx	lr

08006130 <_fini>:
 8006130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006132:	bf00      	nop
 8006134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006136:	bc08      	pop	{r3}
 8006138:	469e      	mov	lr, r3
 800613a:	4770      	bx	lr
