
prj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057b4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08005954  08005954  00006954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ab4  08005ab4  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005ab4  08005ab4  00006ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005abc  08005abc  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005abc  08005abc  00006abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ac0  08005ac0  00006ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005ac4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049d4  20000010  08005ad4  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049e4  08005ad4  000079e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011150  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ae  00000000  00000000  00018190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  0001aa40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b03  00000000  00000000  0001b898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003092  00000000  00000000  0001c39b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff1b  00000000  00000000  0001f42d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fa81  00000000  00000000  0002f348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bedc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b38  00000000  00000000  000bee0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000c2944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800593c 	.word	0x0800593c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	0800593c 	.word	0x0800593c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b988 	b.w	8000518 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	468e      	mov	lr, r1
 8000228:	4604      	mov	r4, r0
 800022a:	4688      	mov	r8, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d962      	bls.n	80002fc <__udivmoddi4+0xdc>
 8000236:	fab2 f682 	clz	r6, r2
 800023a:	b14e      	cbz	r6, 8000250 <__udivmoddi4+0x30>
 800023c:	f1c6 0320 	rsb	r3, r6, #32
 8000240:	fa01 f806 	lsl.w	r8, r1, r6
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	40b7      	lsls	r7, r6
 800024a:	ea43 0808 	orr.w	r8, r3, r8
 800024e:	40b4      	lsls	r4, r6
 8000250:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000254:	fa1f fc87 	uxth.w	ip, r7
 8000258:	fbb8 f1fe 	udiv	r1, r8, lr
 800025c:	0c23      	lsrs	r3, r4, #16
 800025e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000262:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000266:	fb01 f20c 	mul.w	r2, r1, ip
 800026a:	429a      	cmp	r2, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x62>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f101 30ff 	add.w	r0, r1, #4294967295
 8000274:	f080 80ea 	bcs.w	800044c <__udivmoddi4+0x22c>
 8000278:	429a      	cmp	r2, r3
 800027a:	f240 80e7 	bls.w	800044c <__udivmoddi4+0x22c>
 800027e:	3902      	subs	r1, #2
 8000280:	443b      	add	r3, r7
 8000282:	1a9a      	subs	r2, r3, r2
 8000284:	b2a3      	uxth	r3, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000292:	fb00 fc0c 	mul.w	ip, r0, ip
 8000296:	459c      	cmp	ip, r3
 8000298:	d909      	bls.n	80002ae <__udivmoddi4+0x8e>
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a0:	f080 80d6 	bcs.w	8000450 <__udivmoddi4+0x230>
 80002a4:	459c      	cmp	ip, r3
 80002a6:	f240 80d3 	bls.w	8000450 <__udivmoddi4+0x230>
 80002aa:	443b      	add	r3, r7
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b2:	eba3 030c 	sub.w	r3, r3, ip
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40f3      	lsrs	r3, r6
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xb6>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb0>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x14c>
 80002de:	4573      	cmp	r3, lr
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xc8>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 8105 	bhi.w	80004f2 <__udivmoddi4+0x2d2>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4690      	mov	r8, r2
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e5      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002f6:	e9c5 4800 	strd	r4, r8, [r5]
 80002fa:	e7e2      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f000 8090 	beq.w	8000422 <__udivmoddi4+0x202>
 8000302:	fab2 f682 	clz	r6, r2
 8000306:	2e00      	cmp	r6, #0
 8000308:	f040 80a4 	bne.w	8000454 <__udivmoddi4+0x234>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	0c03      	lsrs	r3, r0, #16
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	b280      	uxth	r0, r0
 8000316:	b2bc      	uxth	r4, r7
 8000318:	2101      	movs	r1, #1
 800031a:	fbb2 fcfe 	udiv	ip, r2, lr
 800031e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000326:	fb04 f20c 	mul.w	r2, r4, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d907      	bls.n	800033e <__udivmoddi4+0x11e>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x11c>
 8000336:	429a      	cmp	r2, r3
 8000338:	f200 80e0 	bhi.w	80004fc <__udivmoddi4+0x2dc>
 800033c:	46c4      	mov	ip, r8
 800033e:	1a9b      	subs	r3, r3, r2
 8000340:	fbb3 f2fe 	udiv	r2, r3, lr
 8000344:	fb0e 3312 	mls	r3, lr, r2, r3
 8000348:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800034c:	fb02 f404 	mul.w	r4, r2, r4
 8000350:	429c      	cmp	r4, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x144>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f102 30ff 	add.w	r0, r2, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x142>
 800035c:	429c      	cmp	r4, r3
 800035e:	f200 80ca 	bhi.w	80004f6 <__udivmoddi4+0x2d6>
 8000362:	4602      	mov	r2, r0
 8000364:	1b1b      	subs	r3, r3, r4
 8000366:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x98>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa0e f401 	lsl.w	r4, lr, r1
 800037c:	fa20 f306 	lsr.w	r3, r0, r6
 8000380:	fa2e fe06 	lsr.w	lr, lr, r6
 8000384:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	fa1f fc87 	uxth.w	ip, r7
 8000392:	fbbe f0f9 	udiv	r0, lr, r9
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	fb09 ee10 	mls	lr, r9, r0, lr
 800039c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1a0>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80003b2:	f080 809c 	bcs.w	80004ee <__udivmoddi4+0x2ce>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f240 8099 	bls.w	80004ee <__udivmoddi4+0x2ce>
 80003bc:	3802      	subs	r0, #2
 80003be:	443c      	add	r4, r7
 80003c0:	eba4 040e 	sub.w	r4, r4, lr
 80003c4:	fa1f fe83 	uxth.w	lr, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d8:	45a4      	cmp	ip, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1ce>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f103 3eff 	add.w	lr, r3, #4294967295
 80003e2:	f080 8082 	bcs.w	80004ea <__udivmoddi4+0x2ca>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d97f      	bls.n	80004ea <__udivmoddi4+0x2ca>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003fa:	4564      	cmp	r4, ip
 80003fc:	4673      	mov	r3, lr
 80003fe:	46e1      	mov	r9, ip
 8000400:	d362      	bcc.n	80004c8 <__udivmoddi4+0x2a8>
 8000402:	d05f      	beq.n	80004c4 <__udivmoddi4+0x2a4>
 8000404:	b15d      	cbz	r5, 800041e <__udivmoddi4+0x1fe>
 8000406:	ebb8 0203 	subs.w	r2, r8, r3
 800040a:	eb64 0409 	sbc.w	r4, r4, r9
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	fa22 f301 	lsr.w	r3, r2, r1
 8000416:	431e      	orrs	r6, r3
 8000418:	40cc      	lsrs	r4, r1
 800041a:	e9c5 6400 	strd	r6, r4, [r5]
 800041e:	2100      	movs	r1, #0
 8000420:	e74f      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000422:	fbb1 fcf2 	udiv	ip, r1, r2
 8000426:	0c01      	lsrs	r1, r0, #16
 8000428:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800042c:	b280      	uxth	r0, r0
 800042e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000432:	463b      	mov	r3, r7
 8000434:	4638      	mov	r0, r7
 8000436:	463c      	mov	r4, r7
 8000438:	46b8      	mov	r8, r7
 800043a:	46be      	mov	lr, r7
 800043c:	2620      	movs	r6, #32
 800043e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000442:	eba2 0208 	sub.w	r2, r2, r8
 8000446:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800044a:	e766      	b.n	800031a <__udivmoddi4+0xfa>
 800044c:	4601      	mov	r1, r0
 800044e:	e718      	b.n	8000282 <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e72c      	b.n	80002ae <__udivmoddi4+0x8e>
 8000454:	f1c6 0220 	rsb	r2, r6, #32
 8000458:	fa2e f302 	lsr.w	r3, lr, r2
 800045c:	40b7      	lsls	r7, r6
 800045e:	40b1      	lsls	r1, r6
 8000460:	fa20 f202 	lsr.w	r2, r0, r2
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	430a      	orrs	r2, r1
 800046a:	fbb3 f8fe 	udiv	r8, r3, lr
 800046e:	b2bc      	uxth	r4, r7
 8000470:	fb0e 3318 	mls	r3, lr, r8, r3
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb08 f904 	mul.w	r9, r8, r4
 800047e:	40b0      	lsls	r0, r6
 8000480:	4589      	cmp	r9, r1
 8000482:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000486:	b280      	uxth	r0, r0
 8000488:	d93e      	bls.n	8000508 <__udivmoddi4+0x2e8>
 800048a:	1879      	adds	r1, r7, r1
 800048c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x276>
 8000492:	4589      	cmp	r9, r1
 8000494:	d81f      	bhi.n	80004d6 <__udivmoddi4+0x2b6>
 8000496:	eba1 0109 	sub.w	r1, r1, r9
 800049a:	fbb1 f9fe 	udiv	r9, r1, lr
 800049e:	fb09 f804 	mul.w	r8, r9, r4
 80004a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a6:	b292      	uxth	r2, r2
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d229      	bcs.n	8000504 <__udivmoddi4+0x2e4>
 80004b0:	18ba      	adds	r2, r7, r2
 80004b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b6:	d2c4      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d2c2      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004bc:	f1a9 0102 	sub.w	r1, r9, #2
 80004c0:	443a      	add	r2, r7
 80004c2:	e7be      	b.n	8000442 <__udivmoddi4+0x222>
 80004c4:	45f0      	cmp	r8, lr
 80004c6:	d29d      	bcs.n	8000404 <__udivmoddi4+0x1e4>
 80004c8:	ebbe 0302 	subs.w	r3, lr, r2
 80004cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d0:	3801      	subs	r0, #1
 80004d2:	46e1      	mov	r9, ip
 80004d4:	e796      	b.n	8000404 <__udivmoddi4+0x1e4>
 80004d6:	eba7 0909 	sub.w	r9, r7, r9
 80004da:	4449      	add	r1, r9
 80004dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e4:	fb09 f804 	mul.w	r8, r9, r4
 80004e8:	e7db      	b.n	80004a2 <__udivmoddi4+0x282>
 80004ea:	4673      	mov	r3, lr
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1ce>
 80004ee:	4650      	mov	r0, sl
 80004f0:	e766      	b.n	80003c0 <__udivmoddi4+0x1a0>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e6fd      	b.n	80002f2 <__udivmoddi4+0xd2>
 80004f6:	443b      	add	r3, r7
 80004f8:	3a02      	subs	r2, #2
 80004fa:	e733      	b.n	8000364 <__udivmoddi4+0x144>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	443b      	add	r3, r7
 8000502:	e71c      	b.n	800033e <__udivmoddi4+0x11e>
 8000504:	4649      	mov	r1, r9
 8000506:	e79c      	b.n	8000442 <__udivmoddi4+0x222>
 8000508:	eba1 0109 	sub.w	r1, r1, r9
 800050c:	46c4      	mov	ip, r8
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	e7c4      	b.n	80004a2 <__udivmoddi4+0x282>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <my_printf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void my_printf(char* str)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	int str_len = strlen(str);
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f7ff fe5b 	bl	80001e0 <strlen>
 800052a:	4603      	mov	r3, r0
 800052c:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < str_len; i++)
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	e00e      	b.n	8000552 <my_printf+0x36>
	{
		HAL_UART_Transmit(&huart1, (uint8_t*) &str[i], 1, HAL_MAX_DELAY);
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	18d1      	adds	r1, r2, r3
 800053a:	f04f 33ff 	mov.w	r3, #4294967295
 800053e:	2201      	movs	r2, #1
 8000540:	4808      	ldr	r0, [pc, #32]	@ (8000564 <my_printf+0x48>)
 8000542:	f001 fa65 	bl	8001a10 <HAL_UART_Transmit>
		osDelay(100);
 8000546:	2064      	movs	r0, #100	@ 0x64
 8000548:	f001 ff2e 	bl	80023a8 <osDelay>
	for (int i = 0; i < str_len; i++)
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	3301      	adds	r3, #1
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	68fa      	ldr	r2, [r7, #12]
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	429a      	cmp	r2, r3
 8000558:	dbec      	blt.n	8000534 <my_printf+0x18>
	}
}
 800055a:	bf00      	nop
 800055c:	bf00      	nop
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	2000002c 	.word	0x2000002c

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fa98 	bl	8000aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f866 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f8ec 	bl	8000750 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000578:	f000 f8c0 	bl	80006fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800057c:	f001 fe38 	bl	80021f0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of uart_lock_ */
  uart_lock_Handle = osMutexNew(&uart_lock__attributes);
 8000580:	481c      	ldr	r0, [pc, #112]	@ (80005f4 <main+0x8c>)
 8000582:	f001 ff2c 	bl	80023de <osMutexNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a1b      	ldr	r2, [pc, #108]	@ (80005f8 <main+0x90>)
 800058a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of data_queue_ */
  data_queue_Handle = osMessageQueueNew (16, sizeof(int), &data_queue__attributes);
 800058c:	4a1b      	ldr	r2, [pc, #108]	@ (80005fc <main+0x94>)
 800058e:	2104      	movs	r1, #4
 8000590:	2010      	movs	r0, #16
 8000592:	f002 f832 	bl	80025fa <osMessageQueueNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a19      	ldr	r2, [pc, #100]	@ (8000600 <main+0x98>)
 800059a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task1 */
  task1Handle = osThreadNew(task1_blink_red_led, NULL, &task1_attributes);
 800059c:	4a19      	ldr	r2, [pc, #100]	@ (8000604 <main+0x9c>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4819      	ldr	r0, [pc, #100]	@ (8000608 <main+0xa0>)
 80005a2:	f001 fe6f 	bl	8002284 <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a18      	ldr	r2, [pc, #96]	@ (800060c <main+0xa4>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* creation of task2 */
  task2Handle = osThreadNew(task2_blink_blue_led, NULL, &task2_attributes);
 80005ac:	4a18      	ldr	r2, [pc, #96]	@ (8000610 <main+0xa8>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4818      	ldr	r0, [pc, #96]	@ (8000614 <main+0xac>)
 80005b2:	f001 fe67 	bl	8002284 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a17      	ldr	r2, [pc, #92]	@ (8000618 <main+0xb0>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of task3 */
  task3Handle = osThreadNew(task3_send_hello, NULL, &task3_attributes);
 80005bc:	4a17      	ldr	r2, [pc, #92]	@ (800061c <main+0xb4>)
 80005be:	2100      	movs	r1, #0
 80005c0:	4817      	ldr	r0, [pc, #92]	@ (8000620 <main+0xb8>)
 80005c2:	f001 fe5f 	bl	8002284 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a16      	ldr	r2, [pc, #88]	@ (8000624 <main+0xbc>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* creation of task4 */
  task4Handle = osThreadNew(task4_send_xinchao, NULL, &task4_attributes);
 80005cc:	4a16      	ldr	r2, [pc, #88]	@ (8000628 <main+0xc0>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	4816      	ldr	r0, [pc, #88]	@ (800062c <main+0xc4>)
 80005d2:	f001 fe57 	bl	8002284 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a15      	ldr	r2, [pc, #84]	@ (8000630 <main+0xc8>)
 80005da:	6013      	str	r3, [r2, #0]

  /* creation of task5 */
  task5Handle = osThreadNew(task5_read_data, NULL, &task5_attributes);
 80005dc:	4a15      	ldr	r2, [pc, #84]	@ (8000634 <main+0xcc>)
 80005de:	2100      	movs	r1, #0
 80005e0:	4815      	ldr	r0, [pc, #84]	@ (8000638 <main+0xd0>)
 80005e2:	f001 fe4f 	bl	8002284 <osThreadNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a14      	ldr	r2, [pc, #80]	@ (800063c <main+0xd4>)
 80005ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005ec:	f001 fe24 	bl	8002238 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <main+0x88>
 80005f4:	08005a8c 	.word	0x08005a8c
 80005f8:	2000008c 	.word	0x2000008c
 80005fc:	08005a74 	.word	0x08005a74
 8000600:	20000088 	.word	0x20000088
 8000604:	080059c0 	.word	0x080059c0
 8000608:	080007d9 	.word	0x080007d9
 800060c:	20000074 	.word	0x20000074
 8000610:	080059e4 	.word	0x080059e4
 8000614:	080007fd 	.word	0x080007fd
 8000618:	20000078 	.word	0x20000078
 800061c:	08005a08 	.word	0x08005a08
 8000620:	08000821 	.word	0x08000821
 8000624:	2000007c 	.word	0x2000007c
 8000628:	08005a2c 	.word	0x08005a2c
 800062c:	0800085d 	.word	0x0800085d
 8000630:	20000080 	.word	0x20000080
 8000634:	08005a50 	.word	0x08005a50
 8000638:	080008b1 	.word	0x080008b1
 800063c:	20000084 	.word	0x20000084

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	@ 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	@ 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f005 f93a 	bl	80058c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b22      	ldr	r3, [pc, #136]	@ (80006f4 <SystemClock_Config+0xb4>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <SystemClock_Config+0xb4>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	@ 0x40
 8000674:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <SystemClock_Config+0xb4>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b1c      	ldr	r3, [pc, #112]	@ (80006f8 <SystemClock_Config+0xb8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a1b      	ldr	r2, [pc, #108]	@ (80006f8 <SystemClock_Config+0xb8>)
 800068a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b19      	ldr	r3, [pc, #100]	@ (80006f8 <SystemClock_Config+0xb8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a4:	2310      	movs	r3, #16
 80006a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0320 	add.w	r3, r7, #32
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fd05 	bl	80010c0 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006bc:	f000 f912 	bl	80008e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 ff68 	bl	80015b0 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006e6:	f000 f8fd 	bl	80008e4 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	@ 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000700:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <MX_USART1_UART_Init+0x4c>)
 8000702:	4a12      	ldr	r2, [pc, #72]	@ (800074c <MX_USART1_UART_Init+0x50>)
 8000704:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000706:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <MX_USART1_UART_Init+0x4c>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <MX_USART1_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <MX_USART1_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <MX_USART1_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <MX_USART1_UART_Init+0x4c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <MX_USART1_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <MX_USART1_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <MX_USART1_UART_Init+0x4c>)
 8000734:	f001 f91c 	bl	8001970 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800073e:	f000 f8d1 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2000002c 	.word	0x2000002c
 800074c:	40011000 	.word	0x40011000

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <MX_GPIO_Init+0x80>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a18      	ldr	r2, [pc, #96]	@ (80007d0 <MX_GPIO_Init+0x80>)
 8000770:	f043 0308 	orr.w	r3, r3, #8
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b16      	ldr	r3, [pc, #88]	@ (80007d0 <MX_GPIO_Init+0x80>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0308 	and.w	r3, r3, #8
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_GPIO_Init+0x80>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a11      	ldr	r2, [pc, #68]	@ (80007d0 <MX_GPIO_Init+0x80>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_GPIO_Init+0x80>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80007a4:	480b      	ldr	r0, [pc, #44]	@ (80007d4 <MX_GPIO_Init+0x84>)
 80007a6:	f000 fc57 	bl	8001058 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80007aa:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80007ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	4619      	mov	r1, r3
 80007c2:	4804      	ldr	r0, [pc, #16]	@ (80007d4 <MX_GPIO_Init+0x84>)
 80007c4:	f000 fac4 	bl	8000d50 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007c8:	bf00      	nop
 80007ca:	3720      	adds	r7, #32
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020c00 	.word	0x40020c00

080007d8 <task1_blink_red_led>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task1_blink_red_led */
void task1_blink_red_led(void *argument)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80007e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007e4:	4804      	ldr	r0, [pc, #16]	@ (80007f8 <task1_blink_red_led+0x20>)
 80007e6:	f000 fc50 	bl	800108a <HAL_GPIO_TogglePin>
    osDelay(1000);
 80007ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007ee:	f001 fddb 	bl	80023a8 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80007f2:	bf00      	nop
 80007f4:	e7f4      	b.n	80007e0 <task1_blink_red_led+0x8>
 80007f6:	bf00      	nop
 80007f8:	40020c00 	.word	0x40020c00

080007fc <task2_blink_blue_led>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task2_blink_blue_led */
void task2_blink_blue_led(void *argument)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task2_blink_blue_led */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000804:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000808:	4804      	ldr	r0, [pc, #16]	@ (800081c <task2_blink_blue_led+0x20>)
 800080a:	f000 fc3e 	bl	800108a <HAL_GPIO_TogglePin>
    osDelay(3000);
 800080e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000812:	f001 fdc9 	bl	80023a8 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000816:	bf00      	nop
 8000818:	e7f4      	b.n	8000804 <task2_blink_blue_led+0x8>
 800081a:	bf00      	nop
 800081c:	40020c00 	.word	0x40020c00

08000820 <task3_send_hello>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task3_send_hello */
void task3_send_hello(void *argument)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task3_send_hello */
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(uart_lock_Handle, HAL_MAX_DELAY);
 8000828:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <task3_send_hello+0x34>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f04f 31ff 	mov.w	r1, #4294967295
 8000830:	4618      	mov	r0, r3
 8000832:	f001 fe5a 	bl	80024ea <osMutexAcquire>
	  my_printf("hello\n");
 8000836:	4808      	ldr	r0, [pc, #32]	@ (8000858 <task3_send_hello+0x38>)
 8000838:	f7ff fe70 	bl	800051c <my_printf>
	  osMutexRelease(uart_lock_Handle);
 800083c:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <task3_send_hello+0x34>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4618      	mov	r0, r3
 8000842:	f001 fe9d 	bl	8002580 <osMutexRelease>
    osDelay(1000);
 8000846:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800084a:	f001 fdad 	bl	80023a8 <osDelay>
	  osMutexAcquire(uart_lock_Handle, HAL_MAX_DELAY);
 800084e:	bf00      	nop
 8000850:	e7ea      	b.n	8000828 <task3_send_hello+0x8>
 8000852:	bf00      	nop
 8000854:	2000008c 	.word	0x2000008c
 8000858:	08005994 	.word	0x08005994

0800085c <task4_send_xinchao>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task4_send_xinchao */
void task4_send_xinchao(void *argument)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task4_send_xinchao */
  /* Infinite loop */
  int tmp = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
	for(;;)
  {
	  osMessageQueueGet(data_queue_Handle, &tmp, 0, HAL_MAX_DELAY);
 8000868:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <task4_send_xinchao+0x48>)
 800086a:	6818      	ldr	r0, [r3, #0]
 800086c:	f107 010c 	add.w	r1, r7, #12
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	2200      	movs	r2, #0
 8000876:	f001 ff93 	bl	80027a0 <osMessageQueueGet>
	  osMutexAcquire(uart_lock_Handle, HAL_MAX_DELAY);
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <task4_send_xinchao+0x4c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f04f 31ff 	mov.w	r1, #4294967295
 8000882:	4618      	mov	r0, r3
 8000884:	f001 fe31 	bl	80024ea <osMutexAcquire>
	  my_printf("xin chao\n");
 8000888:	4808      	ldr	r0, [pc, #32]	@ (80008ac <task4_send_xinchao+0x50>)
 800088a:	f7ff fe47 	bl	800051c <my_printf>
	  osMutexRelease(uart_lock_Handle);
 800088e:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <task4_send_xinchao+0x4c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f001 fe74 	bl	8002580 <osMutexRelease>
    osDelay(1000);
 8000898:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800089c:	f001 fd84 	bl	80023a8 <osDelay>
	  osMessageQueueGet(data_queue_Handle, &tmp, 0, HAL_MAX_DELAY);
 80008a0:	bf00      	nop
 80008a2:	e7e1      	b.n	8000868 <task4_send_xinchao+0xc>
 80008a4:	20000088 	.word	0x20000088
 80008a8:	2000008c 	.word	0x2000008c
 80008ac:	0800599c 	.word	0x0800599c

080008b0 <task5_read_data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task5_read_data */
void task5_read_data(void *argument)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task5_read_data */
  /* Infinite loop */
	int cnt = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  cnt++;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	3301      	adds	r3, #1
 80008c0:	60fb      	str	r3, [r7, #12]
	  osMessageQueuePut(data_queue_Handle, &cnt, 0, HAL_MAX_DELAY);
 80008c2:	4b07      	ldr	r3, [pc, #28]	@ (80008e0 <task5_read_data+0x30>)
 80008c4:	6818      	ldr	r0, [r3, #0]
 80008c6:	f107 010c 	add.w	r1, r7, #12
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295
 80008ce:	2200      	movs	r2, #0
 80008d0:	f001 ff06 	bl	80026e0 <osMessageQueuePut>
    osDelay(500);
 80008d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008d8:	f001 fd66 	bl	80023a8 <osDelay>
	  cnt++;
 80008dc:	bf00      	nop
 80008de:	e7ed      	b.n	80008bc <task5_read_data+0xc>
 80008e0:	20000088 	.word	0x20000088

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <Error_Handler+0x8>

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <HAL_MspInit+0x54>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fe:	4a11      	ldr	r2, [pc, #68]	@ (8000944 <HAL_MspInit+0x54>)
 8000900:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000904:	6453      	str	r3, [r2, #68]	@ 0x44
 8000906:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <HAL_MspInit+0x54>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <HAL_MspInit+0x54>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <HAL_MspInit+0x54>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000920:	6413      	str	r3, [r2, #64]	@ 0x40
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <HAL_MspInit+0x54>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	210f      	movs	r1, #15
 8000932:	f06f 0001 	mvn.w	r0, #1
 8000936:	f000 f9e2 	bl	8000cfe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800

08000948 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	@ 0x28
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a19      	ldr	r2, [pc, #100]	@ (80009cc <HAL_UART_MspInit+0x84>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d12b      	bne.n	80009c2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <HAL_UART_MspInit+0x88>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000972:	4a17      	ldr	r2, [pc, #92]	@ (80009d0 <HAL_UART_MspInit+0x88>)
 8000974:	f043 0310 	orr.w	r3, r3, #16
 8000978:	6453      	str	r3, [r2, #68]	@ 0x44
 800097a:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <HAL_UART_MspInit+0x88>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097e:	f003 0310 	and.w	r3, r3, #16
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <HAL_UART_MspInit+0x88>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a10      	ldr	r2, [pc, #64]	@ (80009d0 <HAL_UART_MspInit+0x88>)
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <HAL_UART_MspInit+0x88>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009a2:	23c0      	movs	r3, #192	@ 0xc0
 80009a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ae:	2303      	movs	r3, #3
 80009b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009b2:	2307      	movs	r3, #7
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <HAL_UART_MspInit+0x8c>)
 80009be:	f000 f9c7 	bl	8000d50 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80009c2:	bf00      	nop
 80009c4:	3728      	adds	r7, #40	@ 0x28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40011000 	.word	0x40011000
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020400 	.word	0x40020400

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <NMI_Handler+0x4>

080009e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <HardFault_Handler+0x4>

080009e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <MemManage_Handler+0x4>

080009f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <BusFault_Handler+0x4>

080009f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <UsageFault_Handler+0x4>

08000a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a12:	f000 f897 	bl	8000b44 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a16:	f003 fddb 	bl	80045d0 <xTaskGetSchedulerState>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d001      	beq.n	8000a24 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a20:	f004 fcd2 	bl	80053c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <SystemInit+0x20>)
 8000a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a32:	4a05      	ldr	r2, [pc, #20]	@ (8000a48 <SystemInit+0x20>)
 8000a34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8000a4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a50:	f7ff ffea 	bl	8000a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a54:	480c      	ldr	r0, [pc, #48]	@ (8000a88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a56:	490d      	ldr	r1, [pc, #52]	@ (8000a8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a58:	4a0d      	ldr	r2, [pc, #52]	@ (8000a90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a5c:	e002      	b.n	8000a64 <LoopCopyDataInit>

08000a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a62:	3304      	adds	r3, #4

08000a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a68:	d3f9      	bcc.n	8000a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a70:	e001      	b.n	8000a76 <LoopFillZerobss>

08000a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a74:	3204      	adds	r2, #4

08000a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a78:	d3fb      	bcc.n	8000a72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a7a:	f004 ff2d 	bl	80058d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a7e:	f7ff fd73 	bl	8000568 <main>
  bx  lr    
 8000a82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a8c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a90:	08005ac4 	.word	0x08005ac4
  ldr r2, =_sbss
 8000a94:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a98:	200049e4 	.word	0x200049e4

08000a9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
   b  Infinite_Loop
 8000a9c:	e7fe      	b.n	8000a9c <ADC_IRQHandler>
	...

08000aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <HAL_Init+0x40>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae0 <HAL_Init+0x40>)
 8000aaa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <HAL_Init+0x40>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <HAL_Init+0x40>)
 8000ab6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000aba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000abc:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <HAL_Init+0x40>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a07      	ldr	r2, [pc, #28]	@ (8000ae0 <HAL_Init+0x40>)
 8000ac2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ac6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f000 f90d 	bl	8000ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ace:	200f      	movs	r0, #15
 8000ad0:	f000 f808 	bl	8000ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad4:	f7ff ff0c 	bl	80008f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40023c00 	.word	0x40023c00

08000ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aec:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <HAL_InitTick+0x54>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <HAL_InitTick+0x58>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4619      	mov	r1, r3
 8000af6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f917 	bl	8000d36 <HAL_SYSTICK_Config>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e00e      	b.n	8000b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b0f      	cmp	r3, #15
 8000b16:	d80a      	bhi.n	8000b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	f000 f8ed 	bl	8000cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b24:	4a06      	ldr	r2, [pc, #24]	@ (8000b40 <HAL_InitTick+0x5c>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e000      	b.n	8000b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000004 	.word	0x20000004

08000b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <HAL_IncTick+0x20>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <HAL_IncTick+0x24>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	4a04      	ldr	r2, [pc, #16]	@ (8000b68 <HAL_IncTick+0x24>)
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000090 	.word	0x20000090

08000b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b70:	4b03      	ldr	r3, [pc, #12]	@ (8000b80 <HAL_GetTick+0x14>)
 8000b72:	681b      	ldr	r3, [r3, #0]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000090 	.word	0x20000090

08000b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b94:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb6:	4a04      	ldr	r2, [pc, #16]	@ (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	60d3      	str	r3, [r2, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd0:	4b04      	ldr	r3, [pc, #16]	@ (8000be4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	f003 0307 	and.w	r3, r3, #7
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	db0a      	blt.n	8000c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	490c      	ldr	r1, [pc, #48]	@ (8000c34 <__NVIC_SetPriority+0x4c>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	0112      	lsls	r2, r2, #4
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c10:	e00a      	b.n	8000c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4908      	ldr	r1, [pc, #32]	@ (8000c38 <__NVIC_SetPriority+0x50>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	3b04      	subs	r3, #4
 8000c20:	0112      	lsls	r2, r2, #4
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	440b      	add	r3, r1
 8000c26:	761a      	strb	r2, [r3, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	@ 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f1c3 0307 	rsb	r3, r3, #7
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	bf28      	it	cs
 8000c5a:	2304      	movcs	r3, #4
 8000c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3304      	adds	r3, #4
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	d902      	bls.n	8000c6c <NVIC_EncodePriority+0x30>
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3b03      	subs	r3, #3
 8000c6a:	e000      	b.n	8000c6e <NVIC_EncodePriority+0x32>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	f04f 32ff 	mov.w	r2, #4294967295
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	401a      	ands	r2, r3
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	43d9      	mvns	r1, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	4313      	orrs	r3, r2
         );
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3724      	adds	r7, #36	@ 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cb4:	d301      	bcc.n	8000cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00f      	b.n	8000cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <SysTick_Config+0x40>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f7ff ff8e 	bl	8000be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	@ (8000ce4 <SysTick_Config+0x40>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <SysTick_Config+0x40>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ff47 	bl	8000b84 <__NVIC_SetPriorityGrouping>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d10:	f7ff ff5c 	bl	8000bcc <__NVIC_GetPriorityGrouping>
 8000d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68b9      	ldr	r1, [r7, #8]
 8000d1a:	6978      	ldr	r0, [r7, #20]
 8000d1c:	f7ff ff8e 	bl	8000c3c <NVIC_EncodePriority>
 8000d20:	4602      	mov	r2, r0
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff5d 	bl	8000be8 <__NVIC_SetPriority>
}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffb0 	bl	8000ca4 <SysTick_Config>
 8000d44:	4603      	mov	r3, r0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	@ 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
 8000d6a:	e159      	b.n	8001020 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	f040 8148 	bne.w	800101a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d005      	beq.n	8000da2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d130      	bne.n	8000e04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	2203      	movs	r2, #3
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4013      	ands	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	68da      	ldr	r2, [r3, #12]
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd8:	2201      	movs	r2, #1
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	091b      	lsrs	r3, r3, #4
 8000dee:	f003 0201 	and.w	r2, r3, #1
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 0303 	and.w	r3, r3, #3
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	d017      	beq.n	8000e40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d123      	bne.n	8000e94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	08da      	lsrs	r2, r3, #3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3208      	adds	r2, #8
 8000e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	220f      	movs	r2, #15
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	691a      	ldr	r2, [r3, #16]
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	08da      	lsrs	r2, r3, #3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3208      	adds	r2, #8
 8000e8e:	69b9      	ldr	r1, [r7, #24]
 8000e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0203 	and.w	r2, r3, #3
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f000 80a2 	beq.w	800101a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b57      	ldr	r3, [pc, #348]	@ (8001038 <HAL_GPIO_Init+0x2e8>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ede:	4a56      	ldr	r2, [pc, #344]	@ (8001038 <HAL_GPIO_Init+0x2e8>)
 8000ee0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ee4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ee6:	4b54      	ldr	r3, [pc, #336]	@ (8001038 <HAL_GPIO_Init+0x2e8>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ef2:	4a52      	ldr	r2, [pc, #328]	@ (800103c <HAL_GPIO_Init+0x2ec>)
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	3302      	adds	r3, #2
 8000efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	220f      	movs	r2, #15
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a49      	ldr	r2, [pc, #292]	@ (8001040 <HAL_GPIO_Init+0x2f0>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d019      	beq.n	8000f52 <HAL_GPIO_Init+0x202>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a48      	ldr	r2, [pc, #288]	@ (8001044 <HAL_GPIO_Init+0x2f4>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d013      	beq.n	8000f4e <HAL_GPIO_Init+0x1fe>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a47      	ldr	r2, [pc, #284]	@ (8001048 <HAL_GPIO_Init+0x2f8>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d00d      	beq.n	8000f4a <HAL_GPIO_Init+0x1fa>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a46      	ldr	r2, [pc, #280]	@ (800104c <HAL_GPIO_Init+0x2fc>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d007      	beq.n	8000f46 <HAL_GPIO_Init+0x1f6>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a45      	ldr	r2, [pc, #276]	@ (8001050 <HAL_GPIO_Init+0x300>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d101      	bne.n	8000f42 <HAL_GPIO_Init+0x1f2>
 8000f3e:	2304      	movs	r3, #4
 8000f40:	e008      	b.n	8000f54 <HAL_GPIO_Init+0x204>
 8000f42:	2307      	movs	r3, #7
 8000f44:	e006      	b.n	8000f54 <HAL_GPIO_Init+0x204>
 8000f46:	2303      	movs	r3, #3
 8000f48:	e004      	b.n	8000f54 <HAL_GPIO_Init+0x204>
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	e002      	b.n	8000f54 <HAL_GPIO_Init+0x204>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <HAL_GPIO_Init+0x204>
 8000f52:	2300      	movs	r3, #0
 8000f54:	69fa      	ldr	r2, [r7, #28]
 8000f56:	f002 0203 	and.w	r2, r2, #3
 8000f5a:	0092      	lsls	r2, r2, #2
 8000f5c:	4093      	lsls	r3, r2
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f64:	4935      	ldr	r1, [pc, #212]	@ (800103c <HAL_GPIO_Init+0x2ec>)
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f72:	4b38      	ldr	r3, [pc, #224]	@ (8001054 <HAL_GPIO_Init+0x304>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f96:	4a2f      	ldr	r2, [pc, #188]	@ (8001054 <HAL_GPIO_Init+0x304>)
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001054 <HAL_GPIO_Init+0x304>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fc0:	4a24      	ldr	r2, [pc, #144]	@ (8001054 <HAL_GPIO_Init+0x304>)
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fc6:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <HAL_GPIO_Init+0x304>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fea:	4a1a      	ldr	r2, [pc, #104]	@ (8001054 <HAL_GPIO_Init+0x304>)
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <HAL_GPIO_Init+0x304>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001014:	4a0f      	ldr	r2, [pc, #60]	@ (8001054 <HAL_GPIO_Init+0x304>)
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3301      	adds	r3, #1
 800101e:	61fb      	str	r3, [r7, #28]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	2b0f      	cmp	r3, #15
 8001024:	f67f aea2 	bls.w	8000d6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3724      	adds	r7, #36	@ 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800
 800103c:	40013800 	.word	0x40013800
 8001040:	40020000 	.word	0x40020000
 8001044:	40020400 	.word	0x40020400
 8001048:	40020800 	.word	0x40020800
 800104c:	40020c00 	.word	0x40020c00
 8001050:	40021000 	.word	0x40021000
 8001054:	40013c00 	.word	0x40013c00

08001058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
 8001064:	4613      	mov	r3, r2
 8001066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001068:	787b      	ldrb	r3, [r7, #1]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800106e:	887a      	ldrh	r2, [r7, #2]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001074:	e003      	b.n	800107e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001076:	887b      	ldrh	r3, [r7, #2]
 8001078:	041a      	lsls	r2, r3, #16
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	619a      	str	r2, [r3, #24]
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800108a:	b480      	push	{r7}
 800108c:	b085      	sub	sp, #20
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	460b      	mov	r3, r1
 8001094:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800109c:	887a      	ldrh	r2, [r7, #2]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4013      	ands	r3, r2
 80010a2:	041a      	lsls	r2, r3, #16
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	887b      	ldrh	r3, [r7, #2]
 80010aa:	400b      	ands	r3, r1
 80010ac:	431a      	orrs	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	619a      	str	r2, [r3, #24]
}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e267      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d075      	beq.n	80011ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010de:	4b88      	ldr	r3, [pc, #544]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 030c 	and.w	r3, r3, #12
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d00c      	beq.n	8001104 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ea:	4b85      	ldr	r3, [pc, #532]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010f2:	2b08      	cmp	r3, #8
 80010f4:	d112      	bne.n	800111c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010f6:	4b82      	ldr	r3, [pc, #520]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001102:	d10b      	bne.n	800111c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001104:	4b7e      	ldr	r3, [pc, #504]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d05b      	beq.n	80011c8 <HAL_RCC_OscConfig+0x108>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d157      	bne.n	80011c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e242      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001124:	d106      	bne.n	8001134 <HAL_RCC_OscConfig+0x74>
 8001126:	4b76      	ldr	r3, [pc, #472]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a75      	ldr	r2, [pc, #468]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 800112c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e01d      	b.n	8001170 <HAL_RCC_OscConfig+0xb0>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800113c:	d10c      	bne.n	8001158 <HAL_RCC_OscConfig+0x98>
 800113e:	4b70      	ldr	r3, [pc, #448]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a6f      	ldr	r2, [pc, #444]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001144:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	4b6d      	ldr	r3, [pc, #436]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a6c      	ldr	r2, [pc, #432]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e00b      	b.n	8001170 <HAL_RCC_OscConfig+0xb0>
 8001158:	4b69      	ldr	r3, [pc, #420]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a68      	ldr	r2, [pc, #416]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 800115e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	4b66      	ldr	r3, [pc, #408]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a65      	ldr	r2, [pc, #404]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 800116a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800116e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d013      	beq.n	80011a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fcf8 	bl	8000b6c <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001180:	f7ff fcf4 	bl	8000b6c <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b64      	cmp	r3, #100	@ 0x64
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e207      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001192:	4b5b      	ldr	r3, [pc, #364]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f0      	beq.n	8001180 <HAL_RCC_OscConfig+0xc0>
 800119e:	e014      	b.n	80011ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fce4 	bl	8000b6c <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a8:	f7ff fce0 	bl	8000b6c <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b64      	cmp	r3, #100	@ 0x64
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e1f3      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ba:	4b51      	ldr	r3, [pc, #324]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f0      	bne.n	80011a8 <HAL_RCC_OscConfig+0xe8>
 80011c6:	e000      	b.n	80011ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d063      	beq.n	800129e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00b      	beq.n	80011fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011e2:	4b47      	ldr	r3, [pc, #284]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d11c      	bne.n	8001228 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ee:	4b44      	ldr	r3, [pc, #272]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d116      	bne.n	8001228 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fa:	4b41      	ldr	r3, [pc, #260]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d005      	beq.n	8001212 <HAL_RCC_OscConfig+0x152>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d001      	beq.n	8001212 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e1c7      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001212:	4b3b      	ldr	r3, [pc, #236]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	4937      	ldr	r1, [pc, #220]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001222:	4313      	orrs	r3, r2
 8001224:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001226:	e03a      	b.n	800129e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d020      	beq.n	8001272 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001230:	4b34      	ldr	r3, [pc, #208]	@ (8001304 <HAL_RCC_OscConfig+0x244>)
 8001232:	2201      	movs	r2, #1
 8001234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001236:	f7ff fc99 	bl	8000b6c <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800123e:	f7ff fc95 	bl	8000b6c <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e1a8      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001250:	4b2b      	ldr	r3, [pc, #172]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0f0      	beq.n	800123e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125c:	4b28      	ldr	r3, [pc, #160]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	4925      	ldr	r1, [pc, #148]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 800126c:	4313      	orrs	r3, r2
 800126e:	600b      	str	r3, [r1, #0]
 8001270:	e015      	b.n	800129e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001272:	4b24      	ldr	r3, [pc, #144]	@ (8001304 <HAL_RCC_OscConfig+0x244>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001278:	f7ff fc78 	bl	8000b6c <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001280:	f7ff fc74 	bl	8000b6c <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e187      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001292:	4b1b      	ldr	r3, [pc, #108]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d036      	beq.n	8001318 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d016      	beq.n	80012e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b2:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <HAL_RCC_OscConfig+0x248>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b8:	f7ff fc58 	bl	8000b6c <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c0:	f7ff fc54 	bl	8000b6c <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e167      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <HAL_RCC_OscConfig+0x240>)
 80012d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f0      	beq.n	80012c0 <HAL_RCC_OscConfig+0x200>
 80012de:	e01b      	b.n	8001318 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e0:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <HAL_RCC_OscConfig+0x248>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e6:	f7ff fc41 	bl	8000b6c <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ec:	e00e      	b.n	800130c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ee:	f7ff fc3d 	bl	8000b6c <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d907      	bls.n	800130c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e150      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
 8001300:	40023800 	.word	0x40023800
 8001304:	42470000 	.word	0x42470000
 8001308:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800130c:	4b88      	ldr	r3, [pc, #544]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 800130e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1ea      	bne.n	80012ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 8097 	beq.w	8001454 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001326:	2300      	movs	r3, #0
 8001328:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800132a:	4b81      	ldr	r3, [pc, #516]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10f      	bne.n	8001356 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	4b7d      	ldr	r3, [pc, #500]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133e:	4a7c      	ldr	r2, [pc, #496]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 8001340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001344:	6413      	str	r3, [r2, #64]	@ 0x40
 8001346:	4b7a      	ldr	r3, [pc, #488]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001352:	2301      	movs	r3, #1
 8001354:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001356:	4b77      	ldr	r3, [pc, #476]	@ (8001534 <HAL_RCC_OscConfig+0x474>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800135e:	2b00      	cmp	r3, #0
 8001360:	d118      	bne.n	8001394 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001362:	4b74      	ldr	r3, [pc, #464]	@ (8001534 <HAL_RCC_OscConfig+0x474>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a73      	ldr	r2, [pc, #460]	@ (8001534 <HAL_RCC_OscConfig+0x474>)
 8001368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800136c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800136e:	f7ff fbfd 	bl	8000b6c <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001376:	f7ff fbf9 	bl	8000b6c <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e10c      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001388:	4b6a      	ldr	r3, [pc, #424]	@ (8001534 <HAL_RCC_OscConfig+0x474>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d106      	bne.n	80013aa <HAL_RCC_OscConfig+0x2ea>
 800139c:	4b64      	ldr	r3, [pc, #400]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 800139e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a0:	4a63      	ldr	r2, [pc, #396]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80013a8:	e01c      	b.n	80013e4 <HAL_RCC_OscConfig+0x324>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	2b05      	cmp	r3, #5
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0x30c>
 80013b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b6:	4a5e      	ldr	r2, [pc, #376]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80013be:	4b5c      	ldr	r3, [pc, #368]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013c2:	4a5b      	ldr	r2, [pc, #364]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ca:	e00b      	b.n	80013e4 <HAL_RCC_OscConfig+0x324>
 80013cc:	4b58      	ldr	r3, [pc, #352]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013d0:	4a57      	ldr	r2, [pc, #348]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013d2:	f023 0301 	bic.w	r3, r3, #1
 80013d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80013d8:	4b55      	ldr	r3, [pc, #340]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013dc:	4a54      	ldr	r2, [pc, #336]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80013de:	f023 0304 	bic.w	r3, r3, #4
 80013e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d015      	beq.n	8001418 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ec:	f7ff fbbe 	bl	8000b6c <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f2:	e00a      	b.n	800140a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f4:	f7ff fbba 	bl	8000b6c <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001402:	4293      	cmp	r3, r2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e0cb      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140a:	4b49      	ldr	r3, [pc, #292]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 800140c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0ee      	beq.n	80013f4 <HAL_RCC_OscConfig+0x334>
 8001416:	e014      	b.n	8001442 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001418:	f7ff fba8 	bl	8000b6c <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141e:	e00a      	b.n	8001436 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001420:	f7ff fba4 	bl	8000b6c <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800142e:	4293      	cmp	r3, r2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e0b5      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001436:	4b3e      	ldr	r3, [pc, #248]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 8001438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1ee      	bne.n	8001420 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001442:	7dfb      	ldrb	r3, [r7, #23]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d105      	bne.n	8001454 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001448:	4b39      	ldr	r3, [pc, #228]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	4a38      	ldr	r2, [pc, #224]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 800144e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001452:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80a1 	beq.w	80015a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800145e:	4b34      	ldr	r3, [pc, #208]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b08      	cmp	r3, #8
 8001468:	d05c      	beq.n	8001524 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d141      	bne.n	80014f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001472:	4b31      	ldr	r3, [pc, #196]	@ (8001538 <HAL_RCC_OscConfig+0x478>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fb78 	bl	8000b6c <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001480:	f7ff fb74 	bl	8000b6c <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e087      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001492:	4b27      	ldr	r3, [pc, #156]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69da      	ldr	r2, [r3, #28]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ac:	019b      	lsls	r3, r3, #6
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b4:	085b      	lsrs	r3, r3, #1
 80014b6:	3b01      	subs	r3, #1
 80014b8:	041b      	lsls	r3, r3, #16
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c0:	061b      	lsls	r3, r3, #24
 80014c2:	491b      	ldr	r1, [pc, #108]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001538 <HAL_RCC_OscConfig+0x478>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff fb4d 	bl	8000b6c <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d6:	f7ff fb49 	bl	8000b6c <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e05c      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e8:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x416>
 80014f4:	e054      	b.n	80015a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f6:	4b10      	ldr	r3, [pc, #64]	@ (8001538 <HAL_RCC_OscConfig+0x478>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fb36 	bl	8000b6c <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001504:	f7ff fb32 	bl	8000b6c <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e045      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <HAL_RCC_OscConfig+0x470>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x444>
 8001522:	e03d      	b.n	80015a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d107      	bne.n	800153c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e038      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
 8001530:	40023800 	.word	0x40023800
 8001534:	40007000 	.word	0x40007000
 8001538:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800153c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ac <HAL_RCC_OscConfig+0x4ec>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d028      	beq.n	800159c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001554:	429a      	cmp	r2, r3
 8001556:	d121      	bne.n	800159c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001562:	429a      	cmp	r2, r3
 8001564:	d11a      	bne.n	800159c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800156c:	4013      	ands	r3, r2
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001572:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001574:	4293      	cmp	r3, r2
 8001576:	d111      	bne.n	800159c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001582:	085b      	lsrs	r3, r3, #1
 8001584:	3b01      	subs	r3, #1
 8001586:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001588:	429a      	cmp	r2, r3
 800158a:	d107      	bne.n	800159c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001596:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001598:	429a      	cmp	r2, r3
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800

080015b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0cc      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015c4:	4b68      	ldr	r3, [pc, #416]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d90c      	bls.n	80015ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d2:	4b65      	ldr	r3, [pc, #404]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015da:	4b63      	ldr	r3, [pc, #396]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0b8      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d020      	beq.n	800163a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001604:	4b59      	ldr	r3, [pc, #356]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	4a58      	ldr	r2, [pc, #352]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800160e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800161c:	4b53      	ldr	r3, [pc, #332]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	4a52      	ldr	r2, [pc, #328]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001626:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001628:	4b50      	ldr	r3, [pc, #320]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	494d      	ldr	r1, [pc, #308]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	4313      	orrs	r3, r2
 8001638:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d044      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d107      	bne.n	800165e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164e:	4b47      	ldr	r3, [pc, #284]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d119      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e07f      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d003      	beq.n	800166e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800166a:	2b03      	cmp	r3, #3
 800166c:	d107      	bne.n	800167e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166e:	4b3f      	ldr	r3, [pc, #252]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e06f      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167e:	4b3b      	ldr	r3, [pc, #236]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e067      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168e:	4b37      	ldr	r3, [pc, #220]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f023 0203 	bic.w	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	4934      	ldr	r1, [pc, #208]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	4313      	orrs	r3, r2
 800169e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a0:	f7ff fa64 	bl	8000b6c <HAL_GetTick>
 80016a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	e00a      	b.n	80016be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a8:	f7ff fa60 	bl	8000b6c <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e04f      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016be:	4b2b      	ldr	r3, [pc, #172]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 020c 	and.w	r2, r3, #12
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d1eb      	bne.n	80016a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016d0:	4b25      	ldr	r3, [pc, #148]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d20c      	bcs.n	80016f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016de:	4b22      	ldr	r3, [pc, #136]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e6:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e032      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d008      	beq.n	8001716 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001704:	4b19      	ldr	r3, [pc, #100]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	4916      	ldr	r1, [pc, #88]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	4313      	orrs	r3, r2
 8001714:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d009      	beq.n	8001736 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001722:	4b12      	ldr	r3, [pc, #72]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	490e      	ldr	r1, [pc, #56]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001736:	f000 f821 	bl	800177c <HAL_RCC_GetSysClockFreq>
 800173a:	4602      	mov	r2, r0
 800173c:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	490a      	ldr	r1, [pc, #40]	@ (8001770 <HAL_RCC_ClockConfig+0x1c0>)
 8001748:	5ccb      	ldrb	r3, [r1, r3]
 800174a:	fa22 f303 	lsr.w	r3, r2, r3
 800174e:	4a09      	ldr	r2, [pc, #36]	@ (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001752:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <HAL_RCC_ClockConfig+0x1c8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff f9c4 	bl	8000ae4 <HAL_InitTick>

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023c00 	.word	0x40023c00
 800176c:	40023800 	.word	0x40023800
 8001770:	08005a9c 	.word	0x08005a9c
 8001774:	20000000 	.word	0x20000000
 8001778:	20000004 	.word	0x20000004

0800177c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800177c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001780:	b090      	sub	sp, #64	@ 0x40
 8001782:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001794:	4b59      	ldr	r3, [pc, #356]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x180>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b08      	cmp	r3, #8
 800179e:	d00d      	beq.n	80017bc <HAL_RCC_GetSysClockFreq+0x40>
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	f200 80a1 	bhi.w	80018e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0x34>
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d003      	beq.n	80017b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80017ae:	e09b      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017b0:	4b53      	ldr	r3, [pc, #332]	@ (8001900 <HAL_RCC_GetSysClockFreq+0x184>)
 80017b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017b4:	e09b      	b.n	80018ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017b6:	4b53      	ldr	r3, [pc, #332]	@ (8001904 <HAL_RCC_GetSysClockFreq+0x188>)
 80017b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017ba:	e098      	b.n	80018ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017bc:	4b4f      	ldr	r3, [pc, #316]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x180>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017c6:	4b4d      	ldr	r3, [pc, #308]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x180>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d028      	beq.n	8001824 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d2:	4b4a      	ldr	r3, [pc, #296]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x180>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	099b      	lsrs	r3, r3, #6
 80017d8:	2200      	movs	r2, #0
 80017da:	623b      	str	r3, [r7, #32]
 80017dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017e4:	2100      	movs	r1, #0
 80017e6:	4b47      	ldr	r3, [pc, #284]	@ (8001904 <HAL_RCC_GetSysClockFreq+0x188>)
 80017e8:	fb03 f201 	mul.w	r2, r3, r1
 80017ec:	2300      	movs	r3, #0
 80017ee:	fb00 f303 	mul.w	r3, r0, r3
 80017f2:	4413      	add	r3, r2
 80017f4:	4a43      	ldr	r2, [pc, #268]	@ (8001904 <HAL_RCC_GetSysClockFreq+0x188>)
 80017f6:	fba0 1202 	umull	r1, r2, r0, r2
 80017fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017fc:	460a      	mov	r2, r1
 80017fe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001800:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001802:	4413      	add	r3, r2
 8001804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001808:	2200      	movs	r2, #0
 800180a:	61bb      	str	r3, [r7, #24]
 800180c:	61fa      	str	r2, [r7, #28]
 800180e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001812:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001816:	f7fe fceb 	bl	80001f0 <__aeabi_uldivmod>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4613      	mov	r3, r2
 8001820:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001822:	e053      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001824:	4b35      	ldr	r3, [pc, #212]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x180>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	099b      	lsrs	r3, r3, #6
 800182a:	2200      	movs	r2, #0
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	617a      	str	r2, [r7, #20]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001836:	f04f 0b00 	mov.w	fp, #0
 800183a:	4652      	mov	r2, sl
 800183c:	465b      	mov	r3, fp
 800183e:	f04f 0000 	mov.w	r0, #0
 8001842:	f04f 0100 	mov.w	r1, #0
 8001846:	0159      	lsls	r1, r3, #5
 8001848:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800184c:	0150      	lsls	r0, r2, #5
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	ebb2 080a 	subs.w	r8, r2, sl
 8001856:	eb63 090b 	sbc.w	r9, r3, fp
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001866:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800186a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800186e:	ebb2 0408 	subs.w	r4, r2, r8
 8001872:	eb63 0509 	sbc.w	r5, r3, r9
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	00eb      	lsls	r3, r5, #3
 8001880:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001884:	00e2      	lsls	r2, r4, #3
 8001886:	4614      	mov	r4, r2
 8001888:	461d      	mov	r5, r3
 800188a:	eb14 030a 	adds.w	r3, r4, sl
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	eb45 030b 	adc.w	r3, r5, fp
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018a2:	4629      	mov	r1, r5
 80018a4:	028b      	lsls	r3, r1, #10
 80018a6:	4621      	mov	r1, r4
 80018a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018ac:	4621      	mov	r1, r4
 80018ae:	028a      	lsls	r2, r1, #10
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018b6:	2200      	movs	r2, #0
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	60fa      	str	r2, [r7, #12]
 80018bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018c0:	f7fe fc96 	bl	80001f0 <__aeabi_uldivmod>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4613      	mov	r3, r2
 80018ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018cc:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x180>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	0c1b      	lsrs	r3, r3, #16
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	3301      	adds	r3, #1
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80018dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80018de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018e6:	e002      	b.n	80018ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018e8:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <HAL_RCC_GetSysClockFreq+0x184>)
 80018ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3740      	adds	r7, #64	@ 0x40
 80018f4:	46bd      	mov	sp, r7
 80018f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800
 8001900:	00f42400 	.word	0x00f42400
 8001904:	017d7840 	.word	0x017d7840

08001908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800190c:	4b03      	ldr	r3, [pc, #12]	@ (800191c <HAL_RCC_GetHCLKFreq+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000000 	.word	0x20000000

08001920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001924:	f7ff fff0 	bl	8001908 <HAL_RCC_GetHCLKFreq>
 8001928:	4602      	mov	r2, r0
 800192a:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	0a9b      	lsrs	r3, r3, #10
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	4903      	ldr	r1, [pc, #12]	@ (8001944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001936:	5ccb      	ldrb	r3, [r1, r3]
 8001938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800193c:	4618      	mov	r0, r3
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40023800 	.word	0x40023800
 8001944:	08005aac 	.word	0x08005aac

08001948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800194c:	f7ff ffdc 	bl	8001908 <HAL_RCC_GetHCLKFreq>
 8001950:	4602      	mov	r2, r0
 8001952:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	0b5b      	lsrs	r3, r3, #13
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	4903      	ldr	r1, [pc, #12]	@ (800196c <HAL_RCC_GetPCLK2Freq+0x24>)
 800195e:	5ccb      	ldrb	r3, [r1, r3]
 8001960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001964:	4618      	mov	r0, r3
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40023800 	.word	0x40023800
 800196c:	08005aac 	.word	0x08005aac

08001970 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e042      	b.n	8001a08 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d106      	bne.n	800199c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7fe ffd6 	bl	8000948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2224      	movs	r2, #36	@ 0x24
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f973 	bl	8001ca0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	691a      	ldr	r2, [r3, #16]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80019c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695a      	ldr	r2, [r3, #20]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80019d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80019e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2220      	movs	r2, #32
 80019f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2220      	movs	r2, #32
 80019fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	@ 0x28
 8001a14:	af02      	add	r7, sp, #8
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b20      	cmp	r3, #32
 8001a2e:	d175      	bne.n	8001b1c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <HAL_UART_Transmit+0x2c>
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e06e      	b.n	8001b1e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2221      	movs	r2, #33	@ 0x21
 8001a4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a4e:	f7ff f88d 	bl	8000b6c <HAL_GetTick>
 8001a52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	88fa      	ldrh	r2, [r7, #6]
 8001a58:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	88fa      	ldrh	r2, [r7, #6]
 8001a5e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a68:	d108      	bne.n	8001a7c <HAL_UART_Transmit+0x6c>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d104      	bne.n	8001a7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	61bb      	str	r3, [r7, #24]
 8001a7a:	e003      	b.n	8001a84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001a84:	e02e      	b.n	8001ae4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2180      	movs	r1, #128	@ 0x80
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 f848 	bl	8001b26 <UART_WaitOnFlagUntilTimeout>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e03a      	b.n	8001b1e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10b      	bne.n	8001ac6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001abc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	61bb      	str	r3, [r7, #24]
 8001ac4:	e007      	b.n	8001ad6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	781a      	ldrb	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1cb      	bne.n	8001a86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	2200      	movs	r2, #0
 8001af6:	2140      	movs	r1, #64	@ 0x40
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f000 f814 	bl	8001b26 <UART_WaitOnFlagUntilTimeout>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2220      	movs	r2, #32
 8001b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e006      	b.n	8001b1e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2220      	movs	r2, #32
 8001b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	e000      	b.n	8001b1e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001b1c:	2302      	movs	r3, #2
  }
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3720      	adds	r7, #32
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	60f8      	str	r0, [r7, #12]
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	4613      	mov	r3, r2
 8001b34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b36:	e03b      	b.n	8001bb0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3e:	d037      	beq.n	8001bb0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b40:	f7ff f814 	bl	8000b6c <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	6a3a      	ldr	r2, [r7, #32]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d302      	bcc.n	8001b56 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e03a      	b.n	8001bd0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d023      	beq.n	8001bb0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2b80      	cmp	r3, #128	@ 0x80
 8001b6c:	d020      	beq.n	8001bb0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2b40      	cmp	r3, #64	@ 0x40
 8001b72:	d01d      	beq.n	8001bb0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d116      	bne.n	8001bb0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 f81d 	bl	8001bd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2208      	movs	r2, #8
 8001ba2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e00f      	b.n	8001bd0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	bf0c      	ite	eq
 8001bc0:	2301      	moveq	r3, #1
 8001bc2:	2300      	movne	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d0b4      	beq.n	8001b38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b095      	sub	sp, #84	@ 0x54
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	330c      	adds	r3, #12
 8001be6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bea:	e853 3f00 	ldrex	r3, [r3]
 8001bee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bf2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	330c      	adds	r3, #12
 8001bfe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c00:	643a      	str	r2, [r7, #64]	@ 0x40
 8001c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001c06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c08:	e841 2300 	strex	r3, r2, [r1]
 8001c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1e5      	bne.n	8001be0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	3314      	adds	r3, #20
 8001c1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	e853 3f00 	ldrex	r3, [r3]
 8001c22:	61fb      	str	r3, [r7, #28]
   return(result);
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f023 0301 	bic.w	r3, r3, #1
 8001c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	3314      	adds	r3, #20
 8001c32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c3c:	e841 2300 	strex	r3, r2, [r1]
 8001c40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1e5      	bne.n	8001c14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d119      	bne.n	8001c84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	330c      	adds	r3, #12
 8001c56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	e853 3f00 	ldrex	r3, [r3]
 8001c5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f023 0310 	bic.w	r3, r3, #16
 8001c66:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	330c      	adds	r3, #12
 8001c6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c70:	61ba      	str	r2, [r7, #24]
 8001c72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c74:	6979      	ldr	r1, [r7, #20]
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	e841 2300 	strex	r3, r2, [r1]
 8001c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1e5      	bne.n	8001c50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2220      	movs	r2, #32
 8001c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001c92:	bf00      	nop
 8001c94:	3754      	adds	r7, #84	@ 0x54
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ca4:	b0c0      	sub	sp, #256	@ 0x100
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cbc:	68d9      	ldr	r1, [r3, #12]
 8001cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	ea40 0301 	orr.w	r3, r0, r1
 8001cc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001cf8:	f021 010c 	bic.w	r1, r1, #12
 8001cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001d06:	430b      	orrs	r3, r1
 8001d08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d1a:	6999      	ldr	r1, [r3, #24]
 8001d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	ea40 0301 	orr.w	r3, r0, r1
 8001d26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	4b8f      	ldr	r3, [pc, #572]	@ (8001f6c <UART_SetConfig+0x2cc>)
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d005      	beq.n	8001d40 <UART_SetConfig+0xa0>
 8001d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	4b8d      	ldr	r3, [pc, #564]	@ (8001f70 <UART_SetConfig+0x2d0>)
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d104      	bne.n	8001d4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d40:	f7ff fe02 	bl	8001948 <HAL_RCC_GetPCLK2Freq>
 8001d44:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001d48:	e003      	b.n	8001d52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d4a:	f7ff fde9 	bl	8001920 <HAL_RCC_GetPCLK1Freq>
 8001d4e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d5c:	f040 810c 	bne.w	8001f78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d64:	2200      	movs	r2, #0
 8001d66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001d6a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001d6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001d72:	4622      	mov	r2, r4
 8001d74:	462b      	mov	r3, r5
 8001d76:	1891      	adds	r1, r2, r2
 8001d78:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001d7a:	415b      	adcs	r3, r3
 8001d7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d82:	4621      	mov	r1, r4
 8001d84:	eb12 0801 	adds.w	r8, r2, r1
 8001d88:	4629      	mov	r1, r5
 8001d8a:	eb43 0901 	adc.w	r9, r3, r1
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001da2:	4690      	mov	r8, r2
 8001da4:	4699      	mov	r9, r3
 8001da6:	4623      	mov	r3, r4
 8001da8:	eb18 0303 	adds.w	r3, r8, r3
 8001dac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001db0:	462b      	mov	r3, r5
 8001db2:	eb49 0303 	adc.w	r3, r9, r3
 8001db6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001dc6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001dca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001dce:	460b      	mov	r3, r1
 8001dd0:	18db      	adds	r3, r3, r3
 8001dd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	eb42 0303 	adc.w	r3, r2, r3
 8001dda:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ddc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001de0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001de4:	f7fe fa04 	bl	80001f0 <__aeabi_uldivmod>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4b61      	ldr	r3, [pc, #388]	@ (8001f74 <UART_SetConfig+0x2d4>)
 8001dee:	fba3 2302 	umull	r2, r3, r3, r2
 8001df2:	095b      	lsrs	r3, r3, #5
 8001df4:	011c      	lsls	r4, r3, #4
 8001df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e00:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001e04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001e08:	4642      	mov	r2, r8
 8001e0a:	464b      	mov	r3, r9
 8001e0c:	1891      	adds	r1, r2, r2
 8001e0e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001e10:	415b      	adcs	r3, r3
 8001e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001e18:	4641      	mov	r1, r8
 8001e1a:	eb12 0a01 	adds.w	sl, r2, r1
 8001e1e:	4649      	mov	r1, r9
 8001e20:	eb43 0b01 	adc.w	fp, r3, r1
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e38:	4692      	mov	sl, r2
 8001e3a:	469b      	mov	fp, r3
 8001e3c:	4643      	mov	r3, r8
 8001e3e:	eb1a 0303 	adds.w	r3, sl, r3
 8001e42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001e46:	464b      	mov	r3, r9
 8001e48:	eb4b 0303 	adc.w	r3, fp, r3
 8001e4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001e5c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001e60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001e64:	460b      	mov	r3, r1
 8001e66:	18db      	adds	r3, r3, r3
 8001e68:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	eb42 0303 	adc.w	r3, r2, r3
 8001e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001e76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001e7a:	f7fe f9b9 	bl	80001f0 <__aeabi_uldivmod>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4611      	mov	r1, r2
 8001e84:	4b3b      	ldr	r3, [pc, #236]	@ (8001f74 <UART_SetConfig+0x2d4>)
 8001e86:	fba3 2301 	umull	r2, r3, r3, r1
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	2264      	movs	r2, #100	@ 0x64
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	1acb      	subs	r3, r1, r3
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001e9a:	4b36      	ldr	r3, [pc, #216]	@ (8001f74 <UART_SetConfig+0x2d4>)
 8001e9c:	fba3 2302 	umull	r2, r3, r3, r2
 8001ea0:	095b      	lsrs	r3, r3, #5
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001ea8:	441c      	add	r4, r3
 8001eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001eb4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001eb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001ebc:	4642      	mov	r2, r8
 8001ebe:	464b      	mov	r3, r9
 8001ec0:	1891      	adds	r1, r2, r2
 8001ec2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001ec4:	415b      	adcs	r3, r3
 8001ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ec8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001ecc:	4641      	mov	r1, r8
 8001ece:	1851      	adds	r1, r2, r1
 8001ed0:	6339      	str	r1, [r7, #48]	@ 0x30
 8001ed2:	4649      	mov	r1, r9
 8001ed4:	414b      	adcs	r3, r1
 8001ed6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001ee4:	4659      	mov	r1, fp
 8001ee6:	00cb      	lsls	r3, r1, #3
 8001ee8:	4651      	mov	r1, sl
 8001eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001eee:	4651      	mov	r1, sl
 8001ef0:	00ca      	lsls	r2, r1, #3
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	4642      	mov	r2, r8
 8001efa:	189b      	adds	r3, r3, r2
 8001efc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001f00:	464b      	mov	r3, r9
 8001f02:	460a      	mov	r2, r1
 8001f04:	eb42 0303 	adc.w	r3, r2, r3
 8001f08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001f18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001f1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001f20:	460b      	mov	r3, r1
 8001f22:	18db      	adds	r3, r3, r3
 8001f24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f26:	4613      	mov	r3, r2
 8001f28:	eb42 0303 	adc.w	r3, r2, r3
 8001f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001f36:	f7fe f95b 	bl	80001f0 <__aeabi_uldivmod>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f74 <UART_SetConfig+0x2d4>)
 8001f40:	fba3 1302 	umull	r1, r3, r3, r2
 8001f44:	095b      	lsrs	r3, r3, #5
 8001f46:	2164      	movs	r1, #100	@ 0x64
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	3332      	adds	r3, #50	@ 0x32
 8001f52:	4a08      	ldr	r2, [pc, #32]	@ (8001f74 <UART_SetConfig+0x2d4>)
 8001f54:	fba2 2303 	umull	r2, r3, r2, r3
 8001f58:	095b      	lsrs	r3, r3, #5
 8001f5a:	f003 0207 	and.w	r2, r3, #7
 8001f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4422      	add	r2, r4
 8001f66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001f68:	e106      	b.n	8002178 <UART_SetConfig+0x4d8>
 8001f6a:	bf00      	nop
 8001f6c:	40011000 	.word	0x40011000
 8001f70:	40011400 	.word	0x40011400
 8001f74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001f82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001f86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001f8a:	4642      	mov	r2, r8
 8001f8c:	464b      	mov	r3, r9
 8001f8e:	1891      	adds	r1, r2, r2
 8001f90:	6239      	str	r1, [r7, #32]
 8001f92:	415b      	adcs	r3, r3
 8001f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f9a:	4641      	mov	r1, r8
 8001f9c:	1854      	adds	r4, r2, r1
 8001f9e:	4649      	mov	r1, r9
 8001fa0:	eb43 0501 	adc.w	r5, r3, r1
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	00eb      	lsls	r3, r5, #3
 8001fae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fb2:	00e2      	lsls	r2, r4, #3
 8001fb4:	4614      	mov	r4, r2
 8001fb6:	461d      	mov	r5, r3
 8001fb8:	4643      	mov	r3, r8
 8001fba:	18e3      	adds	r3, r4, r3
 8001fbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001fc0:	464b      	mov	r3, r9
 8001fc2:	eb45 0303 	adc.w	r3, r5, r3
 8001fc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001fd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001fe6:	4629      	mov	r1, r5
 8001fe8:	008b      	lsls	r3, r1, #2
 8001fea:	4621      	mov	r1, r4
 8001fec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ff0:	4621      	mov	r1, r4
 8001ff2:	008a      	lsls	r2, r1, #2
 8001ff4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001ff8:	f7fe f8fa 	bl	80001f0 <__aeabi_uldivmod>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4b60      	ldr	r3, [pc, #384]	@ (8002184 <UART_SetConfig+0x4e4>)
 8002002:	fba3 2302 	umull	r2, r3, r3, r2
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	011c      	lsls	r4, r3, #4
 800200a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800200e:	2200      	movs	r2, #0
 8002010:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002014:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002018:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800201c:	4642      	mov	r2, r8
 800201e:	464b      	mov	r3, r9
 8002020:	1891      	adds	r1, r2, r2
 8002022:	61b9      	str	r1, [r7, #24]
 8002024:	415b      	adcs	r3, r3
 8002026:	61fb      	str	r3, [r7, #28]
 8002028:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800202c:	4641      	mov	r1, r8
 800202e:	1851      	adds	r1, r2, r1
 8002030:	6139      	str	r1, [r7, #16]
 8002032:	4649      	mov	r1, r9
 8002034:	414b      	adcs	r3, r1
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	f04f 0300 	mov.w	r3, #0
 8002040:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002044:	4659      	mov	r1, fp
 8002046:	00cb      	lsls	r3, r1, #3
 8002048:	4651      	mov	r1, sl
 800204a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800204e:	4651      	mov	r1, sl
 8002050:	00ca      	lsls	r2, r1, #3
 8002052:	4610      	mov	r0, r2
 8002054:	4619      	mov	r1, r3
 8002056:	4603      	mov	r3, r0
 8002058:	4642      	mov	r2, r8
 800205a:	189b      	adds	r3, r3, r2
 800205c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002060:	464b      	mov	r3, r9
 8002062:	460a      	mov	r2, r1
 8002064:	eb42 0303 	adc.w	r3, r2, r3
 8002068:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800206c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002076:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002084:	4649      	mov	r1, r9
 8002086:	008b      	lsls	r3, r1, #2
 8002088:	4641      	mov	r1, r8
 800208a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800208e:	4641      	mov	r1, r8
 8002090:	008a      	lsls	r2, r1, #2
 8002092:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002096:	f7fe f8ab 	bl	80001f0 <__aeabi_uldivmod>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4611      	mov	r1, r2
 80020a0:	4b38      	ldr	r3, [pc, #224]	@ (8002184 <UART_SetConfig+0x4e4>)
 80020a2:	fba3 2301 	umull	r2, r3, r3, r1
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	2264      	movs	r2, #100	@ 0x64
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	1acb      	subs	r3, r1, r3
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	3332      	adds	r3, #50	@ 0x32
 80020b4:	4a33      	ldr	r2, [pc, #204]	@ (8002184 <UART_SetConfig+0x4e4>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020c0:	441c      	add	r4, r3
 80020c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020c6:	2200      	movs	r2, #0
 80020c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80020ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80020cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80020d0:	4642      	mov	r2, r8
 80020d2:	464b      	mov	r3, r9
 80020d4:	1891      	adds	r1, r2, r2
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	415b      	adcs	r3, r3
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020e0:	4641      	mov	r1, r8
 80020e2:	1851      	adds	r1, r2, r1
 80020e4:	6039      	str	r1, [r7, #0]
 80020e6:	4649      	mov	r1, r9
 80020e8:	414b      	adcs	r3, r1
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	f04f 0300 	mov.w	r3, #0
 80020f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80020f8:	4659      	mov	r1, fp
 80020fa:	00cb      	lsls	r3, r1, #3
 80020fc:	4651      	mov	r1, sl
 80020fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002102:	4651      	mov	r1, sl
 8002104:	00ca      	lsls	r2, r1, #3
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	4603      	mov	r3, r0
 800210c:	4642      	mov	r2, r8
 800210e:	189b      	adds	r3, r3, r2
 8002110:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002112:	464b      	mov	r3, r9
 8002114:	460a      	mov	r2, r1
 8002116:	eb42 0303 	adc.w	r3, r2, r3
 800211a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800211c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	663b      	str	r3, [r7, #96]	@ 0x60
 8002126:	667a      	str	r2, [r7, #100]	@ 0x64
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002134:	4649      	mov	r1, r9
 8002136:	008b      	lsls	r3, r1, #2
 8002138:	4641      	mov	r1, r8
 800213a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800213e:	4641      	mov	r1, r8
 8002140:	008a      	lsls	r2, r1, #2
 8002142:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002146:	f7fe f853 	bl	80001f0 <__aeabi_uldivmod>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4b0d      	ldr	r3, [pc, #52]	@ (8002184 <UART_SetConfig+0x4e4>)
 8002150:	fba3 1302 	umull	r1, r3, r3, r2
 8002154:	095b      	lsrs	r3, r3, #5
 8002156:	2164      	movs	r1, #100	@ 0x64
 8002158:	fb01 f303 	mul.w	r3, r1, r3
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	3332      	adds	r3, #50	@ 0x32
 8002162:	4a08      	ldr	r2, [pc, #32]	@ (8002184 <UART_SetConfig+0x4e4>)
 8002164:	fba2 2303 	umull	r2, r3, r2, r3
 8002168:	095b      	lsrs	r3, r3, #5
 800216a:	f003 020f 	and.w	r2, r3, #15
 800216e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4422      	add	r2, r4
 8002176:	609a      	str	r2, [r3, #8]
}
 8002178:	bf00      	nop
 800217a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800217e:	46bd      	mov	sp, r7
 8002180:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002184:	51eb851f 	.word	0x51eb851f

08002188 <__NVIC_SetPriority>:
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	6039      	str	r1, [r7, #0]
 8002192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	2b00      	cmp	r3, #0
 800219a:	db0a      	blt.n	80021b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	490c      	ldr	r1, [pc, #48]	@ (80021d4 <__NVIC_SetPriority+0x4c>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	0112      	lsls	r2, r2, #4
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	440b      	add	r3, r1
 80021ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80021b0:	e00a      	b.n	80021c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4908      	ldr	r1, [pc, #32]	@ (80021d8 <__NVIC_SetPriority+0x50>)
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	3b04      	subs	r3, #4
 80021c0:	0112      	lsls	r2, r2, #4
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	440b      	add	r3, r1
 80021c6:	761a      	strb	r2, [r3, #24]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000e100 	.word	0xe000e100
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80021e0:	2100      	movs	r1, #0
 80021e2:	f06f 0004 	mvn.w	r0, #4
 80021e6:	f7ff ffcf 	bl	8002188 <__NVIC_SetPriority>
#endif
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021f6:	f3ef 8305 	mrs	r3, IPSR
 80021fa:	603b      	str	r3, [r7, #0]
  return(result);
 80021fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002202:	f06f 0305 	mvn.w	r3, #5
 8002206:	607b      	str	r3, [r7, #4]
 8002208:	e00c      	b.n	8002224 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800220a:	4b0a      	ldr	r3, [pc, #40]	@ (8002234 <osKernelInitialize+0x44>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d105      	bne.n	800221e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002212:	4b08      	ldr	r3, [pc, #32]	@ (8002234 <osKernelInitialize+0x44>)
 8002214:	2201      	movs	r2, #1
 8002216:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002218:	2300      	movs	r3, #0
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	e002      	b.n	8002224 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800221e:	f04f 33ff 	mov.w	r3, #4294967295
 8002222:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002224:	687b      	ldr	r3, [r7, #4]
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20000094 	.word	0x20000094

08002238 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800223e:	f3ef 8305 	mrs	r3, IPSR
 8002242:	603b      	str	r3, [r7, #0]
  return(result);
 8002244:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <osKernelStart+0x1a>
    stat = osErrorISR;
 800224a:	f06f 0305 	mvn.w	r3, #5
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	e010      	b.n	8002274 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002252:	4b0b      	ldr	r3, [pc, #44]	@ (8002280 <osKernelStart+0x48>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d109      	bne.n	800226e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800225a:	f7ff ffbf 	bl	80021dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800225e:	4b08      	ldr	r3, [pc, #32]	@ (8002280 <osKernelStart+0x48>)
 8002260:	2202      	movs	r2, #2
 8002262:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002264:	f001 fd56 	bl	8003d14 <vTaskStartScheduler>
      stat = osOK;
 8002268:	2300      	movs	r3, #0
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	e002      	b.n	8002274 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800226e:	f04f 33ff 	mov.w	r3, #4294967295
 8002272:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002274:	687b      	ldr	r3, [r7, #4]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000094 	.word	0x20000094

08002284 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002284:	b580      	push	{r7, lr}
 8002286:	b08e      	sub	sp, #56	@ 0x38
 8002288:	af04      	add	r7, sp, #16
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002290:	2300      	movs	r3, #0
 8002292:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002294:	f3ef 8305 	mrs	r3, IPSR
 8002298:	617b      	str	r3, [r7, #20]
  return(result);
 800229a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800229c:	2b00      	cmp	r3, #0
 800229e:	d17e      	bne.n	800239e <osThreadNew+0x11a>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d07b      	beq.n	800239e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80022a6:	2380      	movs	r3, #128	@ 0x80
 80022a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80022aa:	2318      	movs	r3, #24
 80022ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295
 80022b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d045      	beq.n	800234a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <osThreadNew+0x48>
        name = attr->name;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <osThreadNew+0x6e>
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	2b38      	cmp	r3, #56	@ 0x38
 80022e4:	d805      	bhi.n	80022f2 <osThreadNew+0x6e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <osThreadNew+0x72>
        return (NULL);
 80022f2:	2300      	movs	r3, #0
 80022f4:	e054      	b.n	80023a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	089b      	lsrs	r3, r3, #2
 8002304:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00e      	beq.n	800232c <osThreadNew+0xa8>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	2b5b      	cmp	r3, #91	@ 0x5b
 8002314:	d90a      	bls.n	800232c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800231a:	2b00      	cmp	r3, #0
 800231c:	d006      	beq.n	800232c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <osThreadNew+0xa8>
        mem = 1;
 8002326:	2301      	movs	r3, #1
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	e010      	b.n	800234e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10c      	bne.n	800234e <osThreadNew+0xca>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d108      	bne.n	800234e <osThreadNew+0xca>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d104      	bne.n	800234e <osThreadNew+0xca>
          mem = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	61bb      	str	r3, [r7, #24]
 8002348:	e001      	b.n	800234e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d110      	bne.n	8002376 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800235c:	9202      	str	r2, [sp, #8]
 800235e:	9301      	str	r3, [sp, #4]
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	6a3a      	ldr	r2, [r7, #32]
 8002368:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f001 faf6 	bl	800395c <xTaskCreateStatic>
 8002370:	4603      	mov	r3, r0
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	e013      	b.n	800239e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d110      	bne.n	800239e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	b29a      	uxth	r2, r3
 8002380:	f107 0310 	add.w	r3, r7, #16
 8002384:	9301      	str	r3, [sp, #4]
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f001 fb44 	bl	8003a1c <xTaskCreate>
 8002394:	4603      	mov	r3, r0
 8002396:	2b01      	cmp	r3, #1
 8002398:	d001      	beq.n	800239e <osThreadNew+0x11a>
            hTask = NULL;
 800239a:	2300      	movs	r3, #0
 800239c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800239e:	693b      	ldr	r3, [r7, #16]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3728      	adds	r7, #40	@ 0x28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023b0:	f3ef 8305 	mrs	r3, IPSR
 80023b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80023b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <osDelay+0x1c>
    stat = osErrorISR;
 80023bc:	f06f 0305 	mvn.w	r3, #5
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	e007      	b.n	80023d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f001 fc6a 	bl	8003ca8 <vTaskDelay>
    }
  }

  return (stat);
 80023d4:	68fb      	ldr	r3, [r7, #12]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80023de:	b580      	push	{r7, lr}
 80023e0:	b088      	sub	sp, #32
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023ea:	f3ef 8305 	mrs	r3, IPSR
 80023ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80023f0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d174      	bne.n	80024e0 <osMutexNew+0x102>
    if (attr != NULL) {
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <osMutexNew+0x26>
      type = attr->attr_bits;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	61bb      	str	r3, [r7, #24]
 8002402:	e001      	b.n	8002408 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <osMutexNew+0x3a>
      rmtx = 1U;
 8002412:	2301      	movs	r3, #1
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	e001      	b.n	800241c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d15c      	bne.n	80024e0 <osMutexNew+0x102>
      mem = -1;
 8002426:	f04f 33ff 	mov.w	r3, #4294967295
 800242a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d015      	beq.n	800245e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d006      	beq.n	8002448 <osMutexNew+0x6a>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b4f      	cmp	r3, #79	@ 0x4f
 8002440:	d902      	bls.n	8002448 <osMutexNew+0x6a>
          mem = 1;
 8002442:	2301      	movs	r3, #1
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	e00c      	b.n	8002462 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d108      	bne.n	8002462 <osMutexNew+0x84>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d104      	bne.n	8002462 <osMutexNew+0x84>
            mem = 0;
 8002458:	2300      	movs	r3, #0
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	e001      	b.n	8002462 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d112      	bne.n	800248e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d007      	beq.n	800247e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	4619      	mov	r1, r3
 8002474:	2004      	movs	r0, #4
 8002476:	f000 fc50 	bl	8002d1a <xQueueCreateMutexStatic>
 800247a:	61f8      	str	r0, [r7, #28]
 800247c:	e016      	b.n	80024ac <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	4619      	mov	r1, r3
 8002484:	2001      	movs	r0, #1
 8002486:	f000 fc48 	bl	8002d1a <xQueueCreateMutexStatic>
 800248a:	61f8      	str	r0, [r7, #28]
 800248c:	e00e      	b.n	80024ac <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10b      	bne.n	80024ac <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d004      	beq.n	80024a4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800249a:	2004      	movs	r0, #4
 800249c:	f000 fc25 	bl	8002cea <xQueueCreateMutex>
 80024a0:	61f8      	str	r0, [r7, #28]
 80024a2:	e003      	b.n	80024ac <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80024a4:	2001      	movs	r0, #1
 80024a6:	f000 fc20 	bl	8002cea <xQueueCreateMutex>
 80024aa:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00c      	beq.n	80024cc <osMutexNew+0xee>
        if (attr != NULL) {
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <osMutexNew+0xe2>
          name = attr->name;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	e001      	b.n	80024c4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80024c4:	68f9      	ldr	r1, [r7, #12]
 80024c6:	69f8      	ldr	r0, [r7, #28]
 80024c8:	f001 f9ea 	bl	80038a0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d006      	beq.n	80024e0 <osMutexNew+0x102>
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80024e0:	69fb      	ldr	r3, [r7, #28]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3720      	adds	r7, #32
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b086      	sub	sp, #24
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f023 0301 	bic.w	r3, r3, #1
 80024fa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002508:	f3ef 8305 	mrs	r3, IPSR
 800250c:	60bb      	str	r3, [r7, #8]
  return(result);
 800250e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8002514:	f06f 0305 	mvn.w	r3, #5
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	e02c      	b.n	8002576 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d103      	bne.n	800252a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8002522:	f06f 0303 	mvn.w	r3, #3
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	e025      	b.n	8002576 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d011      	beq.n	8002554 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8002530:	6839      	ldr	r1, [r7, #0]
 8002532:	6938      	ldr	r0, [r7, #16]
 8002534:	f000 fc41 	bl	8002dba <xQueueTakeMutexRecursive>
 8002538:	4603      	mov	r3, r0
 800253a:	2b01      	cmp	r3, #1
 800253c:	d01b      	beq.n	8002576 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8002544:	f06f 0301 	mvn.w	r3, #1
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	e014      	b.n	8002576 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800254c:	f06f 0302 	mvn.w	r3, #2
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	e010      	b.n	8002576 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8002554:	6839      	ldr	r1, [r7, #0]
 8002556:	6938      	ldr	r0, [r7, #16]
 8002558:	f000 fee8 	bl	800332c <xQueueSemaphoreTake>
 800255c:	4603      	mov	r3, r0
 800255e:	2b01      	cmp	r3, #1
 8002560:	d009      	beq.n	8002576 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8002568:	f06f 0301 	mvn.w	r3, #1
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	e002      	b.n	8002576 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002570:	f06f 0302 	mvn.w	r3, #2
 8002574:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8002576:	697b      	ldr	r3, [r7, #20]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800259c:	f3ef 8305 	mrs	r3, IPSR
 80025a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80025a2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <osMutexRelease+0x30>
    stat = osErrorISR;
 80025a8:	f06f 0305 	mvn.w	r3, #5
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	e01f      	b.n	80025f0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d103      	bne.n	80025be <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80025b6:	f06f 0303 	mvn.w	r3, #3
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	e018      	b.n	80025f0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d009      	beq.n	80025d8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80025c4:	6938      	ldr	r0, [r7, #16]
 80025c6:	f000 fbc3 	bl	8002d50 <xQueueGiveMutexRecursive>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d00f      	beq.n	80025f0 <osMutexRelease+0x70>
        stat = osErrorResource;
 80025d0:	f06f 0302 	mvn.w	r3, #2
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	e00b      	b.n	80025f0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80025d8:	2300      	movs	r3, #0
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	6938      	ldr	r0, [r7, #16]
 80025e0:	f000 fc22 	bl	8002e28 <xQueueGenericSend>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d002      	beq.n	80025f0 <osMutexRelease+0x70>
        stat = osErrorResource;
 80025ea:	f06f 0302 	mvn.w	r3, #2
 80025ee:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80025f0:	697b      	ldr	r3, [r7, #20]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b08a      	sub	sp, #40	@ 0x28
 80025fe:	af02      	add	r7, sp, #8
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800260a:	f3ef 8305 	mrs	r3, IPSR
 800260e:	613b      	str	r3, [r7, #16]
  return(result);
 8002610:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002612:	2b00      	cmp	r3, #0
 8002614:	d15f      	bne.n	80026d6 <osMessageQueueNew+0xdc>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d05c      	beq.n	80026d6 <osMessageQueueNew+0xdc>
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d059      	beq.n	80026d6 <osMessageQueueNew+0xdc>
    mem = -1;
 8002622:	f04f 33ff 	mov.w	r3, #4294967295
 8002626:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d029      	beq.n	8002682 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d012      	beq.n	800265c <osMessageQueueNew+0x62>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	2b4f      	cmp	r3, #79	@ 0x4f
 800263c:	d90e      	bls.n	800265c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	fb01 f303 	mul.w	r3, r1, r3
 8002652:	429a      	cmp	r2, r3
 8002654:	d302      	bcc.n	800265c <osMessageQueueNew+0x62>
        mem = 1;
 8002656:	2301      	movs	r3, #1
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	e014      	b.n	8002686 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d110      	bne.n	8002686 <osMessageQueueNew+0x8c>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10c      	bne.n	8002686 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002670:	2b00      	cmp	r3, #0
 8002672:	d108      	bne.n	8002686 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d104      	bne.n	8002686 <osMessageQueueNew+0x8c>
          mem = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	61bb      	str	r3, [r7, #24]
 8002680:	e001      	b.n	8002686 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8002682:	2300      	movs	r3, #0
 8002684:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d10b      	bne.n	80026a4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2100      	movs	r1, #0
 8002696:	9100      	str	r1, [sp, #0]
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 fa30 	bl	8002b00 <xQueueGenericCreateStatic>
 80026a0:	61f8      	str	r0, [r7, #28]
 80026a2:	e008      	b.n	80026b6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d105      	bne.n	80026b6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80026aa:	2200      	movs	r2, #0
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 faa3 	bl	8002bfa <xQueueGenericCreate>
 80026b4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00c      	beq.n	80026d6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <osMessageQueueNew+0xd0>
        name = attr->name;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	e001      	b.n	80026ce <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80026ce:	6979      	ldr	r1, [r7, #20]
 80026d0:	69f8      	ldr	r0, [r7, #28]
 80026d2:	f001 f8e5 	bl	80038a0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80026d6:	69fb      	ldr	r3, [r7, #28]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3720      	adds	r7, #32
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	4613      	mov	r3, r2
 80026ee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026f8:	f3ef 8305 	mrs	r3, IPSR
 80026fc:	617b      	str	r3, [r7, #20]
  return(result);
 80026fe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002700:	2b00      	cmp	r3, #0
 8002702:	d028      	beq.n	8002756 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <osMessageQueuePut+0x36>
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <osMessageQueuePut+0x36>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8002716:	f06f 0303 	mvn.w	r3, #3
 800271a:	61fb      	str	r3, [r7, #28]
 800271c:	e038      	b.n	8002790 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002722:	f107 0210 	add.w	r2, r7, #16
 8002726:	2300      	movs	r3, #0
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	69b8      	ldr	r0, [r7, #24]
 800272c:	f000 fc7e 	bl	800302c <xQueueGenericSendFromISR>
 8002730:	4603      	mov	r3, r0
 8002732:	2b01      	cmp	r3, #1
 8002734:	d003      	beq.n	800273e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8002736:	f06f 0302 	mvn.w	r3, #2
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	e028      	b.n	8002790 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d025      	beq.n	8002790 <osMessageQueuePut+0xb0>
 8002744:	4b15      	ldr	r3, [pc, #84]	@ (800279c <osMessageQueuePut+0xbc>)
 8002746:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	f3bf 8f4f 	dsb	sy
 8002750:	f3bf 8f6f 	isb	sy
 8002754:	e01c      	b.n	8002790 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <osMessageQueuePut+0x82>
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d103      	bne.n	800276a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8002762:	f06f 0303 	mvn.w	r3, #3
 8002766:	61fb      	str	r3, [r7, #28]
 8002768:	e012      	b.n	8002790 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800276a:	2300      	movs	r3, #0
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	68b9      	ldr	r1, [r7, #8]
 8002770:	69b8      	ldr	r0, [r7, #24]
 8002772:	f000 fb59 	bl	8002e28 <xQueueGenericSend>
 8002776:	4603      	mov	r3, r0
 8002778:	2b01      	cmp	r3, #1
 800277a:	d009      	beq.n	8002790 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8002782:	f06f 0301 	mvn.w	r3, #1
 8002786:	61fb      	str	r3, [r7, #28]
 8002788:	e002      	b.n	8002790 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800278a:	f06f 0302 	mvn.w	r3, #2
 800278e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002790:	69fb      	ldr	r3, [r7, #28]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3720      	adds	r7, #32
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	e000ed04 	.word	0xe000ed04

080027a0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027b6:	f3ef 8305 	mrs	r3, IPSR
 80027ba:	617b      	str	r3, [r7, #20]
  return(result);
 80027bc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d028      	beq.n	8002814 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <osMessageQueueGet+0x34>
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <osMessageQueueGet+0x34>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80027d4:	f06f 0303 	mvn.w	r3, #3
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	e037      	b.n	800284c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80027dc:	2300      	movs	r3, #0
 80027de:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80027e0:	f107 0310 	add.w	r3, r7, #16
 80027e4:	461a      	mov	r2, r3
 80027e6:	68b9      	ldr	r1, [r7, #8]
 80027e8:	69b8      	ldr	r0, [r7, #24]
 80027ea:	f000 feaf 	bl	800354c <xQueueReceiveFromISR>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d003      	beq.n	80027fc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80027f4:	f06f 0302 	mvn.w	r3, #2
 80027f8:	61fb      	str	r3, [r7, #28]
 80027fa:	e027      	b.n	800284c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d024      	beq.n	800284c <osMessageQueueGet+0xac>
 8002802:	4b15      	ldr	r3, [pc, #84]	@ (8002858 <osMessageQueueGet+0xb8>)
 8002804:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	f3bf 8f6f 	isb	sy
 8002812:	e01b      	b.n	800284c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d002      	beq.n	8002820 <osMessageQueueGet+0x80>
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d103      	bne.n	8002828 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8002820:	f06f 0303 	mvn.w	r3, #3
 8002824:	61fb      	str	r3, [r7, #28]
 8002826:	e011      	b.n	800284c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	68b9      	ldr	r1, [r7, #8]
 800282c:	69b8      	ldr	r0, [r7, #24]
 800282e:	f000 fc9b 	bl	8003168 <xQueueReceive>
 8002832:	4603      	mov	r3, r0
 8002834:	2b01      	cmp	r3, #1
 8002836:	d009      	beq.n	800284c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800283e:	f06f 0301 	mvn.w	r3, #1
 8002842:	61fb      	str	r3, [r7, #28]
 8002844:	e002      	b.n	800284c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8002846:	f06f 0302 	mvn.w	r3, #2
 800284a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800284c:	69fb      	ldr	r3, [r7, #28]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3720      	adds	r7, #32
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	e000ed04 	.word	0xe000ed04

0800285c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4a07      	ldr	r2, [pc, #28]	@ (8002888 <vApplicationGetIdleTaskMemory+0x2c>)
 800286c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	4a06      	ldr	r2, [pc, #24]	@ (800288c <vApplicationGetIdleTaskMemory+0x30>)
 8002872:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2280      	movs	r2, #128	@ 0x80
 8002878:	601a      	str	r2, [r3, #0]
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20000098 	.word	0x20000098
 800288c:	200000f4 	.word	0x200000f4

08002890 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4a07      	ldr	r2, [pc, #28]	@ (80028bc <vApplicationGetTimerTaskMemory+0x2c>)
 80028a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	4a06      	ldr	r2, [pc, #24]	@ (80028c0 <vApplicationGetTimerTaskMemory+0x30>)
 80028a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028ae:	601a      	str	r2, [r3, #0]
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	200002f4 	.word	0x200002f4
 80028c0:	20000350 	.word	0x20000350

080028c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f103 0208 	add.w	r2, r3, #8
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f04f 32ff 	mov.w	r2, #4294967295
 80028dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f103 0208 	add.w	r2, r3, #8
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f103 0208 	add.w	r2, r3, #8
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800291e:	b480      	push	{r7}
 8002920:	b085      	sub	sp, #20
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	601a      	str	r2, [r3, #0]
}
 800295a:	bf00      	nop
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002966:	b480      	push	{r7}
 8002968:	b085      	sub	sp, #20
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d103      	bne.n	8002986 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	e00c      	b.n	80029a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3308      	adds	r3, #8
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	e002      	b.n	8002994 <vListInsert+0x2e>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	429a      	cmp	r2, r3
 800299e:	d2f6      	bcs.n	800298e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	601a      	str	r2, [r3, #0]
}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6892      	ldr	r2, [r2, #8]
 80029ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6852      	ldr	r2, [r2, #4]
 80029f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d103      	bne.n	8002a0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	1e5a      	subs	r2, r3, #1
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10b      	bne.n	8002a58 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a52:	bf00      	nop
 8002a54:	bf00      	nop
 8002a56:	e7fd      	b.n	8002a54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a58:	f002 fc26 	bl	80052a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a64:	68f9      	ldr	r1, [r7, #12]
 8002a66:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	441a      	add	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	68f9      	ldr	r1, [r7, #12]
 8002a8c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	441a      	add	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	22ff      	movs	r2, #255	@ 0xff
 8002a9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	22ff      	movs	r2, #255	@ 0xff
 8002aa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d114      	bne.n	8002ad8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d01a      	beq.n	8002aec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	3310      	adds	r3, #16
 8002aba:	4618      	mov	r0, r3
 8002abc:	f001 fbb8 	bl	8004230 <xTaskRemoveFromEventList>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d012      	beq.n	8002aec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8002afc <xQueueGenericReset+0xd0>)
 8002ac8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	f3bf 8f4f 	dsb	sy
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	e009      	b.n	8002aec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3310      	adds	r3, #16
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fef1 	bl	80028c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	3324      	adds	r3, #36	@ 0x24
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff feec 	bl	80028c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002aec:	f002 fc0e 	bl	800530c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002af0:	2301      	movs	r3, #1
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	e000ed04 	.word	0xe000ed04

08002b00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08e      	sub	sp, #56	@ 0x38
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
 8002b0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10b      	bne.n	8002b2c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b26:	bf00      	nop
 8002b28:	bf00      	nop
 8002b2a:	e7fd      	b.n	8002b28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10b      	bne.n	8002b4a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b36:	f383 8811 	msr	BASEPRI, r3
 8002b3a:	f3bf 8f6f 	isb	sy
 8002b3e:	f3bf 8f4f 	dsb	sy
 8002b42:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop
 8002b48:	e7fd      	b.n	8002b46 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d002      	beq.n	8002b56 <xQueueGenericCreateStatic+0x56>
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <xQueueGenericCreateStatic+0x5a>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <xQueueGenericCreateStatic+0x5c>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10b      	bne.n	8002b78 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b64:	f383 8811 	msr	BASEPRI, r3
 8002b68:	f3bf 8f6f 	isb	sy
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	623b      	str	r3, [r7, #32]
}
 8002b72:	bf00      	nop
 8002b74:	bf00      	nop
 8002b76:	e7fd      	b.n	8002b74 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d102      	bne.n	8002b84 <xQueueGenericCreateStatic+0x84>
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <xQueueGenericCreateStatic+0x88>
 8002b84:	2301      	movs	r3, #1
 8002b86:	e000      	b.n	8002b8a <xQueueGenericCreateStatic+0x8a>
 8002b88:	2300      	movs	r3, #0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10b      	bne.n	8002ba6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b92:	f383 8811 	msr	BASEPRI, r3
 8002b96:	f3bf 8f6f 	isb	sy
 8002b9a:	f3bf 8f4f 	dsb	sy
 8002b9e:	61fb      	str	r3, [r7, #28]
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	e7fd      	b.n	8002ba2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ba6:	2350      	movs	r3, #80	@ 0x50
 8002ba8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2b50      	cmp	r3, #80	@ 0x50
 8002bae:	d00b      	beq.n	8002bc8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	61bb      	str	r3, [r7, #24]
}
 8002bc2:	bf00      	nop
 8002bc4:	bf00      	nop
 8002bc6:	e7fd      	b.n	8002bc4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002bc8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00d      	beq.n	8002bf0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bdc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	4613      	mov	r3, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f840 	bl	8002c70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3730      	adds	r7, #48	@ 0x30
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b08a      	sub	sp, #40	@ 0x28
 8002bfe:	af02      	add	r7, sp, #8
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	4613      	mov	r3, r2
 8002c06:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10b      	bne.n	8002c26 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	613b      	str	r3, [r7, #16]
}
 8002c20:	bf00      	nop
 8002c22:	bf00      	nop
 8002c24:	e7fd      	b.n	8002c22 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	fb02 f303 	mul.w	r3, r2, r3
 8002c2e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	3350      	adds	r3, #80	@ 0x50
 8002c34:	4618      	mov	r0, r3
 8002c36:	f002 fc59 	bl	80054ec <pvPortMalloc>
 8002c3a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d011      	beq.n	8002c66 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	3350      	adds	r3, #80	@ 0x50
 8002c4a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c54:	79fa      	ldrb	r2, [r7, #7]
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	68b9      	ldr	r1, [r7, #8]
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 f805 	bl	8002c70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c66:	69bb      	ldr	r3, [r7, #24]
	}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3720      	adds	r7, #32
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d103      	bne.n	8002c8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	e002      	b.n	8002c92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	69b8      	ldr	r0, [r7, #24]
 8002ca2:	f7ff fec3 	bl	8002a2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00e      	beq.n	8002ce2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2100      	movs	r1, #0
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f8a3 	bl	8002e28 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b086      	sub	sp, #24
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	6939      	ldr	r1, [r7, #16]
 8002d02:	6978      	ldr	r0, [r7, #20]
 8002d04:	f7ff ff79 	bl	8002bfa <xQueueGenericCreate>
 8002d08:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f7ff ffd3 	bl	8002cb6 <prvInitialiseMutex>

		return xNewQueue;
 8002d10:	68fb      	ldr	r3, [r7, #12]
	}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b088      	sub	sp, #32
 8002d1e:	af02      	add	r7, sp, #8
 8002d20:	4603      	mov	r3, r0
 8002d22:	6039      	str	r1, [r7, #0]
 8002d24:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002d26:	2301      	movs	r3, #1
 8002d28:	617b      	str	r3, [r7, #20]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2200      	movs	r2, #0
 8002d36:	6939      	ldr	r1, [r7, #16]
 8002d38:	6978      	ldr	r0, [r7, #20]
 8002d3a:	f7ff fee1 	bl	8002b00 <xQueueGenericCreateStatic>
 8002d3e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f7ff ffb8 	bl	8002cb6 <prvInitialiseMutex>

		return xNewQueue;
 8002d46:	68fb      	ldr	r3, [r7, #12]
	}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10b      	bne.n	8002d7a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8002d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	60fb      	str	r3, [r7, #12]
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	e7fd      	b.n	8002d76 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	689c      	ldr	r4, [r3, #8]
 8002d7e:	f001 fc17 	bl	80045b0 <xTaskGetCurrentTaskHandle>
 8002d82:	4603      	mov	r3, r0
 8002d84:	429c      	cmp	r4, r3
 8002d86:	d111      	bne.n	8002dac <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	1e5a      	subs	r2, r3, #1
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d105      	bne.n	8002da6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2100      	movs	r1, #0
 8002da0:	6938      	ldr	r0, [r7, #16]
 8002da2:	f000 f841 	bl	8002e28 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8002da6:	2301      	movs	r3, #1
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	e001      	b.n	8002db0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8002db0:	697b      	ldr	r3, [r7, #20]
	}
 8002db2:	4618      	mov	r0, r3
 8002db4:	371c      	adds	r7, #28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd90      	pop	{r4, r7, pc}

08002dba <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8002dba:	b590      	push	{r4, r7, lr}
 8002dbc:	b087      	sub	sp, #28
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10b      	bne.n	8002de6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8002dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dd2:	f383 8811 	msr	BASEPRI, r3
 8002dd6:	f3bf 8f6f 	isb	sy
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	60fb      	str	r3, [r7, #12]
}
 8002de0:	bf00      	nop
 8002de2:	bf00      	nop
 8002de4:	e7fd      	b.n	8002de2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	689c      	ldr	r4, [r3, #8]
 8002dea:	f001 fbe1 	bl	80045b0 <xTaskGetCurrentTaskHandle>
 8002dee:	4603      	mov	r3, r0
 8002df0:	429c      	cmp	r4, r3
 8002df2:	d107      	bne.n	8002e04 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	e00c      	b.n	8002e1e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8002e04:	6839      	ldr	r1, [r7, #0]
 8002e06:	6938      	ldr	r0, [r7, #16]
 8002e08:	f000 fa90 	bl	800332c <xQueueSemaphoreTake>
 8002e0c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d004      	beq.n	8002e1e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8002e1e:	697b      	ldr	r3, [r7, #20]
	}
 8002e20:	4618      	mov	r0, r3
 8002e22:	371c      	adds	r7, #28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd90      	pop	{r4, r7, pc}

08002e28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08e      	sub	sp, #56	@ 0x38
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e36:	2300      	movs	r3, #0
 8002e38:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10b      	bne.n	8002e5c <xQueueGenericSend+0x34>
	__asm volatile
 8002e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e56:	bf00      	nop
 8002e58:	bf00      	nop
 8002e5a:	e7fd      	b.n	8002e58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d103      	bne.n	8002e6a <xQueueGenericSend+0x42>
 8002e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <xQueueGenericSend+0x46>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <xQueueGenericSend+0x48>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10b      	bne.n	8002e8c <xQueueGenericSend+0x64>
	__asm volatile
 8002e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e78:	f383 8811 	msr	BASEPRI, r3
 8002e7c:	f3bf 8f6f 	isb	sy
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e86:	bf00      	nop
 8002e88:	bf00      	nop
 8002e8a:	e7fd      	b.n	8002e88 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d103      	bne.n	8002e9a <xQueueGenericSend+0x72>
 8002e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <xQueueGenericSend+0x76>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <xQueueGenericSend+0x78>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10b      	bne.n	8002ebc <xQueueGenericSend+0x94>
	__asm volatile
 8002ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ea8:	f383 8811 	msr	BASEPRI, r3
 8002eac:	f3bf 8f6f 	isb	sy
 8002eb0:	f3bf 8f4f 	dsb	sy
 8002eb4:	623b      	str	r3, [r7, #32]
}
 8002eb6:	bf00      	nop
 8002eb8:	bf00      	nop
 8002eba:	e7fd      	b.n	8002eb8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ebc:	f001 fb88 	bl	80045d0 <xTaskGetSchedulerState>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d102      	bne.n	8002ecc <xQueueGenericSend+0xa4>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <xQueueGenericSend+0xa8>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <xQueueGenericSend+0xaa>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10b      	bne.n	8002eee <xQueueGenericSend+0xc6>
	__asm volatile
 8002ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eda:	f383 8811 	msr	BASEPRI, r3
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	61fb      	str	r3, [r7, #28]
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	e7fd      	b.n	8002eea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002eee:	f002 f9db 	bl	80052a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d302      	bcc.n	8002f04 <xQueueGenericSend+0xdc>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d129      	bne.n	8002f58 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	68b9      	ldr	r1, [r7, #8]
 8002f08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f0a:	f000 fbb9 	bl	8003680 <prvCopyDataToQueue>
 8002f0e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d010      	beq.n	8002f3a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1a:	3324      	adds	r3, #36	@ 0x24
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f001 f987 	bl	8004230 <xTaskRemoveFromEventList>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d013      	beq.n	8002f50 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f28:	4b3f      	ldr	r3, [pc, #252]	@ (8003028 <xQueueGenericSend+0x200>)
 8002f2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	f3bf 8f4f 	dsb	sy
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	e00a      	b.n	8002f50 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d007      	beq.n	8002f50 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f40:	4b39      	ldr	r3, [pc, #228]	@ (8003028 <xQueueGenericSend+0x200>)
 8002f42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f50:	f002 f9dc 	bl	800530c <vPortExitCritical>
				return pdPASS;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e063      	b.n	8003020 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d103      	bne.n	8002f66 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f5e:	f002 f9d5 	bl	800530c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	e05c      	b.n	8003020 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d106      	bne.n	8002f7a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f6c:	f107 0314 	add.w	r3, r7, #20
 8002f70:	4618      	mov	r0, r3
 8002f72:	f001 f9c1 	bl	80042f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f76:	2301      	movs	r3, #1
 8002f78:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f7a:	f002 f9c7 	bl	800530c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f7e:	f000 ff31 	bl	8003de4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f82:	f002 f991 	bl	80052a8 <vPortEnterCritical>
 8002f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f8c:	b25b      	sxtb	r3, r3
 8002f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f92:	d103      	bne.n	8002f9c <xQueueGenericSend+0x174>
 8002f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002fa2:	b25b      	sxtb	r3, r3
 8002fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa8:	d103      	bne.n	8002fb2 <xQueueGenericSend+0x18a>
 8002faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fb2:	f002 f9ab 	bl	800530c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fb6:	1d3a      	adds	r2, r7, #4
 8002fb8:	f107 0314 	add.w	r3, r7, #20
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f001 f9b0 	bl	8004324 <xTaskCheckForTimeOut>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d124      	bne.n	8003014 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002fca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fcc:	f000 fc50 	bl	8003870 <prvIsQueueFull>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d018      	beq.n	8003008 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd8:	3310      	adds	r3, #16
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f001 f8d4 	bl	800418c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002fe4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fe6:	f000 fbdb 	bl	80037a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002fea:	f000 ff09 	bl	8003e00 <xTaskResumeAll>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f47f af7c 	bne.w	8002eee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8003028 <xQueueGenericSend+0x200>)
 8002ff8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	e772      	b.n	8002eee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003008:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800300a:	f000 fbc9 	bl	80037a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800300e:	f000 fef7 	bl	8003e00 <xTaskResumeAll>
 8003012:	e76c      	b.n	8002eee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003014:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003016:	f000 fbc3 	bl	80037a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800301a:	f000 fef1 	bl	8003e00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800301e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003020:	4618      	mov	r0, r3
 8003022:	3738      	adds	r7, #56	@ 0x38
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	e000ed04 	.word	0xe000ed04

0800302c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b090      	sub	sp, #64	@ 0x40
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800303e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10b      	bne.n	800305c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003048:	f383 8811 	msr	BASEPRI, r3
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003056:	bf00      	nop
 8003058:	bf00      	nop
 800305a:	e7fd      	b.n	8003058 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d103      	bne.n	800306a <xQueueGenericSendFromISR+0x3e>
 8003062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <xQueueGenericSendFromISR+0x42>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <xQueueGenericSendFromISR+0x44>
 800306e:	2300      	movs	r3, #0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10b      	bne.n	800308c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003078:	f383 8811 	msr	BASEPRI, r3
 800307c:	f3bf 8f6f 	isb	sy
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003086:	bf00      	nop
 8003088:	bf00      	nop
 800308a:	e7fd      	b.n	8003088 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d103      	bne.n	800309a <xQueueGenericSendFromISR+0x6e>
 8003092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <xQueueGenericSendFromISR+0x72>
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <xQueueGenericSendFromISR+0x74>
 800309e:	2300      	movs	r3, #0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10b      	bne.n	80030bc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80030a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a8:	f383 8811 	msr	BASEPRI, r3
 80030ac:	f3bf 8f6f 	isb	sy
 80030b0:	f3bf 8f4f 	dsb	sy
 80030b4:	623b      	str	r3, [r7, #32]
}
 80030b6:	bf00      	nop
 80030b8:	bf00      	nop
 80030ba:	e7fd      	b.n	80030b8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030bc:	f002 f9d4 	bl	8005468 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80030c0:	f3ef 8211 	mrs	r2, BASEPRI
 80030c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c8:	f383 8811 	msr	BASEPRI, r3
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	61fa      	str	r2, [r7, #28]
 80030d6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80030d8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030da:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d302      	bcc.n	80030ee <xQueueGenericSendFromISR+0xc2>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d12f      	bne.n	800314e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80030ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003104:	f000 fabc 	bl	8003680 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003108:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800310c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003110:	d112      	bne.n	8003138 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003116:	2b00      	cmp	r3, #0
 8003118:	d016      	beq.n	8003148 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800311a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800311c:	3324      	adds	r3, #36	@ 0x24
 800311e:	4618      	mov	r0, r3
 8003120:	f001 f886 	bl	8004230 <xTaskRemoveFromEventList>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00e      	beq.n	8003148 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00b      	beq.n	8003148 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	e007      	b.n	8003148 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003138:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800313c:	3301      	adds	r3, #1
 800313e:	b2db      	uxtb	r3, r3
 8003140:	b25a      	sxtb	r2, r3
 8003142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003144:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003148:	2301      	movs	r3, #1
 800314a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800314c:	e001      	b.n	8003152 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800314e:	2300      	movs	r3, #0
 8003150:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003154:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800315c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800315e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003160:	4618      	mov	r0, r3
 8003162:	3740      	adds	r7, #64	@ 0x40
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08c      	sub	sp, #48	@ 0x30
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003174:	2300      	movs	r3, #0
 8003176:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800317c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10b      	bne.n	800319a <xQueueReceive+0x32>
	__asm volatile
 8003182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003186:	f383 8811 	msr	BASEPRI, r3
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	623b      	str	r3, [r7, #32]
}
 8003194:	bf00      	nop
 8003196:	bf00      	nop
 8003198:	e7fd      	b.n	8003196 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d103      	bne.n	80031a8 <xQueueReceive+0x40>
 80031a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <xQueueReceive+0x44>
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <xQueueReceive+0x46>
 80031ac:	2300      	movs	r3, #0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10b      	bne.n	80031ca <xQueueReceive+0x62>
	__asm volatile
 80031b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b6:	f383 8811 	msr	BASEPRI, r3
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	61fb      	str	r3, [r7, #28]
}
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop
 80031c8:	e7fd      	b.n	80031c6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031ca:	f001 fa01 	bl	80045d0 <xTaskGetSchedulerState>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <xQueueReceive+0x72>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <xQueueReceive+0x76>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <xQueueReceive+0x78>
 80031de:	2300      	movs	r3, #0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10b      	bne.n	80031fc <xQueueReceive+0x94>
	__asm volatile
 80031e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e8:	f383 8811 	msr	BASEPRI, r3
 80031ec:	f3bf 8f6f 	isb	sy
 80031f0:	f3bf 8f4f 	dsb	sy
 80031f4:	61bb      	str	r3, [r7, #24]
}
 80031f6:	bf00      	nop
 80031f8:	bf00      	nop
 80031fa:	e7fd      	b.n	80031f8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031fc:	f002 f854 	bl	80052a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003204:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003208:	2b00      	cmp	r3, #0
 800320a:	d01f      	beq.n	800324c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003210:	f000 faa0 	bl	8003754 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003216:	1e5a      	subs	r2, r3, #1
 8003218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800321c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00f      	beq.n	8003244 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003226:	3310      	adds	r3, #16
 8003228:	4618      	mov	r0, r3
 800322a:	f001 f801 	bl	8004230 <xTaskRemoveFromEventList>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d007      	beq.n	8003244 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003234:	4b3c      	ldr	r3, [pc, #240]	@ (8003328 <xQueueReceive+0x1c0>)
 8003236:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003244:	f002 f862 	bl	800530c <vPortExitCritical>
				return pdPASS;
 8003248:	2301      	movs	r3, #1
 800324a:	e069      	b.n	8003320 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d103      	bne.n	800325a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003252:	f002 f85b 	bl	800530c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003256:	2300      	movs	r3, #0
 8003258:	e062      	b.n	8003320 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800325a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800325c:	2b00      	cmp	r3, #0
 800325e:	d106      	bne.n	800326e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003260:	f107 0310 	add.w	r3, r7, #16
 8003264:	4618      	mov	r0, r3
 8003266:	f001 f847 	bl	80042f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800326a:	2301      	movs	r3, #1
 800326c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800326e:	f002 f84d 	bl	800530c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003272:	f000 fdb7 	bl	8003de4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003276:	f002 f817 	bl	80052a8 <vPortEnterCritical>
 800327a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800327c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003280:	b25b      	sxtb	r3, r3
 8003282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003286:	d103      	bne.n	8003290 <xQueueReceive+0x128>
 8003288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003292:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003296:	b25b      	sxtb	r3, r3
 8003298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329c:	d103      	bne.n	80032a6 <xQueueReceive+0x13e>
 800329e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032a6:	f002 f831 	bl	800530c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032aa:	1d3a      	adds	r2, r7, #4
 80032ac:	f107 0310 	add.w	r3, r7, #16
 80032b0:	4611      	mov	r1, r2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f001 f836 	bl	8004324 <xTaskCheckForTimeOut>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d123      	bne.n	8003306 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032c0:	f000 fac0 	bl	8003844 <prvIsQueueEmpty>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d017      	beq.n	80032fa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032cc:	3324      	adds	r3, #36	@ 0x24
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4611      	mov	r1, r2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 ff5a 	bl	800418c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032da:	f000 fa61 	bl	80037a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032de:	f000 fd8f 	bl	8003e00 <xTaskResumeAll>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d189      	bne.n	80031fc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80032e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003328 <xQueueReceive+0x1c0>)
 80032ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	f3bf 8f6f 	isb	sy
 80032f8:	e780      	b.n	80031fc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80032fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032fc:	f000 fa50 	bl	80037a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003300:	f000 fd7e 	bl	8003e00 <xTaskResumeAll>
 8003304:	e77a      	b.n	80031fc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003306:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003308:	f000 fa4a 	bl	80037a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800330c:	f000 fd78 	bl	8003e00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003310:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003312:	f000 fa97 	bl	8003844 <prvIsQueueEmpty>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	f43f af6f 	beq.w	80031fc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800331e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003320:	4618      	mov	r0, r3
 8003322:	3730      	adds	r7, #48	@ 0x30
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	e000ed04 	.word	0xe000ed04

0800332c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08e      	sub	sp, #56	@ 0x38
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003336:	2300      	movs	r3, #0
 8003338:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800333e:	2300      	movs	r3, #0
 8003340:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10b      	bne.n	8003360 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	623b      	str	r3, [r7, #32]
}
 800335a:	bf00      	nop
 800335c:	bf00      	nop
 800335e:	e7fd      	b.n	800335c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00b      	beq.n	8003380 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800336c:	f383 8811 	msr	BASEPRI, r3
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	61fb      	str	r3, [r7, #28]
}
 800337a:	bf00      	nop
 800337c:	bf00      	nop
 800337e:	e7fd      	b.n	800337c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003380:	f001 f926 	bl	80045d0 <xTaskGetSchedulerState>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d102      	bne.n	8003390 <xQueueSemaphoreTake+0x64>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <xQueueSemaphoreTake+0x68>
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <xQueueSemaphoreTake+0x6a>
 8003394:	2300      	movs	r3, #0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10b      	bne.n	80033b2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800339a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800339e:	f383 8811 	msr	BASEPRI, r3
 80033a2:	f3bf 8f6f 	isb	sy
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	61bb      	str	r3, [r7, #24]
}
 80033ac:	bf00      	nop
 80033ae:	bf00      	nop
 80033b0:	e7fd      	b.n	80033ae <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033b2:	f001 ff79 	bl	80052a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80033b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ba:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80033bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d024      	beq.n	800340c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80033c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c4:	1e5a      	subs	r2, r3, #1
 80033c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d104      	bne.n	80033dc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80033d2:	f001 fa77 	bl	80048c4 <pvTaskIncrementMutexHeldCount>
 80033d6:	4602      	mov	r2, r0
 80033d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033da:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00f      	beq.n	8003404 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033e6:	3310      	adds	r3, #16
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 ff21 	bl	8004230 <xTaskRemoveFromEventList>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d007      	beq.n	8003404 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033f4:	4b54      	ldr	r3, [pc, #336]	@ (8003548 <xQueueSemaphoreTake+0x21c>)
 80033f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003404:	f001 ff82 	bl	800530c <vPortExitCritical>
				return pdPASS;
 8003408:	2301      	movs	r3, #1
 800340a:	e098      	b.n	800353e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d112      	bne.n	8003438 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00b      	beq.n	8003430 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	617b      	str	r3, [r7, #20]
}
 800342a:	bf00      	nop
 800342c:	bf00      	nop
 800342e:	e7fd      	b.n	800342c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003430:	f001 ff6c 	bl	800530c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003434:	2300      	movs	r3, #0
 8003436:	e082      	b.n	800353e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800343e:	f107 030c 	add.w	r3, r7, #12
 8003442:	4618      	mov	r0, r3
 8003444:	f000 ff58 	bl	80042f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003448:	2301      	movs	r3, #1
 800344a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800344c:	f001 ff5e 	bl	800530c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003450:	f000 fcc8 	bl	8003de4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003454:	f001 ff28 	bl	80052a8 <vPortEnterCritical>
 8003458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800345a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800345e:	b25b      	sxtb	r3, r3
 8003460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003464:	d103      	bne.n	800346e <xQueueSemaphoreTake+0x142>
 8003466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800346e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003470:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003474:	b25b      	sxtb	r3, r3
 8003476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347a:	d103      	bne.n	8003484 <xQueueSemaphoreTake+0x158>
 800347c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003484:	f001 ff42 	bl	800530c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003488:	463a      	mov	r2, r7
 800348a:	f107 030c 	add.w	r3, r7, #12
 800348e:	4611      	mov	r1, r2
 8003490:	4618      	mov	r0, r3
 8003492:	f000 ff47 	bl	8004324 <xTaskCheckForTimeOut>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d132      	bne.n	8003502 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800349c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800349e:	f000 f9d1 	bl	8003844 <prvIsQueueEmpty>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d026      	beq.n	80034f6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d109      	bne.n	80034c4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80034b0:	f001 fefa 	bl	80052a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80034b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f001 f8a7 	bl	800460c <xTaskPriorityInherit>
 80034be:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80034c0:	f001 ff24 	bl	800530c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c6:	3324      	adds	r3, #36	@ 0x24
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 fe5d 	bl	800418c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80034d4:	f000 f964 	bl	80037a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034d8:	f000 fc92 	bl	8003e00 <xTaskResumeAll>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f47f af67 	bne.w	80033b2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80034e4:	4b18      	ldr	r3, [pc, #96]	@ (8003548 <xQueueSemaphoreTake+0x21c>)
 80034e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	e75d      	b.n	80033b2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80034f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80034f8:	f000 f952 	bl	80037a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034fc:	f000 fc80 	bl	8003e00 <xTaskResumeAll>
 8003500:	e757      	b.n	80033b2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003502:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003504:	f000 f94c 	bl	80037a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003508:	f000 fc7a 	bl	8003e00 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800350c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800350e:	f000 f999 	bl	8003844 <prvIsQueueEmpty>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	f43f af4c 	beq.w	80033b2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800351a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00d      	beq.n	800353c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003520:	f001 fec2 	bl	80052a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003524:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003526:	f000 f893 	bl	8003650 <prvGetDisinheritPriorityAfterTimeout>
 800352a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800352c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003532:	4618      	mov	r0, r3
 8003534:	f001 f942 	bl	80047bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003538:	f001 fee8 	bl	800530c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800353c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800353e:	4618      	mov	r0, r3
 8003540:	3738      	adds	r7, #56	@ 0x38
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	e000ed04 	.word	0xe000ed04

0800354c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08e      	sub	sp, #56	@ 0x38
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800355c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10b      	bne.n	800357a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003566:	f383 8811 	msr	BASEPRI, r3
 800356a:	f3bf 8f6f 	isb	sy
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	623b      	str	r3, [r7, #32]
}
 8003574:	bf00      	nop
 8003576:	bf00      	nop
 8003578:	e7fd      	b.n	8003576 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d103      	bne.n	8003588 <xQueueReceiveFromISR+0x3c>
 8003580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <xQueueReceiveFromISR+0x40>
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <xQueueReceiveFromISR+0x42>
 800358c:	2300      	movs	r3, #0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10b      	bne.n	80035aa <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003596:	f383 8811 	msr	BASEPRI, r3
 800359a:	f3bf 8f6f 	isb	sy
 800359e:	f3bf 8f4f 	dsb	sy
 80035a2:	61fb      	str	r3, [r7, #28]
}
 80035a4:	bf00      	nop
 80035a6:	bf00      	nop
 80035a8:	e7fd      	b.n	80035a6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035aa:	f001 ff5d 	bl	8005468 <vPortValidateInterruptPriority>
	__asm volatile
 80035ae:	f3ef 8211 	mrs	r2, BASEPRI
 80035b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	61ba      	str	r2, [r7, #24]
 80035c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80035c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ce:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d02f      	beq.n	8003636 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80035d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035e4:	f000 f8b6 	bl	8003754 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80035e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ea:	1e5a      	subs	r2, r3, #1
 80035ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ee:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80035f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f8:	d112      	bne.n	8003620 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d016      	beq.n	8003630 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003604:	3310      	adds	r3, #16
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fe12 	bl	8004230 <xTaskRemoveFromEventList>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00e      	beq.n	8003630 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00b      	beq.n	8003630 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	e007      	b.n	8003630 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003620:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003624:	3301      	adds	r3, #1
 8003626:	b2db      	uxtb	r3, r3
 8003628:	b25a      	sxtb	r2, r3
 800362a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003630:	2301      	movs	r3, #1
 8003632:	637b      	str	r3, [r7, #52]	@ 0x34
 8003634:	e001      	b.n	800363a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003636:	2300      	movs	r3, #0
 8003638:	637b      	str	r3, [r7, #52]	@ 0x34
 800363a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800363c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f383 8811 	msr	BASEPRI, r3
}
 8003644:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003648:	4618      	mov	r0, r3
 800364a:	3738      	adds	r7, #56	@ 0x38
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365c:	2b00      	cmp	r3, #0
 800365e:	d006      	beq.n	800366e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	e001      	b.n	8003672 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003672:	68fb      	ldr	r3, [r7, #12]
	}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003694:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10d      	bne.n	80036ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d14d      	bne.n	8003742 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f001 f816 	bl	80046dc <xTaskPriorityDisinherit>
 80036b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	609a      	str	r2, [r3, #8]
 80036b8:	e043      	b.n	8003742 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d119      	bne.n	80036f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6858      	ldr	r0, [r3, #4]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c8:	461a      	mov	r2, r3
 80036ca:	68b9      	ldr	r1, [r7, #8]
 80036cc:	f002 f928 	bl	8005920 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d8:	441a      	add	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d32b      	bcc.n	8003742 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	605a      	str	r2, [r3, #4]
 80036f2:	e026      	b.n	8003742 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	68d8      	ldr	r0, [r3, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	461a      	mov	r2, r3
 80036fe:	68b9      	ldr	r1, [r7, #8]
 8003700:	f002 f90e 	bl	8005920 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370c:	425b      	negs	r3, r3
 800370e:	441a      	add	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d207      	bcs.n	8003730 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003728:	425b      	negs	r3, r3
 800372a:	441a      	add	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d105      	bne.n	8003742 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	3b01      	subs	r3, #1
 8003740:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800374a:	697b      	ldr	r3, [r7, #20]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d018      	beq.n	8003798 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376e:	441a      	add	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	429a      	cmp	r2, r3
 800377e:	d303      	bcc.n	8003788 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68d9      	ldr	r1, [r3, #12]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003790:	461a      	mov	r2, r3
 8003792:	6838      	ldr	r0, [r7, #0]
 8003794:	f002 f8c4 	bl	8005920 <memcpy>
	}
}
 8003798:	bf00      	nop
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80037a8:	f001 fd7e 	bl	80052a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037b4:	e011      	b.n	80037da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d012      	beq.n	80037e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3324      	adds	r3, #36	@ 0x24
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fd34 	bl	8004230 <xTaskRemoveFromEventList>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037ce:	f000 fe0d 	bl	80043ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	dce9      	bgt.n	80037b6 <prvUnlockQueue+0x16>
 80037e2:	e000      	b.n	80037e6 <prvUnlockQueue+0x46>
					break;
 80037e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	22ff      	movs	r2, #255	@ 0xff
 80037ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80037ee:	f001 fd8d 	bl	800530c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037f2:	f001 fd59 	bl	80052a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037fe:	e011      	b.n	8003824 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d012      	beq.n	800382e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3310      	adds	r3, #16
 800380c:	4618      	mov	r0, r3
 800380e:	f000 fd0f 	bl	8004230 <xTaskRemoveFromEventList>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003818:	f000 fde8 	bl	80043ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800381c:	7bbb      	ldrb	r3, [r7, #14]
 800381e:	3b01      	subs	r3, #1
 8003820:	b2db      	uxtb	r3, r3
 8003822:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003824:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003828:	2b00      	cmp	r3, #0
 800382a:	dce9      	bgt.n	8003800 <prvUnlockQueue+0x60>
 800382c:	e000      	b.n	8003830 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800382e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	22ff      	movs	r2, #255	@ 0xff
 8003834:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003838:	f001 fd68 	bl	800530c <vPortExitCritical>
}
 800383c:	bf00      	nop
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800384c:	f001 fd2c 	bl	80052a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003854:	2b00      	cmp	r3, #0
 8003856:	d102      	bne.n	800385e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003858:	2301      	movs	r3, #1
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	e001      	b.n	8003862 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003862:	f001 fd53 	bl	800530c <vPortExitCritical>

	return xReturn;
 8003866:	68fb      	ldr	r3, [r7, #12]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003878:	f001 fd16 	bl	80052a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003884:	429a      	cmp	r2, r3
 8003886:	d102      	bne.n	800388e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003888:	2301      	movs	r3, #1
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	e001      	b.n	8003892 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003892:	f001 fd3b 	bl	800530c <vPortExitCritical>

	return xReturn;
 8003896:	68fb      	ldr	r3, [r7, #12]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	e014      	b.n	80038da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80038b0:	4a0f      	ldr	r2, [pc, #60]	@ (80038f0 <vQueueAddToRegistry+0x50>)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10b      	bne.n	80038d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038bc:	490c      	ldr	r1, [pc, #48]	@ (80038f0 <vQueueAddToRegistry+0x50>)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80038c6:	4a0a      	ldr	r2, [pc, #40]	@ (80038f0 <vQueueAddToRegistry+0x50>)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4413      	add	r3, r2
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038d2:	e006      	b.n	80038e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	3301      	adds	r3, #1
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b07      	cmp	r3, #7
 80038de:	d9e7      	bls.n	80038b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038e0:	bf00      	nop
 80038e2:	bf00      	nop
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	20000750 	.word	0x20000750

080038f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003904:	f001 fcd0 	bl	80052a8 <vPortEnterCritical>
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800390e:	b25b      	sxtb	r3, r3
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003914:	d103      	bne.n	800391e <vQueueWaitForMessageRestricted+0x2a>
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003924:	b25b      	sxtb	r3, r3
 8003926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392a:	d103      	bne.n	8003934 <vQueueWaitForMessageRestricted+0x40>
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003934:	f001 fcea 	bl	800530c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393c:	2b00      	cmp	r3, #0
 800393e:	d106      	bne.n	800394e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	3324      	adds	r3, #36	@ 0x24
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	68b9      	ldr	r1, [r7, #8]
 8003948:	4618      	mov	r0, r3
 800394a:	f000 fc45 	bl	80041d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800394e:	6978      	ldr	r0, [r7, #20]
 8003950:	f7ff ff26 	bl	80037a0 <prvUnlockQueue>
	}
 8003954:	bf00      	nop
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08e      	sub	sp, #56	@ 0x38
 8003960:	af04      	add	r7, sp, #16
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800396a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10b      	bne.n	8003988 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	623b      	str	r3, [r7, #32]
}
 8003982:	bf00      	nop
 8003984:	bf00      	nop
 8003986:	e7fd      	b.n	8003984 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10b      	bne.n	80039a6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	61fb      	str	r3, [r7, #28]
}
 80039a0:	bf00      	nop
 80039a2:	bf00      	nop
 80039a4:	e7fd      	b.n	80039a2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039a6:	235c      	movs	r3, #92	@ 0x5c
 80039a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	2b5c      	cmp	r3, #92	@ 0x5c
 80039ae:	d00b      	beq.n	80039c8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80039b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	61bb      	str	r3, [r7, #24]
}
 80039c2:	bf00      	nop
 80039c4:	bf00      	nop
 80039c6:	e7fd      	b.n	80039c4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80039c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01e      	beq.n	8003a0e <xTaskCreateStatic+0xb2>
 80039d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d01b      	beq.n	8003a0e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039de:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039e8:	2300      	movs	r3, #0
 80039ea:	9303      	str	r3, [sp, #12]
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	9302      	str	r3, [sp, #8]
 80039f0:	f107 0314 	add.w	r3, r7, #20
 80039f4:	9301      	str	r3, [sp, #4]
 80039f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	68b9      	ldr	r1, [r7, #8]
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f850 	bl	8003aa6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003a08:	f000 f8de 	bl	8003bc8 <prvAddNewTaskToReadyList>
 8003a0c:	e001      	b.n	8003a12 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a12:	697b      	ldr	r3, [r7, #20]
	}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3728      	adds	r7, #40	@ 0x28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08c      	sub	sp, #48	@ 0x30
 8003a20:	af04      	add	r7, sp, #16
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a2c:	88fb      	ldrh	r3, [r7, #6]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f001 fd5b 	bl	80054ec <pvPortMalloc>
 8003a36:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00e      	beq.n	8003a5c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a3e:	205c      	movs	r0, #92	@ 0x5c
 8003a40:	f001 fd54 	bl	80054ec <pvPortMalloc>
 8003a44:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a52:	e005      	b.n	8003a60 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a54:	6978      	ldr	r0, [r7, #20]
 8003a56:	f001 fe17 	bl	8005688 <vPortFree>
 8003a5a:	e001      	b.n	8003a60 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d017      	beq.n	8003a96 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a6e:	88fa      	ldrh	r2, [r7, #6]
 8003a70:	2300      	movs	r3, #0
 8003a72:	9303      	str	r3, [sp, #12]
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	9302      	str	r3, [sp, #8]
 8003a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a7a:	9301      	str	r3, [sp, #4]
 8003a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 f80e 	bl	8003aa6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a8a:	69f8      	ldr	r0, [r7, #28]
 8003a8c:	f000 f89c 	bl	8003bc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a90:	2301      	movs	r3, #1
 8003a92:	61bb      	str	r3, [r7, #24]
 8003a94:	e002      	b.n	8003a9c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a96:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a9c:	69bb      	ldr	r3, [r7, #24]
	}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3720      	adds	r7, #32
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b088      	sub	sp, #32
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	461a      	mov	r2, r3
 8003abe:	21a5      	movs	r1, #165	@ 0xa5
 8003ac0:	f001 ff02 	bl	80058c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	f023 0307 	bic.w	r3, r3, #7
 8003adc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00b      	beq.n	8003b00 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	617b      	str	r3, [r7, #20]
}
 8003afa:	bf00      	nop
 8003afc:	bf00      	nop
 8003afe:	e7fd      	b.n	8003afc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d01f      	beq.n	8003b46 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	e012      	b.n	8003b32 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	4413      	add	r3, r2
 8003b12:	7819      	ldrb	r1, [r3, #0]
 8003b14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	4413      	add	r3, r2
 8003b1a:	3334      	adds	r3, #52	@ 0x34
 8003b1c:	460a      	mov	r2, r1
 8003b1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	4413      	add	r3, r2
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d006      	beq.n	8003b3a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	2b0f      	cmp	r3, #15
 8003b36:	d9e9      	bls.n	8003b0c <prvInitialiseNewTask+0x66>
 8003b38:	e000      	b.n	8003b3c <prvInitialiseNewTask+0x96>
			{
				break;
 8003b3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b44:	e003      	b.n	8003b4e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b50:	2b37      	cmp	r3, #55	@ 0x37
 8003b52:	d901      	bls.n	8003b58 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b54:	2337      	movs	r3, #55	@ 0x37
 8003b56:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b5c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b62:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b66:	2200      	movs	r2, #0
 8003b68:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fe fec8 	bl	8002904 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b76:	3318      	adds	r3, #24
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fe fec3 	bl	8002904 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b86:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b92:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b96:	2200      	movs	r2, #0
 8003b98:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	68f9      	ldr	r1, [r7, #12]
 8003ba6:	69b8      	ldr	r0, [r7, #24]
 8003ba8:	f001 fa4e 	bl	8005048 <pxPortInitialiseStack>
 8003bac:	4602      	mov	r2, r0
 8003bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bbe:	bf00      	nop
 8003bc0:	3720      	adds	r7, #32
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bd0:	f001 fb6a 	bl	80052a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c8c <prvAddNewTaskToReadyList+0xc4>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	4a2c      	ldr	r2, [pc, #176]	@ (8003c8c <prvAddNewTaskToReadyList+0xc4>)
 8003bdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bde:	4b2c      	ldr	r3, [pc, #176]	@ (8003c90 <prvAddNewTaskToReadyList+0xc8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003be6:	4a2a      	ldr	r2, [pc, #168]	@ (8003c90 <prvAddNewTaskToReadyList+0xc8>)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bec:	4b27      	ldr	r3, [pc, #156]	@ (8003c8c <prvAddNewTaskToReadyList+0xc4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d110      	bne.n	8003c16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bf4:	f000 fc1e 	bl	8004434 <prvInitialiseTaskLists>
 8003bf8:	e00d      	b.n	8003c16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bfa:	4b26      	ldr	r3, [pc, #152]	@ (8003c94 <prvAddNewTaskToReadyList+0xcc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d109      	bne.n	8003c16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c02:	4b23      	ldr	r3, [pc, #140]	@ (8003c90 <prvAddNewTaskToReadyList+0xc8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d802      	bhi.n	8003c16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c10:	4a1f      	ldr	r2, [pc, #124]	@ (8003c90 <prvAddNewTaskToReadyList+0xc8>)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c16:	4b20      	ldr	r3, [pc, #128]	@ (8003c98 <prvAddNewTaskToReadyList+0xd0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	4a1e      	ldr	r2, [pc, #120]	@ (8003c98 <prvAddNewTaskToReadyList+0xd0>)
 8003c1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c20:	4b1d      	ldr	r3, [pc, #116]	@ (8003c98 <prvAddNewTaskToReadyList+0xd0>)
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003c9c <prvAddNewTaskToReadyList+0xd4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d903      	bls.n	8003c3c <prvAddNewTaskToReadyList+0x74>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c38:	4a18      	ldr	r2, [pc, #96]	@ (8003c9c <prvAddNewTaskToReadyList+0xd4>)
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4a15      	ldr	r2, [pc, #84]	@ (8003ca0 <prvAddNewTaskToReadyList+0xd8>)
 8003c4a:	441a      	add	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f7fe fe63 	bl	800291e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c58:	f001 fb58 	bl	800530c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8003c94 <prvAddNewTaskToReadyList+0xcc>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00e      	beq.n	8003c82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c64:	4b0a      	ldr	r3, [pc, #40]	@ (8003c90 <prvAddNewTaskToReadyList+0xc8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d207      	bcs.n	8003c82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c72:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca4 <prvAddNewTaskToReadyList+0xdc>)
 8003c74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20000c64 	.word	0x20000c64
 8003c90:	20000790 	.word	0x20000790
 8003c94:	20000c70 	.word	0x20000c70
 8003c98:	20000c80 	.word	0x20000c80
 8003c9c:	20000c6c 	.word	0x20000c6c
 8003ca0:	20000794 	.word	0x20000794
 8003ca4:	e000ed04 	.word	0xe000ed04

08003ca8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d018      	beq.n	8003cec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003cba:	4b14      	ldr	r3, [pc, #80]	@ (8003d0c <vTaskDelay+0x64>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00b      	beq.n	8003cda <vTaskDelay+0x32>
	__asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	60bb      	str	r3, [r7, #8]
}
 8003cd4:	bf00      	nop
 8003cd6:	bf00      	nop
 8003cd8:	e7fd      	b.n	8003cd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003cda:	f000 f883 	bl	8003de4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cde:	2100      	movs	r1, #0
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 fe03 	bl	80048ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ce6:	f000 f88b 	bl	8003e00 <xTaskResumeAll>
 8003cea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d107      	bne.n	8003d02 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003cf2:	4b07      	ldr	r3, [pc, #28]	@ (8003d10 <vTaskDelay+0x68>)
 8003cf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000c8c 	.word	0x20000c8c
 8003d10:	e000ed04 	.word	0xe000ed04

08003d14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08a      	sub	sp, #40	@ 0x28
 8003d18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d22:	463a      	mov	r2, r7
 8003d24:	1d39      	adds	r1, r7, #4
 8003d26:	f107 0308 	add.w	r3, r7, #8
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fe fd96 	bl	800285c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d30:	6839      	ldr	r1, [r7, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	9202      	str	r2, [sp, #8]
 8003d38:	9301      	str	r3, [sp, #4]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	460a      	mov	r2, r1
 8003d42:	4922      	ldr	r1, [pc, #136]	@ (8003dcc <vTaskStartScheduler+0xb8>)
 8003d44:	4822      	ldr	r0, [pc, #136]	@ (8003dd0 <vTaskStartScheduler+0xbc>)
 8003d46:	f7ff fe09 	bl	800395c <xTaskCreateStatic>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	4a21      	ldr	r2, [pc, #132]	@ (8003dd4 <vTaskStartScheduler+0xc0>)
 8003d4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d50:	4b20      	ldr	r3, [pc, #128]	@ (8003dd4 <vTaskStartScheduler+0xc0>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	e001      	b.n	8003d62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d102      	bne.n	8003d6e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d68:	f000 fe14 	bl	8004994 <xTimerCreateTimerTask>
 8003d6c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d116      	bne.n	8003da2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	613b      	str	r3, [r7, #16]
}
 8003d86:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d88:	4b13      	ldr	r3, [pc, #76]	@ (8003dd8 <vTaskStartScheduler+0xc4>)
 8003d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d90:	4b12      	ldr	r3, [pc, #72]	@ (8003ddc <vTaskStartScheduler+0xc8>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d96:	4b12      	ldr	r3, [pc, #72]	@ (8003de0 <vTaskStartScheduler+0xcc>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d9c:	f001 f9e0 	bl	8005160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003da0:	e00f      	b.n	8003dc2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da8:	d10b      	bne.n	8003dc2 <vTaskStartScheduler+0xae>
	__asm volatile
 8003daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	60fb      	str	r3, [r7, #12]
}
 8003dbc:	bf00      	nop
 8003dbe:	bf00      	nop
 8003dc0:	e7fd      	b.n	8003dbe <vTaskStartScheduler+0xaa>
}
 8003dc2:	bf00      	nop
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	080059a8 	.word	0x080059a8
 8003dd0:	08004405 	.word	0x08004405
 8003dd4:	20000c88 	.word	0x20000c88
 8003dd8:	20000c84 	.word	0x20000c84
 8003ddc:	20000c70 	.word	0x20000c70
 8003de0:	20000c68 	.word	0x20000c68

08003de4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003de8:	4b04      	ldr	r3, [pc, #16]	@ (8003dfc <vTaskSuspendAll+0x18>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3301      	adds	r3, #1
 8003dee:	4a03      	ldr	r2, [pc, #12]	@ (8003dfc <vTaskSuspendAll+0x18>)
 8003df0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003df2:	bf00      	nop
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	20000c8c 	.word	0x20000c8c

08003e00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e0e:	4b42      	ldr	r3, [pc, #264]	@ (8003f18 <xTaskResumeAll+0x118>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10b      	bne.n	8003e2e <xTaskResumeAll+0x2e>
	__asm volatile
 8003e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1a:	f383 8811 	msr	BASEPRI, r3
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	603b      	str	r3, [r7, #0]
}
 8003e28:	bf00      	nop
 8003e2a:	bf00      	nop
 8003e2c:	e7fd      	b.n	8003e2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e2e:	f001 fa3b 	bl	80052a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e32:	4b39      	ldr	r3, [pc, #228]	@ (8003f18 <xTaskResumeAll+0x118>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	4a37      	ldr	r2, [pc, #220]	@ (8003f18 <xTaskResumeAll+0x118>)
 8003e3a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e3c:	4b36      	ldr	r3, [pc, #216]	@ (8003f18 <xTaskResumeAll+0x118>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d162      	bne.n	8003f0a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e44:	4b35      	ldr	r3, [pc, #212]	@ (8003f1c <xTaskResumeAll+0x11c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d05e      	beq.n	8003f0a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e4c:	e02f      	b.n	8003eae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e4e:	4b34      	ldr	r3, [pc, #208]	@ (8003f20 <xTaskResumeAll+0x120>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	3318      	adds	r3, #24
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fe fdbc 	bl	80029d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3304      	adds	r3, #4
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fe fdb7 	bl	80029d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e6e:	4b2d      	ldr	r3, [pc, #180]	@ (8003f24 <xTaskResumeAll+0x124>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d903      	bls.n	8003e7e <xTaskResumeAll+0x7e>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7a:	4a2a      	ldr	r2, [pc, #168]	@ (8003f24 <xTaskResumeAll+0x124>)
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e82:	4613      	mov	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4a27      	ldr	r2, [pc, #156]	@ (8003f28 <xTaskResumeAll+0x128>)
 8003e8c:	441a      	add	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3304      	adds	r3, #4
 8003e92:	4619      	mov	r1, r3
 8003e94:	4610      	mov	r0, r2
 8003e96:	f7fe fd42 	bl	800291e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e9e:	4b23      	ldr	r3, [pc, #140]	@ (8003f2c <xTaskResumeAll+0x12c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d302      	bcc.n	8003eae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003ea8:	4b21      	ldr	r3, [pc, #132]	@ (8003f30 <xTaskResumeAll+0x130>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003eae:	4b1c      	ldr	r3, [pc, #112]	@ (8003f20 <xTaskResumeAll+0x120>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1cb      	bne.n	8003e4e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ebc:	f000 fb58 	bl	8004570 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ec0:	4b1c      	ldr	r3, [pc, #112]	@ (8003f34 <xTaskResumeAll+0x134>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d010      	beq.n	8003eee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ecc:	f000 f846 	bl	8003f5c <xTaskIncrementTick>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003ed6:	4b16      	ldr	r3, [pc, #88]	@ (8003f30 <xTaskResumeAll+0x130>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1f1      	bne.n	8003ecc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003ee8:	4b12      	ldr	r3, [pc, #72]	@ (8003f34 <xTaskResumeAll+0x134>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003eee:	4b10      	ldr	r3, [pc, #64]	@ (8003f30 <xTaskResumeAll+0x130>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003efa:	4b0f      	ldr	r3, [pc, #60]	@ (8003f38 <xTaskResumeAll+0x138>)
 8003efc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f0a:	f001 f9ff 	bl	800530c <vPortExitCritical>

	return xAlreadyYielded;
 8003f0e:	68bb      	ldr	r3, [r7, #8]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20000c8c 	.word	0x20000c8c
 8003f1c:	20000c64 	.word	0x20000c64
 8003f20:	20000c24 	.word	0x20000c24
 8003f24:	20000c6c 	.word	0x20000c6c
 8003f28:	20000794 	.word	0x20000794
 8003f2c:	20000790 	.word	0x20000790
 8003f30:	20000c78 	.word	0x20000c78
 8003f34:	20000c74 	.word	0x20000c74
 8003f38:	e000ed04 	.word	0xe000ed04

08003f3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f42:	4b05      	ldr	r3, [pc, #20]	@ (8003f58 <xTaskGetTickCount+0x1c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f48:	687b      	ldr	r3, [r7, #4]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	20000c68 	.word	0x20000c68

08003f5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f62:	2300      	movs	r3, #0
 8003f64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f66:	4b4f      	ldr	r3, [pc, #316]	@ (80040a4 <xTaskIncrementTick+0x148>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f040 8090 	bne.w	8004090 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f70:	4b4d      	ldr	r3, [pc, #308]	@ (80040a8 <xTaskIncrementTick+0x14c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3301      	adds	r3, #1
 8003f76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f78:	4a4b      	ldr	r2, [pc, #300]	@ (80040a8 <xTaskIncrementTick+0x14c>)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d121      	bne.n	8003fc8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f84:	4b49      	ldr	r3, [pc, #292]	@ (80040ac <xTaskIncrementTick+0x150>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00b      	beq.n	8003fa6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	603b      	str	r3, [r7, #0]
}
 8003fa0:	bf00      	nop
 8003fa2:	bf00      	nop
 8003fa4:	e7fd      	b.n	8003fa2 <xTaskIncrementTick+0x46>
 8003fa6:	4b41      	ldr	r3, [pc, #260]	@ (80040ac <xTaskIncrementTick+0x150>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	4b40      	ldr	r3, [pc, #256]	@ (80040b0 <xTaskIncrementTick+0x154>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a3e      	ldr	r2, [pc, #248]	@ (80040ac <xTaskIncrementTick+0x150>)
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	4a3e      	ldr	r2, [pc, #248]	@ (80040b0 <xTaskIncrementTick+0x154>)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	4b3e      	ldr	r3, [pc, #248]	@ (80040b4 <xTaskIncrementTick+0x158>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	4a3c      	ldr	r2, [pc, #240]	@ (80040b4 <xTaskIncrementTick+0x158>)
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	f000 fad4 	bl	8004570 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80040b8 <xTaskIncrementTick+0x15c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d349      	bcc.n	8004066 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fd2:	4b36      	ldr	r3, [pc, #216]	@ (80040ac <xTaskIncrementTick+0x150>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d104      	bne.n	8003fe6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fdc:	4b36      	ldr	r3, [pc, #216]	@ (80040b8 <xTaskIncrementTick+0x15c>)
 8003fde:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe2:	601a      	str	r2, [r3, #0]
					break;
 8003fe4:	e03f      	b.n	8004066 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fe6:	4b31      	ldr	r3, [pc, #196]	@ (80040ac <xTaskIncrementTick+0x150>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d203      	bcs.n	8004006 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ffe:	4a2e      	ldr	r2, [pc, #184]	@ (80040b8 <xTaskIncrementTick+0x15c>)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004004:	e02f      	b.n	8004066 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	3304      	adds	r3, #4
 800400a:	4618      	mov	r0, r3
 800400c:	f7fe fce4 	bl	80029d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004014:	2b00      	cmp	r3, #0
 8004016:	d004      	beq.n	8004022 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	3318      	adds	r3, #24
 800401c:	4618      	mov	r0, r3
 800401e:	f7fe fcdb 	bl	80029d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004026:	4b25      	ldr	r3, [pc, #148]	@ (80040bc <xTaskIncrementTick+0x160>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d903      	bls.n	8004036 <xTaskIncrementTick+0xda>
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004032:	4a22      	ldr	r2, [pc, #136]	@ (80040bc <xTaskIncrementTick+0x160>)
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800403a:	4613      	mov	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4a1f      	ldr	r2, [pc, #124]	@ (80040c0 <xTaskIncrementTick+0x164>)
 8004044:	441a      	add	r2, r3
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	3304      	adds	r3, #4
 800404a:	4619      	mov	r1, r3
 800404c:	4610      	mov	r0, r2
 800404e:	f7fe fc66 	bl	800291e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004056:	4b1b      	ldr	r3, [pc, #108]	@ (80040c4 <xTaskIncrementTick+0x168>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405c:	429a      	cmp	r2, r3
 800405e:	d3b8      	bcc.n	8003fd2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004060:	2301      	movs	r3, #1
 8004062:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004064:	e7b5      	b.n	8003fd2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004066:	4b17      	ldr	r3, [pc, #92]	@ (80040c4 <xTaskIncrementTick+0x168>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800406c:	4914      	ldr	r1, [pc, #80]	@ (80040c0 <xTaskIncrementTick+0x164>)
 800406e:	4613      	mov	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	440b      	add	r3, r1
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d901      	bls.n	8004082 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800407e:	2301      	movs	r3, #1
 8004080:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004082:	4b11      	ldr	r3, [pc, #68]	@ (80040c8 <xTaskIncrementTick+0x16c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d007      	beq.n	800409a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800408a:	2301      	movs	r3, #1
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	e004      	b.n	800409a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004090:	4b0e      	ldr	r3, [pc, #56]	@ (80040cc <xTaskIncrementTick+0x170>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3301      	adds	r3, #1
 8004096:	4a0d      	ldr	r2, [pc, #52]	@ (80040cc <xTaskIncrementTick+0x170>)
 8004098:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800409a:	697b      	ldr	r3, [r7, #20]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20000c8c 	.word	0x20000c8c
 80040a8:	20000c68 	.word	0x20000c68
 80040ac:	20000c1c 	.word	0x20000c1c
 80040b0:	20000c20 	.word	0x20000c20
 80040b4:	20000c7c 	.word	0x20000c7c
 80040b8:	20000c84 	.word	0x20000c84
 80040bc:	20000c6c 	.word	0x20000c6c
 80040c0:	20000794 	.word	0x20000794
 80040c4:	20000790 	.word	0x20000790
 80040c8:	20000c78 	.word	0x20000c78
 80040cc:	20000c74 	.word	0x20000c74

080040d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040d6:	4b28      	ldr	r3, [pc, #160]	@ (8004178 <vTaskSwitchContext+0xa8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040de:	4b27      	ldr	r3, [pc, #156]	@ (800417c <vTaskSwitchContext+0xac>)
 80040e0:	2201      	movs	r2, #1
 80040e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040e4:	e042      	b.n	800416c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80040e6:	4b25      	ldr	r3, [pc, #148]	@ (800417c <vTaskSwitchContext+0xac>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ec:	4b24      	ldr	r3, [pc, #144]	@ (8004180 <vTaskSwitchContext+0xb0>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	e011      	b.n	8004118 <vTaskSwitchContext+0x48>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10b      	bne.n	8004112 <vTaskSwitchContext+0x42>
	__asm volatile
 80040fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	607b      	str	r3, [r7, #4]
}
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	e7fd      	b.n	800410e <vTaskSwitchContext+0x3e>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	3b01      	subs	r3, #1
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	491a      	ldr	r1, [pc, #104]	@ (8004184 <vTaskSwitchContext+0xb4>)
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4613      	mov	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0e3      	beq.n	80040f4 <vTaskSwitchContext+0x24>
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4a13      	ldr	r2, [pc, #76]	@ (8004184 <vTaskSwitchContext+0xb4>)
 8004138:	4413      	add	r3, r2
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	605a      	str	r2, [r3, #4]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	3308      	adds	r3, #8
 800414e:	429a      	cmp	r2, r3
 8004150:	d104      	bne.n	800415c <vTaskSwitchContext+0x8c>
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	605a      	str	r2, [r3, #4]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	4a09      	ldr	r2, [pc, #36]	@ (8004188 <vTaskSwitchContext+0xb8>)
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	4a06      	ldr	r2, [pc, #24]	@ (8004180 <vTaskSwitchContext+0xb0>)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6013      	str	r3, [r2, #0]
}
 800416c:	bf00      	nop
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	20000c8c 	.word	0x20000c8c
 800417c:	20000c78 	.word	0x20000c78
 8004180:	20000c6c 	.word	0x20000c6c
 8004184:	20000794 	.word	0x20000794
 8004188:	20000790 	.word	0x20000790

0800418c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10b      	bne.n	80041b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800419c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a0:	f383 8811 	msr	BASEPRI, r3
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	60fb      	str	r3, [r7, #12]
}
 80041ae:	bf00      	nop
 80041b0:	bf00      	nop
 80041b2:	e7fd      	b.n	80041b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041b4:	4b07      	ldr	r3, [pc, #28]	@ (80041d4 <vTaskPlaceOnEventList+0x48>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3318      	adds	r3, #24
 80041ba:	4619      	mov	r1, r3
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7fe fbd2 	bl	8002966 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041c2:	2101      	movs	r1, #1
 80041c4:	6838      	ldr	r0, [r7, #0]
 80041c6:	f000 fb91 	bl	80048ec <prvAddCurrentTaskToDelayedList>
}
 80041ca:	bf00      	nop
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000790 	.word	0x20000790

080041d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10b      	bne.n	8004202 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80041ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ee:	f383 8811 	msr	BASEPRI, r3
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	617b      	str	r3, [r7, #20]
}
 80041fc:	bf00      	nop
 80041fe:	bf00      	nop
 8004200:	e7fd      	b.n	80041fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004202:	4b0a      	ldr	r3, [pc, #40]	@ (800422c <vTaskPlaceOnEventListRestricted+0x54>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3318      	adds	r3, #24
 8004208:	4619      	mov	r1, r3
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f7fe fb87 	bl	800291e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004216:	f04f 33ff 	mov.w	r3, #4294967295
 800421a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	68b8      	ldr	r0, [r7, #8]
 8004220:	f000 fb64 	bl	80048ec <prvAddCurrentTaskToDelayedList>
	}
 8004224:	bf00      	nop
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20000790 	.word	0x20000790

08004230 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10b      	bne.n	800425e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800424a:	f383 8811 	msr	BASEPRI, r3
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	60fb      	str	r3, [r7, #12]
}
 8004258:	bf00      	nop
 800425a:	bf00      	nop
 800425c:	e7fd      	b.n	800425a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	3318      	adds	r3, #24
 8004262:	4618      	mov	r0, r3
 8004264:	f7fe fbb8 	bl	80029d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004268:	4b1d      	ldr	r3, [pc, #116]	@ (80042e0 <xTaskRemoveFromEventList+0xb0>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d11d      	bne.n	80042ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	3304      	adds	r3, #4
 8004274:	4618      	mov	r0, r3
 8004276:	f7fe fbaf 	bl	80029d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800427e:	4b19      	ldr	r3, [pc, #100]	@ (80042e4 <xTaskRemoveFromEventList+0xb4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d903      	bls.n	800428e <xTaskRemoveFromEventList+0x5e>
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428a:	4a16      	ldr	r2, [pc, #88]	@ (80042e4 <xTaskRemoveFromEventList+0xb4>)
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4a13      	ldr	r2, [pc, #76]	@ (80042e8 <xTaskRemoveFromEventList+0xb8>)
 800429c:	441a      	add	r2, r3
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	3304      	adds	r3, #4
 80042a2:	4619      	mov	r1, r3
 80042a4:	4610      	mov	r0, r2
 80042a6:	f7fe fb3a 	bl	800291e <vListInsertEnd>
 80042aa:	e005      	b.n	80042b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	3318      	adds	r3, #24
 80042b0:	4619      	mov	r1, r3
 80042b2:	480e      	ldr	r0, [pc, #56]	@ (80042ec <xTaskRemoveFromEventList+0xbc>)
 80042b4:	f7fe fb33 	bl	800291e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042bc:	4b0c      	ldr	r3, [pc, #48]	@ (80042f0 <xTaskRemoveFromEventList+0xc0>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d905      	bls.n	80042d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80042c6:	2301      	movs	r3, #1
 80042c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80042ca:	4b0a      	ldr	r3, [pc, #40]	@ (80042f4 <xTaskRemoveFromEventList+0xc4>)
 80042cc:	2201      	movs	r2, #1
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	e001      	b.n	80042d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80042d6:	697b      	ldr	r3, [r7, #20]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	20000c8c 	.word	0x20000c8c
 80042e4:	20000c6c 	.word	0x20000c6c
 80042e8:	20000794 	.word	0x20000794
 80042ec:	20000c24 	.word	0x20000c24
 80042f0:	20000790 	.word	0x20000790
 80042f4:	20000c78 	.word	0x20000c78

080042f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004300:	4b06      	ldr	r3, [pc, #24]	@ (800431c <vTaskInternalSetTimeOutState+0x24>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004308:	4b05      	ldr	r3, [pc, #20]	@ (8004320 <vTaskInternalSetTimeOutState+0x28>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	605a      	str	r2, [r3, #4]
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	20000c7c 	.word	0x20000c7c
 8004320:	20000c68 	.word	0x20000c68

08004324 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	613b      	str	r3, [r7, #16]
}
 8004346:	bf00      	nop
 8004348:	bf00      	nop
 800434a:	e7fd      	b.n	8004348 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10b      	bne.n	800436a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	60fb      	str	r3, [r7, #12]
}
 8004364:	bf00      	nop
 8004366:	bf00      	nop
 8004368:	e7fd      	b.n	8004366 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800436a:	f000 ff9d 	bl	80052a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800436e:	4b1d      	ldr	r3, [pc, #116]	@ (80043e4 <xTaskCheckForTimeOut+0xc0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004386:	d102      	bne.n	800438e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004388:	2300      	movs	r3, #0
 800438a:	61fb      	str	r3, [r7, #28]
 800438c:	e023      	b.n	80043d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	4b15      	ldr	r3, [pc, #84]	@ (80043e8 <xTaskCheckForTimeOut+0xc4>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d007      	beq.n	80043aa <xTaskCheckForTimeOut+0x86>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d302      	bcc.n	80043aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80043a4:	2301      	movs	r3, #1
 80043a6:	61fb      	str	r3, [r7, #28]
 80043a8:	e015      	b.n	80043d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d20b      	bcs.n	80043cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	1ad2      	subs	r2, r2, r3
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff ff99 	bl	80042f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61fb      	str	r3, [r7, #28]
 80043ca:	e004      	b.n	80043d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80043d2:	2301      	movs	r3, #1
 80043d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80043d6:	f000 ff99 	bl	800530c <vPortExitCritical>

	return xReturn;
 80043da:	69fb      	ldr	r3, [r7, #28]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3720      	adds	r7, #32
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	20000c68 	.word	0x20000c68
 80043e8:	20000c7c 	.word	0x20000c7c

080043ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043f0:	4b03      	ldr	r3, [pc, #12]	@ (8004400 <vTaskMissedYield+0x14>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	601a      	str	r2, [r3, #0]
}
 80043f6:	bf00      	nop
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	20000c78 	.word	0x20000c78

08004404 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800440c:	f000 f852 	bl	80044b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004410:	4b06      	ldr	r3, [pc, #24]	@ (800442c <prvIdleTask+0x28>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d9f9      	bls.n	800440c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004418:	4b05      	ldr	r3, [pc, #20]	@ (8004430 <prvIdleTask+0x2c>)
 800441a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004428:	e7f0      	b.n	800440c <prvIdleTask+0x8>
 800442a:	bf00      	nop
 800442c:	20000794 	.word	0x20000794
 8004430:	e000ed04 	.word	0xe000ed04

08004434 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800443a:	2300      	movs	r3, #0
 800443c:	607b      	str	r3, [r7, #4]
 800443e:	e00c      	b.n	800445a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4a12      	ldr	r2, [pc, #72]	@ (8004494 <prvInitialiseTaskLists+0x60>)
 800444c:	4413      	add	r3, r2
 800444e:	4618      	mov	r0, r3
 8004450:	f7fe fa38 	bl	80028c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3301      	adds	r3, #1
 8004458:	607b      	str	r3, [r7, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b37      	cmp	r3, #55	@ 0x37
 800445e:	d9ef      	bls.n	8004440 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004460:	480d      	ldr	r0, [pc, #52]	@ (8004498 <prvInitialiseTaskLists+0x64>)
 8004462:	f7fe fa2f 	bl	80028c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004466:	480d      	ldr	r0, [pc, #52]	@ (800449c <prvInitialiseTaskLists+0x68>)
 8004468:	f7fe fa2c 	bl	80028c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800446c:	480c      	ldr	r0, [pc, #48]	@ (80044a0 <prvInitialiseTaskLists+0x6c>)
 800446e:	f7fe fa29 	bl	80028c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004472:	480c      	ldr	r0, [pc, #48]	@ (80044a4 <prvInitialiseTaskLists+0x70>)
 8004474:	f7fe fa26 	bl	80028c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004478:	480b      	ldr	r0, [pc, #44]	@ (80044a8 <prvInitialiseTaskLists+0x74>)
 800447a:	f7fe fa23 	bl	80028c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800447e:	4b0b      	ldr	r3, [pc, #44]	@ (80044ac <prvInitialiseTaskLists+0x78>)
 8004480:	4a05      	ldr	r2, [pc, #20]	@ (8004498 <prvInitialiseTaskLists+0x64>)
 8004482:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004484:	4b0a      	ldr	r3, [pc, #40]	@ (80044b0 <prvInitialiseTaskLists+0x7c>)
 8004486:	4a05      	ldr	r2, [pc, #20]	@ (800449c <prvInitialiseTaskLists+0x68>)
 8004488:	601a      	str	r2, [r3, #0]
}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20000794 	.word	0x20000794
 8004498:	20000bf4 	.word	0x20000bf4
 800449c:	20000c08 	.word	0x20000c08
 80044a0:	20000c24 	.word	0x20000c24
 80044a4:	20000c38 	.word	0x20000c38
 80044a8:	20000c50 	.word	0x20000c50
 80044ac:	20000c1c 	.word	0x20000c1c
 80044b0:	20000c20 	.word	0x20000c20

080044b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044ba:	e019      	b.n	80044f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044bc:	f000 fef4 	bl	80052a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044c0:	4b10      	ldr	r3, [pc, #64]	@ (8004504 <prvCheckTasksWaitingTermination+0x50>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3304      	adds	r3, #4
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fe fa83 	bl	80029d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004508 <prvCheckTasksWaitingTermination+0x54>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	4a0b      	ldr	r2, [pc, #44]	@ (8004508 <prvCheckTasksWaitingTermination+0x54>)
 80044da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044dc:	4b0b      	ldr	r3, [pc, #44]	@ (800450c <prvCheckTasksWaitingTermination+0x58>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	4a0a      	ldr	r2, [pc, #40]	@ (800450c <prvCheckTasksWaitingTermination+0x58>)
 80044e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044e6:	f000 ff11 	bl	800530c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f810 	bl	8004510 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044f0:	4b06      	ldr	r3, [pc, #24]	@ (800450c <prvCheckTasksWaitingTermination+0x58>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1e1      	bne.n	80044bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044f8:	bf00      	nop
 80044fa:	bf00      	nop
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000c38 	.word	0x20000c38
 8004508:	20000c64 	.word	0x20000c64
 800450c:	20000c4c 	.word	0x20000c4c

08004510 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800451e:	2b00      	cmp	r3, #0
 8004520:	d108      	bne.n	8004534 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004526:	4618      	mov	r0, r3
 8004528:	f001 f8ae 	bl	8005688 <vPortFree>
				vPortFree( pxTCB );
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f001 f8ab 	bl	8005688 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004532:	e019      	b.n	8004568 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800453a:	2b01      	cmp	r3, #1
 800453c:	d103      	bne.n	8004546 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f001 f8a2 	bl	8005688 <vPortFree>
	}
 8004544:	e010      	b.n	8004568 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800454c:	2b02      	cmp	r3, #2
 800454e:	d00b      	beq.n	8004568 <prvDeleteTCB+0x58>
	__asm volatile
 8004550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	60fb      	str	r3, [r7, #12]
}
 8004562:	bf00      	nop
 8004564:	bf00      	nop
 8004566:	e7fd      	b.n	8004564 <prvDeleteTCB+0x54>
	}
 8004568:	bf00      	nop
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004576:	4b0c      	ldr	r3, [pc, #48]	@ (80045a8 <prvResetNextTaskUnblockTime+0x38>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d104      	bne.n	800458a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004580:	4b0a      	ldr	r3, [pc, #40]	@ (80045ac <prvResetNextTaskUnblockTime+0x3c>)
 8004582:	f04f 32ff 	mov.w	r2, #4294967295
 8004586:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004588:	e008      	b.n	800459c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800458a:	4b07      	ldr	r3, [pc, #28]	@ (80045a8 <prvResetNextTaskUnblockTime+0x38>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	4a04      	ldr	r2, [pc, #16]	@ (80045ac <prvResetNextTaskUnblockTime+0x3c>)
 800459a:	6013      	str	r3, [r2, #0]
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	20000c1c 	.word	0x20000c1c
 80045ac:	20000c84 	.word	0x20000c84

080045b0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80045b6:	4b05      	ldr	r3, [pc, #20]	@ (80045cc <xTaskGetCurrentTaskHandle+0x1c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	607b      	str	r3, [r7, #4]

		return xReturn;
 80045bc:	687b      	ldr	r3, [r7, #4]
	}
 80045be:	4618      	mov	r0, r3
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	20000790 	.word	0x20000790

080045d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80045d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004604 <xTaskGetSchedulerState+0x34>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d102      	bne.n	80045e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80045de:	2301      	movs	r3, #1
 80045e0:	607b      	str	r3, [r7, #4]
 80045e2:	e008      	b.n	80045f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045e4:	4b08      	ldr	r3, [pc, #32]	@ (8004608 <xTaskGetSchedulerState+0x38>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d102      	bne.n	80045f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80045ec:	2302      	movs	r3, #2
 80045ee:	607b      	str	r3, [r7, #4]
 80045f0:	e001      	b.n	80045f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045f2:	2300      	movs	r3, #0
 80045f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045f6:	687b      	ldr	r3, [r7, #4]
	}
 80045f8:	4618      	mov	r0, r3
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	20000c70 	.word	0x20000c70
 8004608:	20000c8c 	.word	0x20000c8c

0800460c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004618:	2300      	movs	r3, #0
 800461a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d051      	beq.n	80046c6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004626:	4b2a      	ldr	r3, [pc, #168]	@ (80046d0 <xTaskPriorityInherit+0xc4>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462c:	429a      	cmp	r2, r3
 800462e:	d241      	bcs.n	80046b4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b00      	cmp	r3, #0
 8004636:	db06      	blt.n	8004646 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004638:	4b25      	ldr	r3, [pc, #148]	@ (80046d0 <xTaskPriorityInherit+0xc4>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	6959      	ldr	r1, [r3, #20]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800464e:	4613      	mov	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4a1f      	ldr	r2, [pc, #124]	@ (80046d4 <xTaskPriorityInherit+0xc8>)
 8004658:	4413      	add	r3, r2
 800465a:	4299      	cmp	r1, r3
 800465c:	d122      	bne.n	80046a4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	3304      	adds	r3, #4
 8004662:	4618      	mov	r0, r3
 8004664:	f7fe f9b8 	bl	80029d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004668:	4b19      	ldr	r3, [pc, #100]	@ (80046d0 <xTaskPriorityInherit+0xc4>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004676:	4b18      	ldr	r3, [pc, #96]	@ (80046d8 <xTaskPriorityInherit+0xcc>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d903      	bls.n	8004686 <xTaskPriorityInherit+0x7a>
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004682:	4a15      	ldr	r2, [pc, #84]	@ (80046d8 <xTaskPriorityInherit+0xcc>)
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800468a:	4613      	mov	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4a10      	ldr	r2, [pc, #64]	@ (80046d4 <xTaskPriorityInherit+0xc8>)
 8004694:	441a      	add	r2, r3
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	3304      	adds	r3, #4
 800469a:	4619      	mov	r1, r3
 800469c:	4610      	mov	r0, r2
 800469e:	f7fe f93e 	bl	800291e <vListInsertEnd>
 80046a2:	e004      	b.n	80046ae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80046a4:	4b0a      	ldr	r3, [pc, #40]	@ (80046d0 <xTaskPriorityInherit+0xc4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80046ae:	2301      	movs	r3, #1
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	e008      	b.n	80046c6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80046b8:	4b05      	ldr	r3, [pc, #20]	@ (80046d0 <xTaskPriorityInherit+0xc4>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046be:	429a      	cmp	r2, r3
 80046c0:	d201      	bcs.n	80046c6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80046c2:	2301      	movs	r3, #1
 80046c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046c6:	68fb      	ldr	r3, [r7, #12]
	}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	20000790 	.word	0x20000790
 80046d4:	20000794 	.word	0x20000794
 80046d8:	20000c6c 	.word	0x20000c6c

080046dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80046e8:	2300      	movs	r3, #0
 80046ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d058      	beq.n	80047a4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80046f2:	4b2f      	ldr	r3, [pc, #188]	@ (80047b0 <xTaskPriorityDisinherit+0xd4>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d00b      	beq.n	8004714 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	60fb      	str	r3, [r7, #12]
}
 800470e:	bf00      	nop
 8004710:	bf00      	nop
 8004712:	e7fd      	b.n	8004710 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10b      	bne.n	8004734 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800471c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	60bb      	str	r3, [r7, #8]
}
 800472e:	bf00      	nop
 8004730:	bf00      	nop
 8004732:	e7fd      	b.n	8004730 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004738:	1e5a      	subs	r2, r3, #1
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004746:	429a      	cmp	r2, r3
 8004748:	d02c      	beq.n	80047a4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800474e:	2b00      	cmp	r3, #0
 8004750:	d128      	bne.n	80047a4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	3304      	adds	r3, #4
 8004756:	4618      	mov	r0, r3
 8004758:	f7fe f93e 	bl	80029d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004768:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004774:	4b0f      	ldr	r3, [pc, #60]	@ (80047b4 <xTaskPriorityDisinherit+0xd8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d903      	bls.n	8004784 <xTaskPriorityDisinherit+0xa8>
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004780:	4a0c      	ldr	r2, [pc, #48]	@ (80047b4 <xTaskPriorityDisinherit+0xd8>)
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004788:	4613      	mov	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4a09      	ldr	r2, [pc, #36]	@ (80047b8 <xTaskPriorityDisinherit+0xdc>)
 8004792:	441a      	add	r2, r3
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	3304      	adds	r3, #4
 8004798:	4619      	mov	r1, r3
 800479a:	4610      	mov	r0, r2
 800479c:	f7fe f8bf 	bl	800291e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047a0:	2301      	movs	r3, #1
 80047a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047a4:	697b      	ldr	r3, [r7, #20]
	}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000790 	.word	0x20000790
 80047b4:	20000c6c 	.word	0x20000c6c
 80047b8:	20000794 	.word	0x20000794

080047bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80047ca:	2301      	movs	r3, #1
 80047cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d06c      	beq.n	80048ae <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10b      	bne.n	80047f4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e0:	f383 8811 	msr	BASEPRI, r3
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	60fb      	str	r3, [r7, #12]
}
 80047ee:	bf00      	nop
 80047f0:	bf00      	nop
 80047f2:	e7fd      	b.n	80047f0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d902      	bls.n	8004804 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	61fb      	str	r3, [r7, #28]
 8004802:	e002      	b.n	800480a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004808:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800480e:	69fa      	ldr	r2, [r7, #28]
 8004810:	429a      	cmp	r2, r3
 8004812:	d04c      	beq.n	80048ae <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	429a      	cmp	r2, r3
 800481c:	d147      	bne.n	80048ae <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800481e:	4b26      	ldr	r3, [pc, #152]	@ (80048b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	429a      	cmp	r2, r3
 8004826:	d10b      	bne.n	8004840 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	60bb      	str	r3, [r7, #8]
}
 800483a:	bf00      	nop
 800483c:	bf00      	nop
 800483e:	e7fd      	b.n	800483c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004844:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	2b00      	cmp	r3, #0
 8004852:	db04      	blt.n	800485e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	6959      	ldr	r1, [r3, #20]
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4613      	mov	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4a13      	ldr	r2, [pc, #76]	@ (80048bc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800486e:	4413      	add	r3, r2
 8004870:	4299      	cmp	r1, r3
 8004872:	d11c      	bne.n	80048ae <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	3304      	adds	r3, #4
 8004878:	4618      	mov	r0, r3
 800487a:	f7fe f8ad 	bl	80029d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004882:	4b0f      	ldr	r3, [pc, #60]	@ (80048c0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d903      	bls.n	8004892 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488e:	4a0c      	ldr	r2, [pc, #48]	@ (80048c0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004896:	4613      	mov	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4a07      	ldr	r2, [pc, #28]	@ (80048bc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80048a0:	441a      	add	r2, r3
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	3304      	adds	r3, #4
 80048a6:	4619      	mov	r1, r3
 80048a8:	4610      	mov	r0, r2
 80048aa:	f7fe f838 	bl	800291e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048ae:	bf00      	nop
 80048b0:	3720      	adds	r7, #32
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	20000790 	.word	0x20000790
 80048bc:	20000794 	.word	0x20000794
 80048c0:	20000c6c 	.word	0x20000c6c

080048c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80048c8:	4b07      	ldr	r3, [pc, #28]	@ (80048e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d004      	beq.n	80048da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80048d0:	4b05      	ldr	r3, [pc, #20]	@ (80048e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048d6:	3201      	adds	r2, #1
 80048d8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80048da:	4b03      	ldr	r3, [pc, #12]	@ (80048e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80048dc:	681b      	ldr	r3, [r3, #0]
	}
 80048de:	4618      	mov	r0, r3
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	20000790 	.word	0x20000790

080048ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80048f6:	4b21      	ldr	r3, [pc, #132]	@ (800497c <prvAddCurrentTaskToDelayedList+0x90>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048fc:	4b20      	ldr	r3, [pc, #128]	@ (8004980 <prvAddCurrentTaskToDelayedList+0x94>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3304      	adds	r3, #4
 8004902:	4618      	mov	r0, r3
 8004904:	f7fe f868 	bl	80029d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490e:	d10a      	bne.n	8004926 <prvAddCurrentTaskToDelayedList+0x3a>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d007      	beq.n	8004926 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004916:	4b1a      	ldr	r3, [pc, #104]	@ (8004980 <prvAddCurrentTaskToDelayedList+0x94>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3304      	adds	r3, #4
 800491c:	4619      	mov	r1, r3
 800491e:	4819      	ldr	r0, [pc, #100]	@ (8004984 <prvAddCurrentTaskToDelayedList+0x98>)
 8004920:	f7fd fffd 	bl	800291e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004924:	e026      	b.n	8004974 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4413      	add	r3, r2
 800492c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800492e:	4b14      	ldr	r3, [pc, #80]	@ (8004980 <prvAddCurrentTaskToDelayedList+0x94>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	429a      	cmp	r2, r3
 800493c:	d209      	bcs.n	8004952 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800493e:	4b12      	ldr	r3, [pc, #72]	@ (8004988 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	4b0f      	ldr	r3, [pc, #60]	@ (8004980 <prvAddCurrentTaskToDelayedList+0x94>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3304      	adds	r3, #4
 8004948:	4619      	mov	r1, r3
 800494a:	4610      	mov	r0, r2
 800494c:	f7fe f80b 	bl	8002966 <vListInsert>
}
 8004950:	e010      	b.n	8004974 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004952:	4b0e      	ldr	r3, [pc, #56]	@ (800498c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	4b0a      	ldr	r3, [pc, #40]	@ (8004980 <prvAddCurrentTaskToDelayedList+0x94>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3304      	adds	r3, #4
 800495c:	4619      	mov	r1, r3
 800495e:	4610      	mov	r0, r2
 8004960:	f7fe f801 	bl	8002966 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004964:	4b0a      	ldr	r3, [pc, #40]	@ (8004990 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	429a      	cmp	r2, r3
 800496c:	d202      	bcs.n	8004974 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800496e:	4a08      	ldr	r2, [pc, #32]	@ (8004990 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	6013      	str	r3, [r2, #0]
}
 8004974:	bf00      	nop
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	20000c68 	.word	0x20000c68
 8004980:	20000790 	.word	0x20000790
 8004984:	20000c50 	.word	0x20000c50
 8004988:	20000c20 	.word	0x20000c20
 800498c:	20000c1c 	.word	0x20000c1c
 8004990:	20000c84 	.word	0x20000c84

08004994 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08a      	sub	sp, #40	@ 0x28
 8004998:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800499a:	2300      	movs	r3, #0
 800499c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800499e:	f000 fb13 	bl	8004fc8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80049a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004a18 <xTimerCreateTimerTask+0x84>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d021      	beq.n	80049ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80049b2:	1d3a      	adds	r2, r7, #4
 80049b4:	f107 0108 	add.w	r1, r7, #8
 80049b8:	f107 030c 	add.w	r3, r7, #12
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fd ff67 	bl	8002890 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	9202      	str	r2, [sp, #8]
 80049ca:	9301      	str	r3, [sp, #4]
 80049cc:	2302      	movs	r3, #2
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	2300      	movs	r3, #0
 80049d2:	460a      	mov	r2, r1
 80049d4:	4911      	ldr	r1, [pc, #68]	@ (8004a1c <xTimerCreateTimerTask+0x88>)
 80049d6:	4812      	ldr	r0, [pc, #72]	@ (8004a20 <xTimerCreateTimerTask+0x8c>)
 80049d8:	f7fe ffc0 	bl	800395c <xTaskCreateStatic>
 80049dc:	4603      	mov	r3, r0
 80049de:	4a11      	ldr	r2, [pc, #68]	@ (8004a24 <xTimerCreateTimerTask+0x90>)
 80049e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80049e2:	4b10      	ldr	r3, [pc, #64]	@ (8004a24 <xTimerCreateTimerTask+0x90>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80049ea:	2301      	movs	r3, #1
 80049ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10b      	bne.n	8004a0c <xTimerCreateTimerTask+0x78>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	613b      	str	r3, [r7, #16]
}
 8004a06:	bf00      	nop
 8004a08:	bf00      	nop
 8004a0a:	e7fd      	b.n	8004a08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004a0c:	697b      	ldr	r3, [r7, #20]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3718      	adds	r7, #24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20000cc0 	.word	0x20000cc0
 8004a1c:	080059b0 	.word	0x080059b0
 8004a20:	08004b61 	.word	0x08004b61
 8004a24:	20000cc4 	.word	0x20000cc4

08004a28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08a      	sub	sp, #40	@ 0x28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10b      	bne.n	8004a58 <xTimerGenericCommand+0x30>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	623b      	str	r3, [r7, #32]
}
 8004a52:	bf00      	nop
 8004a54:	bf00      	nop
 8004a56:	e7fd      	b.n	8004a54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004a58:	4b19      	ldr	r3, [pc, #100]	@ (8004ac0 <xTimerGenericCommand+0x98>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d02a      	beq.n	8004ab6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b05      	cmp	r3, #5
 8004a70:	dc18      	bgt.n	8004aa4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a72:	f7ff fdad 	bl	80045d0 <xTaskGetSchedulerState>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d109      	bne.n	8004a90 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a7c:	4b10      	ldr	r3, [pc, #64]	@ (8004ac0 <xTimerGenericCommand+0x98>)
 8004a7e:	6818      	ldr	r0, [r3, #0]
 8004a80:	f107 0110 	add.w	r1, r7, #16
 8004a84:	2300      	movs	r3, #0
 8004a86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a88:	f7fe f9ce 	bl	8002e28 <xQueueGenericSend>
 8004a8c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004a8e:	e012      	b.n	8004ab6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a90:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac0 <xTimerGenericCommand+0x98>)
 8004a92:	6818      	ldr	r0, [r3, #0]
 8004a94:	f107 0110 	add.w	r1, r7, #16
 8004a98:	2300      	movs	r3, #0
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f7fe f9c4 	bl	8002e28 <xQueueGenericSend>
 8004aa0:	6278      	str	r0, [r7, #36]	@ 0x24
 8004aa2:	e008      	b.n	8004ab6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004aa4:	4b06      	ldr	r3, [pc, #24]	@ (8004ac0 <xTimerGenericCommand+0x98>)
 8004aa6:	6818      	ldr	r0, [r3, #0]
 8004aa8:	f107 0110 	add.w	r1, r7, #16
 8004aac:	2300      	movs	r3, #0
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	f7fe fabc 	bl	800302c <xQueueGenericSendFromISR>
 8004ab4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3728      	adds	r7, #40	@ 0x28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	20000cc0 	.word	0x20000cc0

08004ac4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ace:	4b23      	ldr	r3, [pc, #140]	@ (8004b5c <prvProcessExpiredTimer+0x98>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	3304      	adds	r3, #4
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fd ff7b 	bl	80029d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d023      	beq.n	8004b38 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	699a      	ldr	r2, [r3, #24]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	18d1      	adds	r1, r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	6978      	ldr	r0, [r7, #20]
 8004afe:	f000 f8d5 	bl	8004cac <prvInsertTimerInActiveList>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d020      	beq.n	8004b4a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b08:	2300      	movs	r3, #0
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	2100      	movs	r1, #0
 8004b12:	6978      	ldr	r0, [r7, #20]
 8004b14:	f7ff ff88 	bl	8004a28 <xTimerGenericCommand>
 8004b18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d114      	bne.n	8004b4a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	60fb      	str	r3, [r7, #12]
}
 8004b32:	bf00      	nop
 8004b34:	bf00      	nop
 8004b36:	e7fd      	b.n	8004b34 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b3e:	f023 0301 	bic.w	r3, r3, #1
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	6978      	ldr	r0, [r7, #20]
 8004b50:	4798      	blx	r3
}
 8004b52:	bf00      	nop
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000cb8 	.word	0x20000cb8

08004b60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b68:	f107 0308 	add.w	r3, r7, #8
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 f859 	bl	8004c24 <prvGetNextExpireTime>
 8004b72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	4619      	mov	r1, r3
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 f805 	bl	8004b88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004b7e:	f000 f8d7 	bl	8004d30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b82:	bf00      	nop
 8004b84:	e7f0      	b.n	8004b68 <prvTimerTask+0x8>
	...

08004b88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004b92:	f7ff f927 	bl	8003de4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b96:	f107 0308 	add.w	r3, r7, #8
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 f866 	bl	8004c6c <prvSampleTimeNow>
 8004ba0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d130      	bne.n	8004c0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10a      	bne.n	8004bc4 <prvProcessTimerOrBlockTask+0x3c>
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d806      	bhi.n	8004bc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004bb6:	f7ff f923 	bl	8003e00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004bba:	68f9      	ldr	r1, [r7, #12]
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff ff81 	bl	8004ac4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004bc2:	e024      	b.n	8004c0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d008      	beq.n	8004bdc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004bca:	4b13      	ldr	r3, [pc, #76]	@ (8004c18 <prvProcessTimerOrBlockTask+0x90>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <prvProcessTimerOrBlockTask+0x50>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e000      	b.n	8004bda <prvProcessTimerOrBlockTask+0x52>
 8004bd8:	2300      	movs	r3, #0
 8004bda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8004c1c <prvProcessTimerOrBlockTask+0x94>)
 8004bde:	6818      	ldr	r0, [r3, #0]
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	4619      	mov	r1, r3
 8004bea:	f7fe fe83 	bl	80038f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004bee:	f7ff f907 	bl	8003e00 <xTaskResumeAll>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10a      	bne.n	8004c0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004bf8:	4b09      	ldr	r3, [pc, #36]	@ (8004c20 <prvProcessTimerOrBlockTask+0x98>)
 8004bfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	f3bf 8f6f 	isb	sy
}
 8004c08:	e001      	b.n	8004c0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c0a:	f7ff f8f9 	bl	8003e00 <xTaskResumeAll>
}
 8004c0e:	bf00      	nop
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20000cbc 	.word	0x20000cbc
 8004c1c:	20000cc0 	.word	0x20000cc0
 8004c20:	e000ed04 	.word	0xe000ed04

08004c24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004c68 <prvGetNextExpireTime+0x44>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <prvGetNextExpireTime+0x16>
 8004c36:	2201      	movs	r2, #1
 8004c38:	e000      	b.n	8004c3c <prvGetNextExpireTime+0x18>
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d105      	bne.n	8004c54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c48:	4b07      	ldr	r3, [pc, #28]	@ (8004c68 <prvGetNextExpireTime+0x44>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	e001      	b.n	8004c58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c58:	68fb      	ldr	r3, [r7, #12]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	20000cb8 	.word	0x20000cb8

08004c6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004c74:	f7ff f962 	bl	8003f3c <xTaskGetTickCount>
 8004c78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca8 <prvSampleTimeNow+0x3c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d205      	bcs.n	8004c90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004c84:	f000 f93a 	bl	8004efc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]
 8004c8e:	e002      	b.n	8004c96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004c96:	4a04      	ldr	r2, [pc, #16]	@ (8004ca8 <prvSampleTimeNow+0x3c>)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20000cc8 	.word	0x20000cc8

08004cac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d812      	bhi.n	8004cf8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	1ad2      	subs	r2, r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d302      	bcc.n	8004ce6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	e01b      	b.n	8004d1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ce6:	4b10      	ldr	r3, [pc, #64]	@ (8004d28 <prvInsertTimerInActiveList+0x7c>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	3304      	adds	r3, #4
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	f7fd fe38 	bl	8002966 <vListInsert>
 8004cf6:	e012      	b.n	8004d1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d206      	bcs.n	8004d0e <prvInsertTimerInActiveList+0x62>
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d302      	bcc.n	8004d0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	e007      	b.n	8004d1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d0e:	4b07      	ldr	r3, [pc, #28]	@ (8004d2c <prvInsertTimerInActiveList+0x80>)
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3304      	adds	r3, #4
 8004d16:	4619      	mov	r1, r3
 8004d18:	4610      	mov	r0, r2
 8004d1a:	f7fd fe24 	bl	8002966 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d1e:	697b      	ldr	r3, [r7, #20]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	20000cbc 	.word	0x20000cbc
 8004d2c:	20000cb8 	.word	0x20000cb8

08004d30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08e      	sub	sp, #56	@ 0x38
 8004d34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d36:	e0ce      	b.n	8004ed6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	da19      	bge.n	8004d72 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d3e:	1d3b      	adds	r3, r7, #4
 8004d40:	3304      	adds	r3, #4
 8004d42:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10b      	bne.n	8004d62 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	61fb      	str	r3, [r7, #28]
}
 8004d5c:	bf00      	nop
 8004d5e:	bf00      	nop
 8004d60:	e7fd      	b.n	8004d5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d68:	6850      	ldr	r0, [r2, #4]
 8004d6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d6c:	6892      	ldr	r2, [r2, #8]
 8004d6e:	4611      	mov	r1, r2
 8004d70:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f2c0 80ae 	blt.w	8004ed6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d004      	beq.n	8004d90 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d88:	3304      	adds	r3, #4
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fd fe24 	bl	80029d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d90:	463b      	mov	r3, r7
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7ff ff6a 	bl	8004c6c <prvSampleTimeNow>
 8004d98:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b09      	cmp	r3, #9
 8004d9e:	f200 8097 	bhi.w	8004ed0 <prvProcessReceivedCommands+0x1a0>
 8004da2:	a201      	add	r2, pc, #4	@ (adr r2, 8004da8 <prvProcessReceivedCommands+0x78>)
 8004da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da8:	08004dd1 	.word	0x08004dd1
 8004dac:	08004dd1 	.word	0x08004dd1
 8004db0:	08004dd1 	.word	0x08004dd1
 8004db4:	08004e47 	.word	0x08004e47
 8004db8:	08004e5b 	.word	0x08004e5b
 8004dbc:	08004ea7 	.word	0x08004ea7
 8004dc0:	08004dd1 	.word	0x08004dd1
 8004dc4:	08004dd1 	.word	0x08004dd1
 8004dc8:	08004e47 	.word	0x08004e47
 8004dcc:	08004e5b 	.word	0x08004e5b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004dd6:	f043 0301 	orr.w	r3, r3, #1
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	18d1      	adds	r1, r2, r3
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004df0:	f7ff ff5c 	bl	8004cac <prvInsertTimerInActiveList>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d06c      	beq.n	8004ed4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d061      	beq.n	8004ed4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	441a      	add	r2, r3
 8004e18:	2300      	movs	r3, #0
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	2100      	movs	r1, #0
 8004e20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e22:	f7ff fe01 	bl	8004a28 <xTimerGenericCommand>
 8004e26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d152      	bne.n	8004ed4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	61bb      	str	r3, [r7, #24]
}
 8004e40:	bf00      	nop
 8004e42:	bf00      	nop
 8004e44:	e7fd      	b.n	8004e42 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e4c:	f023 0301 	bic.w	r3, r3, #1
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e54:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004e58:	e03d      	b.n	8004ed6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e60:	f043 0301 	orr.w	r3, r3, #1
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e70:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10b      	bne.n	8004e92 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	617b      	str	r3, [r7, #20]
}
 8004e8c:	bf00      	nop
 8004e8e:	bf00      	nop
 8004e90:	e7fd      	b.n	8004e8e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e98:	18d1      	adds	r1, r2, r3
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ea0:	f7ff ff04 	bl	8004cac <prvInsertTimerInActiveList>
					break;
 8004ea4:	e017      	b.n	8004ed6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d103      	bne.n	8004ebc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004eb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004eb6:	f000 fbe7 	bl	8005688 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004eba:	e00c      	b.n	8004ed6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ec2:	f023 0301 	bic.w	r3, r3, #1
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004ece:	e002      	b.n	8004ed6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004ed0:	bf00      	nop
 8004ed2:	e000      	b.n	8004ed6 <prvProcessReceivedCommands+0x1a6>
					break;
 8004ed4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ed6:	4b08      	ldr	r3, [pc, #32]	@ (8004ef8 <prvProcessReceivedCommands+0x1c8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	1d39      	adds	r1, r7, #4
 8004edc:	2200      	movs	r2, #0
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fe f942 	bl	8003168 <xQueueReceive>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f47f af26 	bne.w	8004d38 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004eec:	bf00      	nop
 8004eee:	bf00      	nop
 8004ef0:	3730      	adds	r7, #48	@ 0x30
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20000cc0 	.word	0x20000cc0

08004efc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f02:	e049      	b.n	8004f98 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f04:	4b2e      	ldr	r3, [pc, #184]	@ (8004fc0 <prvSwitchTimerLists+0xc4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f0e:	4b2c      	ldr	r3, [pc, #176]	@ (8004fc0 <prvSwitchTimerLists+0xc4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fd fd5b 	bl	80029d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d02f      	beq.n	8004f98 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4413      	add	r3, r2
 8004f40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d90e      	bls.n	8004f68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f56:	4b1a      	ldr	r3, [pc, #104]	@ (8004fc0 <prvSwitchTimerLists+0xc4>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4610      	mov	r0, r2
 8004f62:	f7fd fd00 	bl	8002966 <vListInsert>
 8004f66:	e017      	b.n	8004f98 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f68:	2300      	movs	r3, #0
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	2100      	movs	r1, #0
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f7ff fd58 	bl	8004a28 <xTimerGenericCommand>
 8004f78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10b      	bne.n	8004f98 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	603b      	str	r3, [r7, #0]
}
 8004f92:	bf00      	nop
 8004f94:	bf00      	nop
 8004f96:	e7fd      	b.n	8004f94 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f98:	4b09      	ldr	r3, [pc, #36]	@ (8004fc0 <prvSwitchTimerLists+0xc4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1b0      	bne.n	8004f04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004fa2:	4b07      	ldr	r3, [pc, #28]	@ (8004fc0 <prvSwitchTimerLists+0xc4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004fa8:	4b06      	ldr	r3, [pc, #24]	@ (8004fc4 <prvSwitchTimerLists+0xc8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a04      	ldr	r2, [pc, #16]	@ (8004fc0 <prvSwitchTimerLists+0xc4>)
 8004fae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004fb0:	4a04      	ldr	r2, [pc, #16]	@ (8004fc4 <prvSwitchTimerLists+0xc8>)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	6013      	str	r3, [r2, #0]
}
 8004fb6:	bf00      	nop
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20000cb8 	.word	0x20000cb8
 8004fc4:	20000cbc 	.word	0x20000cbc

08004fc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004fce:	f000 f96b 	bl	80052a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004fd2:	4b15      	ldr	r3, [pc, #84]	@ (8005028 <prvCheckForValidListAndQueue+0x60>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d120      	bne.n	800501c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004fda:	4814      	ldr	r0, [pc, #80]	@ (800502c <prvCheckForValidListAndQueue+0x64>)
 8004fdc:	f7fd fc72 	bl	80028c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004fe0:	4813      	ldr	r0, [pc, #76]	@ (8005030 <prvCheckForValidListAndQueue+0x68>)
 8004fe2:	f7fd fc6f 	bl	80028c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004fe6:	4b13      	ldr	r3, [pc, #76]	@ (8005034 <prvCheckForValidListAndQueue+0x6c>)
 8004fe8:	4a10      	ldr	r2, [pc, #64]	@ (800502c <prvCheckForValidListAndQueue+0x64>)
 8004fea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004fec:	4b12      	ldr	r3, [pc, #72]	@ (8005038 <prvCheckForValidListAndQueue+0x70>)
 8004fee:	4a10      	ldr	r2, [pc, #64]	@ (8005030 <prvCheckForValidListAndQueue+0x68>)
 8004ff0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	4b11      	ldr	r3, [pc, #68]	@ (800503c <prvCheckForValidListAndQueue+0x74>)
 8004ff8:	4a11      	ldr	r2, [pc, #68]	@ (8005040 <prvCheckForValidListAndQueue+0x78>)
 8004ffa:	2110      	movs	r1, #16
 8004ffc:	200a      	movs	r0, #10
 8004ffe:	f7fd fd7f 	bl	8002b00 <xQueueGenericCreateStatic>
 8005002:	4603      	mov	r3, r0
 8005004:	4a08      	ldr	r2, [pc, #32]	@ (8005028 <prvCheckForValidListAndQueue+0x60>)
 8005006:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005008:	4b07      	ldr	r3, [pc, #28]	@ (8005028 <prvCheckForValidListAndQueue+0x60>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005010:	4b05      	ldr	r3, [pc, #20]	@ (8005028 <prvCheckForValidListAndQueue+0x60>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	490b      	ldr	r1, [pc, #44]	@ (8005044 <prvCheckForValidListAndQueue+0x7c>)
 8005016:	4618      	mov	r0, r3
 8005018:	f7fe fc42 	bl	80038a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800501c:	f000 f976 	bl	800530c <vPortExitCritical>
}
 8005020:	bf00      	nop
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20000cc0 	.word	0x20000cc0
 800502c:	20000c90 	.word	0x20000c90
 8005030:	20000ca4 	.word	0x20000ca4
 8005034:	20000cb8 	.word	0x20000cb8
 8005038:	20000cbc 	.word	0x20000cbc
 800503c:	20000d6c 	.word	0x20000d6c
 8005040:	20000ccc 	.word	0x20000ccc
 8005044:	080059b8 	.word	0x080059b8

08005048 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	3b04      	subs	r3, #4
 8005058:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005060:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3b04      	subs	r3, #4
 8005066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f023 0201 	bic.w	r2, r3, #1
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	3b04      	subs	r3, #4
 8005076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005078:	4a0c      	ldr	r2, [pc, #48]	@ (80050ac <pxPortInitialiseStack+0x64>)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	3b14      	subs	r3, #20
 8005082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3b04      	subs	r3, #4
 800508e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f06f 0202 	mvn.w	r2, #2
 8005096:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	3b20      	subs	r3, #32
 800509c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800509e:	68fb      	ldr	r3, [r7, #12]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	080050b1 	.word	0x080050b1

080050b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80050b6:	2300      	movs	r3, #0
 80050b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050ba:	4b13      	ldr	r3, [pc, #76]	@ (8005108 <prvTaskExitError+0x58>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c2:	d00b      	beq.n	80050dc <prvTaskExitError+0x2c>
	__asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	60fb      	str	r3, [r7, #12]
}
 80050d6:	bf00      	nop
 80050d8:	bf00      	nop
 80050da:	e7fd      	b.n	80050d8 <prvTaskExitError+0x28>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	60bb      	str	r3, [r7, #8]
}
 80050ee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050f0:	bf00      	nop
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0fc      	beq.n	80050f2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050f8:	bf00      	nop
 80050fa:	bf00      	nop
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	2000000c 	.word	0x2000000c
 800510c:	00000000 	.word	0x00000000

08005110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005110:	4b07      	ldr	r3, [pc, #28]	@ (8005130 <pxCurrentTCBConst2>)
 8005112:	6819      	ldr	r1, [r3, #0]
 8005114:	6808      	ldr	r0, [r1, #0]
 8005116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800511a:	f380 8809 	msr	PSP, r0
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f04f 0000 	mov.w	r0, #0
 8005126:	f380 8811 	msr	BASEPRI, r0
 800512a:	4770      	bx	lr
 800512c:	f3af 8000 	nop.w

08005130 <pxCurrentTCBConst2>:
 8005130:	20000790 	.word	0x20000790
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop

08005138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005138:	4808      	ldr	r0, [pc, #32]	@ (800515c <prvPortStartFirstTask+0x24>)
 800513a:	6800      	ldr	r0, [r0, #0]
 800513c:	6800      	ldr	r0, [r0, #0]
 800513e:	f380 8808 	msr	MSP, r0
 8005142:	f04f 0000 	mov.w	r0, #0
 8005146:	f380 8814 	msr	CONTROL, r0
 800514a:	b662      	cpsie	i
 800514c:	b661      	cpsie	f
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	df00      	svc	0
 8005158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800515a:	bf00      	nop
 800515c:	e000ed08 	.word	0xe000ed08

08005160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005166:	4b47      	ldr	r3, [pc, #284]	@ (8005284 <xPortStartScheduler+0x124>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a47      	ldr	r2, [pc, #284]	@ (8005288 <xPortStartScheduler+0x128>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d10b      	bne.n	8005188 <xPortStartScheduler+0x28>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	60fb      	str	r3, [r7, #12]
}
 8005182:	bf00      	nop
 8005184:	bf00      	nop
 8005186:	e7fd      	b.n	8005184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005188:	4b3e      	ldr	r3, [pc, #248]	@ (8005284 <xPortStartScheduler+0x124>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a3f      	ldr	r2, [pc, #252]	@ (800528c <xPortStartScheduler+0x12c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d10b      	bne.n	80051aa <xPortStartScheduler+0x4a>
	__asm volatile
 8005192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	613b      	str	r3, [r7, #16]
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop
 80051a8:	e7fd      	b.n	80051a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051aa:	4b39      	ldr	r3, [pc, #228]	@ (8005290 <xPortStartScheduler+0x130>)
 80051ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	22ff      	movs	r2, #255	@ 0xff
 80051ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051c4:	78fb      	ldrb	r3, [r7, #3]
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	4b31      	ldr	r3, [pc, #196]	@ (8005294 <xPortStartScheduler+0x134>)
 80051d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051d2:	4b31      	ldr	r3, [pc, #196]	@ (8005298 <xPortStartScheduler+0x138>)
 80051d4:	2207      	movs	r2, #7
 80051d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051d8:	e009      	b.n	80051ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80051da:	4b2f      	ldr	r3, [pc, #188]	@ (8005298 <xPortStartScheduler+0x138>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3b01      	subs	r3, #1
 80051e0:	4a2d      	ldr	r2, [pc, #180]	@ (8005298 <xPortStartScheduler+0x138>)
 80051e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051e4:	78fb      	ldrb	r3, [r7, #3]
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051ee:	78fb      	ldrb	r3, [r7, #3]
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f6:	2b80      	cmp	r3, #128	@ 0x80
 80051f8:	d0ef      	beq.n	80051da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051fa:	4b27      	ldr	r3, [pc, #156]	@ (8005298 <xPortStartScheduler+0x138>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f1c3 0307 	rsb	r3, r3, #7
 8005202:	2b04      	cmp	r3, #4
 8005204:	d00b      	beq.n	800521e <xPortStartScheduler+0xbe>
	__asm volatile
 8005206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	60bb      	str	r3, [r7, #8]
}
 8005218:	bf00      	nop
 800521a:	bf00      	nop
 800521c:	e7fd      	b.n	800521a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800521e:	4b1e      	ldr	r3, [pc, #120]	@ (8005298 <xPortStartScheduler+0x138>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	021b      	lsls	r3, r3, #8
 8005224:	4a1c      	ldr	r2, [pc, #112]	@ (8005298 <xPortStartScheduler+0x138>)
 8005226:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005228:	4b1b      	ldr	r3, [pc, #108]	@ (8005298 <xPortStartScheduler+0x138>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005230:	4a19      	ldr	r2, [pc, #100]	@ (8005298 <xPortStartScheduler+0x138>)
 8005232:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	b2da      	uxtb	r2, r3
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800523c:	4b17      	ldr	r3, [pc, #92]	@ (800529c <xPortStartScheduler+0x13c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a16      	ldr	r2, [pc, #88]	@ (800529c <xPortStartScheduler+0x13c>)
 8005242:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005246:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005248:	4b14      	ldr	r3, [pc, #80]	@ (800529c <xPortStartScheduler+0x13c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a13      	ldr	r2, [pc, #76]	@ (800529c <xPortStartScheduler+0x13c>)
 800524e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005252:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005254:	f000 f8da 	bl	800540c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005258:	4b11      	ldr	r3, [pc, #68]	@ (80052a0 <xPortStartScheduler+0x140>)
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800525e:	f000 f8f9 	bl	8005454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005262:	4b10      	ldr	r3, [pc, #64]	@ (80052a4 <xPortStartScheduler+0x144>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a0f      	ldr	r2, [pc, #60]	@ (80052a4 <xPortStartScheduler+0x144>)
 8005268:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800526c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800526e:	f7ff ff63 	bl	8005138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005272:	f7fe ff2d 	bl	80040d0 <vTaskSwitchContext>
	prvTaskExitError();
 8005276:	f7ff ff1b 	bl	80050b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	e000ed00 	.word	0xe000ed00
 8005288:	410fc271 	.word	0x410fc271
 800528c:	410fc270 	.word	0x410fc270
 8005290:	e000e400 	.word	0xe000e400
 8005294:	20000dbc 	.word	0x20000dbc
 8005298:	20000dc0 	.word	0x20000dc0
 800529c:	e000ed20 	.word	0xe000ed20
 80052a0:	2000000c 	.word	0x2000000c
 80052a4:	e000ef34 	.word	0xe000ef34

080052a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	607b      	str	r3, [r7, #4]
}
 80052c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80052c2:	4b10      	ldr	r3, [pc, #64]	@ (8005304 <vPortEnterCritical+0x5c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3301      	adds	r3, #1
 80052c8:	4a0e      	ldr	r2, [pc, #56]	@ (8005304 <vPortEnterCritical+0x5c>)
 80052ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005304 <vPortEnterCritical+0x5c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d110      	bne.n	80052f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005308 <vPortEnterCritical+0x60>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00b      	beq.n	80052f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	603b      	str	r3, [r7, #0]
}
 80052f0:	bf00      	nop
 80052f2:	bf00      	nop
 80052f4:	e7fd      	b.n	80052f2 <vPortEnterCritical+0x4a>
	}
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	2000000c 	.word	0x2000000c
 8005308:	e000ed04 	.word	0xe000ed04

0800530c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005312:	4b12      	ldr	r3, [pc, #72]	@ (800535c <vPortExitCritical+0x50>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10b      	bne.n	8005332 <vPortExitCritical+0x26>
	__asm volatile
 800531a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	607b      	str	r3, [r7, #4]
}
 800532c:	bf00      	nop
 800532e:	bf00      	nop
 8005330:	e7fd      	b.n	800532e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005332:	4b0a      	ldr	r3, [pc, #40]	@ (800535c <vPortExitCritical+0x50>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3b01      	subs	r3, #1
 8005338:	4a08      	ldr	r2, [pc, #32]	@ (800535c <vPortExitCritical+0x50>)
 800533a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800533c:	4b07      	ldr	r3, [pc, #28]	@ (800535c <vPortExitCritical+0x50>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d105      	bne.n	8005350 <vPortExitCritical+0x44>
 8005344:	2300      	movs	r3, #0
 8005346:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	f383 8811 	msr	BASEPRI, r3
}
 800534e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	2000000c 	.word	0x2000000c

08005360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005360:	f3ef 8009 	mrs	r0, PSP
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	4b15      	ldr	r3, [pc, #84]	@ (80053c0 <pxCurrentTCBConst>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	f01e 0f10 	tst.w	lr, #16
 8005370:	bf08      	it	eq
 8005372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800537a:	6010      	str	r0, [r2, #0]
 800537c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005380:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005384:	f380 8811 	msr	BASEPRI, r0
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	f7fe fe9e 	bl	80040d0 <vTaskSwitchContext>
 8005394:	f04f 0000 	mov.w	r0, #0
 8005398:	f380 8811 	msr	BASEPRI, r0
 800539c:	bc09      	pop	{r0, r3}
 800539e:	6819      	ldr	r1, [r3, #0]
 80053a0:	6808      	ldr	r0, [r1, #0]
 80053a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a6:	f01e 0f10 	tst.w	lr, #16
 80053aa:	bf08      	it	eq
 80053ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053b0:	f380 8809 	msr	PSP, r0
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	f3af 8000 	nop.w

080053c0 <pxCurrentTCBConst>:
 80053c0:	20000790 	.word	0x20000790
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053c4:	bf00      	nop
 80053c6:	bf00      	nop

080053c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	607b      	str	r3, [r7, #4]
}
 80053e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053e2:	f7fe fdbb 	bl	8003f5c <xTaskIncrementTick>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053ec:	4b06      	ldr	r3, [pc, #24]	@ (8005408 <xPortSysTickHandler+0x40>)
 80053ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	2300      	movs	r3, #0
 80053f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	f383 8811 	msr	BASEPRI, r3
}
 80053fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005400:	bf00      	nop
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	e000ed04 	.word	0xe000ed04

0800540c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005410:	4b0b      	ldr	r3, [pc, #44]	@ (8005440 <vPortSetupTimerInterrupt+0x34>)
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005416:	4b0b      	ldr	r3, [pc, #44]	@ (8005444 <vPortSetupTimerInterrupt+0x38>)
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800541c:	4b0a      	ldr	r3, [pc, #40]	@ (8005448 <vPortSetupTimerInterrupt+0x3c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a0a      	ldr	r2, [pc, #40]	@ (800544c <vPortSetupTimerInterrupt+0x40>)
 8005422:	fba2 2303 	umull	r2, r3, r2, r3
 8005426:	099b      	lsrs	r3, r3, #6
 8005428:	4a09      	ldr	r2, [pc, #36]	@ (8005450 <vPortSetupTimerInterrupt+0x44>)
 800542a:	3b01      	subs	r3, #1
 800542c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800542e:	4b04      	ldr	r3, [pc, #16]	@ (8005440 <vPortSetupTimerInterrupt+0x34>)
 8005430:	2207      	movs	r2, #7
 8005432:	601a      	str	r2, [r3, #0]
}
 8005434:	bf00      	nop
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	e000e010 	.word	0xe000e010
 8005444:	e000e018 	.word	0xe000e018
 8005448:	20000000 	.word	0x20000000
 800544c:	10624dd3 	.word	0x10624dd3
 8005450:	e000e014 	.word	0xe000e014

08005454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005454:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005464 <vPortEnableVFP+0x10>
 8005458:	6801      	ldr	r1, [r0, #0]
 800545a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800545e:	6001      	str	r1, [r0, #0]
 8005460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005462:	bf00      	nop
 8005464:	e000ed88 	.word	0xe000ed88

08005468 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800546e:	f3ef 8305 	mrs	r3, IPSR
 8005472:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b0f      	cmp	r3, #15
 8005478:	d915      	bls.n	80054a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800547a:	4a18      	ldr	r2, [pc, #96]	@ (80054dc <vPortValidateInterruptPriority+0x74>)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4413      	add	r3, r2
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005484:	4b16      	ldr	r3, [pc, #88]	@ (80054e0 <vPortValidateInterruptPriority+0x78>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	7afa      	ldrb	r2, [r7, #11]
 800548a:	429a      	cmp	r2, r3
 800548c:	d20b      	bcs.n	80054a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	607b      	str	r3, [r7, #4]
}
 80054a0:	bf00      	nop
 80054a2:	bf00      	nop
 80054a4:	e7fd      	b.n	80054a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054a6:	4b0f      	ldr	r3, [pc, #60]	@ (80054e4 <vPortValidateInterruptPriority+0x7c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80054ae:	4b0e      	ldr	r3, [pc, #56]	@ (80054e8 <vPortValidateInterruptPriority+0x80>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d90b      	bls.n	80054ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80054b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	603b      	str	r3, [r7, #0]
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	e7fd      	b.n	80054ca <vPortValidateInterruptPriority+0x62>
	}
 80054ce:	bf00      	nop
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	e000e3f0 	.word	0xe000e3f0
 80054e0:	20000dbc 	.word	0x20000dbc
 80054e4:	e000ed0c 	.word	0xe000ed0c
 80054e8:	20000dc0 	.word	0x20000dc0

080054ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08a      	sub	sp, #40	@ 0x28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054f4:	2300      	movs	r3, #0
 80054f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054f8:	f7fe fc74 	bl	8003de4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054fc:	4b5c      	ldr	r3, [pc, #368]	@ (8005670 <pvPortMalloc+0x184>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005504:	f000 f924 	bl	8005750 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005508:	4b5a      	ldr	r3, [pc, #360]	@ (8005674 <pvPortMalloc+0x188>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4013      	ands	r3, r2
 8005510:	2b00      	cmp	r3, #0
 8005512:	f040 8095 	bne.w	8005640 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01e      	beq.n	800555a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800551c:	2208      	movs	r2, #8
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4413      	add	r3, r2
 8005522:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	2b00      	cmp	r3, #0
 800552c:	d015      	beq.n	800555a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f023 0307 	bic.w	r3, r3, #7
 8005534:	3308      	adds	r3, #8
 8005536:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00b      	beq.n	800555a <pvPortMalloc+0x6e>
	__asm volatile
 8005542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005546:	f383 8811 	msr	BASEPRI, r3
 800554a:	f3bf 8f6f 	isb	sy
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	617b      	str	r3, [r7, #20]
}
 8005554:	bf00      	nop
 8005556:	bf00      	nop
 8005558:	e7fd      	b.n	8005556 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d06f      	beq.n	8005640 <pvPortMalloc+0x154>
 8005560:	4b45      	ldr	r3, [pc, #276]	@ (8005678 <pvPortMalloc+0x18c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	429a      	cmp	r2, r3
 8005568:	d86a      	bhi.n	8005640 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800556a:	4b44      	ldr	r3, [pc, #272]	@ (800567c <pvPortMalloc+0x190>)
 800556c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800556e:	4b43      	ldr	r3, [pc, #268]	@ (800567c <pvPortMalloc+0x190>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005574:	e004      	b.n	8005580 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005578:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800557a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	429a      	cmp	r2, r3
 8005588:	d903      	bls.n	8005592 <pvPortMalloc+0xa6>
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f1      	bne.n	8005576 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005592:	4b37      	ldr	r3, [pc, #220]	@ (8005670 <pvPortMalloc+0x184>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005598:	429a      	cmp	r2, r3
 800559a:	d051      	beq.n	8005640 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2208      	movs	r2, #8
 80055a2:	4413      	add	r3, r2
 80055a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	1ad2      	subs	r2, r2, r3
 80055b6:	2308      	movs	r3, #8
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d920      	bls.n	8005600 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4413      	add	r3, r2
 80055c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	f003 0307 	and.w	r3, r3, #7
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00b      	beq.n	80055e8 <pvPortMalloc+0xfc>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	613b      	str	r3, [r7, #16]
}
 80055e2:	bf00      	nop
 80055e4:	bf00      	nop
 80055e6:	e7fd      	b.n	80055e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	1ad2      	subs	r2, r2, r3
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055fa:	69b8      	ldr	r0, [r7, #24]
 80055fc:	f000 f90a 	bl	8005814 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005600:	4b1d      	ldr	r3, [pc, #116]	@ (8005678 <pvPortMalloc+0x18c>)
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	4a1b      	ldr	r2, [pc, #108]	@ (8005678 <pvPortMalloc+0x18c>)
 800560c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800560e:	4b1a      	ldr	r3, [pc, #104]	@ (8005678 <pvPortMalloc+0x18c>)
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	4b1b      	ldr	r3, [pc, #108]	@ (8005680 <pvPortMalloc+0x194>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d203      	bcs.n	8005622 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800561a:	4b17      	ldr	r3, [pc, #92]	@ (8005678 <pvPortMalloc+0x18c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a18      	ldr	r2, [pc, #96]	@ (8005680 <pvPortMalloc+0x194>)
 8005620:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	4b13      	ldr	r3, [pc, #76]	@ (8005674 <pvPortMalloc+0x188>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	431a      	orrs	r2, r3
 800562c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005632:	2200      	movs	r2, #0
 8005634:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005636:	4b13      	ldr	r3, [pc, #76]	@ (8005684 <pvPortMalloc+0x198>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3301      	adds	r3, #1
 800563c:	4a11      	ldr	r2, [pc, #68]	@ (8005684 <pvPortMalloc+0x198>)
 800563e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005640:	f7fe fbde 	bl	8003e00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00b      	beq.n	8005666 <pvPortMalloc+0x17a>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	60fb      	str	r3, [r7, #12]
}
 8005660:	bf00      	nop
 8005662:	bf00      	nop
 8005664:	e7fd      	b.n	8005662 <pvPortMalloc+0x176>
	return pvReturn;
 8005666:	69fb      	ldr	r3, [r7, #28]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3728      	adds	r7, #40	@ 0x28
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	200049cc 	.word	0x200049cc
 8005674:	200049e0 	.word	0x200049e0
 8005678:	200049d0 	.word	0x200049d0
 800567c:	200049c4 	.word	0x200049c4
 8005680:	200049d4 	.word	0x200049d4
 8005684:	200049d8 	.word	0x200049d8

08005688 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d04f      	beq.n	800573a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800569a:	2308      	movs	r3, #8
 800569c:	425b      	negs	r3, r3
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	4413      	add	r3, r2
 80056a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	4b25      	ldr	r3, [pc, #148]	@ (8005744 <vPortFree+0xbc>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4013      	ands	r3, r2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10b      	bne.n	80056ce <vPortFree+0x46>
	__asm volatile
 80056b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ba:	f383 8811 	msr	BASEPRI, r3
 80056be:	f3bf 8f6f 	isb	sy
 80056c2:	f3bf 8f4f 	dsb	sy
 80056c6:	60fb      	str	r3, [r7, #12]
}
 80056c8:	bf00      	nop
 80056ca:	bf00      	nop
 80056cc:	e7fd      	b.n	80056ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00b      	beq.n	80056ee <vPortFree+0x66>
	__asm volatile
 80056d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	60bb      	str	r3, [r7, #8]
}
 80056e8:	bf00      	nop
 80056ea:	bf00      	nop
 80056ec:	e7fd      	b.n	80056ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	4b14      	ldr	r3, [pc, #80]	@ (8005744 <vPortFree+0xbc>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4013      	ands	r3, r2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d01e      	beq.n	800573a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d11a      	bne.n	800573a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	4b0e      	ldr	r3, [pc, #56]	@ (8005744 <vPortFree+0xbc>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	43db      	mvns	r3, r3
 800570e:	401a      	ands	r2, r3
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005714:	f7fe fb66 	bl	8003de4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	4b0a      	ldr	r3, [pc, #40]	@ (8005748 <vPortFree+0xc0>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4413      	add	r3, r2
 8005722:	4a09      	ldr	r2, [pc, #36]	@ (8005748 <vPortFree+0xc0>)
 8005724:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005726:	6938      	ldr	r0, [r7, #16]
 8005728:	f000 f874 	bl	8005814 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800572c:	4b07      	ldr	r3, [pc, #28]	@ (800574c <vPortFree+0xc4>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3301      	adds	r3, #1
 8005732:	4a06      	ldr	r2, [pc, #24]	@ (800574c <vPortFree+0xc4>)
 8005734:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005736:	f7fe fb63 	bl	8003e00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800573a:	bf00      	nop
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	200049e0 	.word	0x200049e0
 8005748:	200049d0 	.word	0x200049d0
 800574c:	200049dc 	.word	0x200049dc

08005750 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005756:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800575a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800575c:	4b27      	ldr	r3, [pc, #156]	@ (80057fc <prvHeapInit+0xac>)
 800575e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00c      	beq.n	8005784 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	3307      	adds	r3, #7
 800576e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 0307 	bic.w	r3, r3, #7
 8005776:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	4a1f      	ldr	r2, [pc, #124]	@ (80057fc <prvHeapInit+0xac>)
 8005780:	4413      	add	r3, r2
 8005782:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005788:	4a1d      	ldr	r2, [pc, #116]	@ (8005800 <prvHeapInit+0xb0>)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800578e:	4b1c      	ldr	r3, [pc, #112]	@ (8005800 <prvHeapInit+0xb0>)
 8005790:	2200      	movs	r2, #0
 8005792:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	4413      	add	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800579c:	2208      	movs	r2, #8
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	1a9b      	subs	r3, r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0307 	bic.w	r3, r3, #7
 80057aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4a15      	ldr	r2, [pc, #84]	@ (8005804 <prvHeapInit+0xb4>)
 80057b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057b2:	4b14      	ldr	r3, [pc, #80]	@ (8005804 <prvHeapInit+0xb4>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2200      	movs	r2, #0
 80057b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057ba:	4b12      	ldr	r3, [pc, #72]	@ (8005804 <prvHeapInit+0xb4>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	1ad2      	subs	r2, r2, r3
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005804 <prvHeapInit+0xb4>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	4a0a      	ldr	r2, [pc, #40]	@ (8005808 <prvHeapInit+0xb8>)
 80057de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	4a09      	ldr	r2, [pc, #36]	@ (800580c <prvHeapInit+0xbc>)
 80057e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057e8:	4b09      	ldr	r3, [pc, #36]	@ (8005810 <prvHeapInit+0xc0>)
 80057ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80057ee:	601a      	str	r2, [r3, #0]
}
 80057f0:	bf00      	nop
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	20000dc4 	.word	0x20000dc4
 8005800:	200049c4 	.word	0x200049c4
 8005804:	200049cc 	.word	0x200049cc
 8005808:	200049d4 	.word	0x200049d4
 800580c:	200049d0 	.word	0x200049d0
 8005810:	200049e0 	.word	0x200049e0

08005814 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800581c:	4b28      	ldr	r3, [pc, #160]	@ (80058c0 <prvInsertBlockIntoFreeList+0xac>)
 800581e:	60fb      	str	r3, [r7, #12]
 8005820:	e002      	b.n	8005828 <prvInsertBlockIntoFreeList+0x14>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	429a      	cmp	r2, r3
 8005830:	d8f7      	bhi.n	8005822 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	4413      	add	r3, r2
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	429a      	cmp	r2, r3
 8005842:	d108      	bne.n	8005856 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	441a      	add	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	441a      	add	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d118      	bne.n	800589c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	4b15      	ldr	r3, [pc, #84]	@ (80058c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	429a      	cmp	r2, r3
 8005874:	d00d      	beq.n	8005892 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	441a      	add	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	e008      	b.n	80058a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005892:	4b0c      	ldr	r3, [pc, #48]	@ (80058c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	e003      	b.n	80058a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d002      	beq.n	80058b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058b2:	bf00      	nop
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	200049c4 	.word	0x200049c4
 80058c4:	200049cc 	.word	0x200049cc

080058c8 <memset>:
 80058c8:	4402      	add	r2, r0
 80058ca:	4603      	mov	r3, r0
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d100      	bne.n	80058d2 <memset+0xa>
 80058d0:	4770      	bx	lr
 80058d2:	f803 1b01 	strb.w	r1, [r3], #1
 80058d6:	e7f9      	b.n	80058cc <memset+0x4>

080058d8 <__libc_init_array>:
 80058d8:	b570      	push	{r4, r5, r6, lr}
 80058da:	4d0d      	ldr	r5, [pc, #52]	@ (8005910 <__libc_init_array+0x38>)
 80058dc:	4c0d      	ldr	r4, [pc, #52]	@ (8005914 <__libc_init_array+0x3c>)
 80058de:	1b64      	subs	r4, r4, r5
 80058e0:	10a4      	asrs	r4, r4, #2
 80058e2:	2600      	movs	r6, #0
 80058e4:	42a6      	cmp	r6, r4
 80058e6:	d109      	bne.n	80058fc <__libc_init_array+0x24>
 80058e8:	4d0b      	ldr	r5, [pc, #44]	@ (8005918 <__libc_init_array+0x40>)
 80058ea:	4c0c      	ldr	r4, [pc, #48]	@ (800591c <__libc_init_array+0x44>)
 80058ec:	f000 f826 	bl	800593c <_init>
 80058f0:	1b64      	subs	r4, r4, r5
 80058f2:	10a4      	asrs	r4, r4, #2
 80058f4:	2600      	movs	r6, #0
 80058f6:	42a6      	cmp	r6, r4
 80058f8:	d105      	bne.n	8005906 <__libc_init_array+0x2e>
 80058fa:	bd70      	pop	{r4, r5, r6, pc}
 80058fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005900:	4798      	blx	r3
 8005902:	3601      	adds	r6, #1
 8005904:	e7ee      	b.n	80058e4 <__libc_init_array+0xc>
 8005906:	f855 3b04 	ldr.w	r3, [r5], #4
 800590a:	4798      	blx	r3
 800590c:	3601      	adds	r6, #1
 800590e:	e7f2      	b.n	80058f6 <__libc_init_array+0x1e>
 8005910:	08005abc 	.word	0x08005abc
 8005914:	08005abc 	.word	0x08005abc
 8005918:	08005abc 	.word	0x08005abc
 800591c:	08005ac0 	.word	0x08005ac0

08005920 <memcpy>:
 8005920:	440a      	add	r2, r1
 8005922:	4291      	cmp	r1, r2
 8005924:	f100 33ff 	add.w	r3, r0, #4294967295
 8005928:	d100      	bne.n	800592c <memcpy+0xc>
 800592a:	4770      	bx	lr
 800592c:	b510      	push	{r4, lr}
 800592e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005932:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005936:	4291      	cmp	r1, r2
 8005938:	d1f9      	bne.n	800592e <memcpy+0xe>
 800593a:	bd10      	pop	{r4, pc}

0800593c <_init>:
 800593c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593e:	bf00      	nop
 8005940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005942:	bc08      	pop	{r3}
 8005944:	469e      	mov	lr, r3
 8005946:	4770      	bx	lr

08005948 <_fini>:
 8005948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594a:	bf00      	nop
 800594c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594e:	bc08      	pop	{r3}
 8005950:	469e      	mov	lr, r3
 8005952:	4770      	bx	lr
