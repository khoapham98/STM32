
prj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013c4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08001564  08001564  00002564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015dc  080015dc  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080015dc  080015dc  000025dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080015e4  080015e4  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015e4  080015e4  000025e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080015e8  080015e8  000025e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080015ec  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001648  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001648  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002887  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b15  00000000  00000000  00005913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000388  00000000  00000000  00006428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000284  00000000  00000000  000067b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014e62  00000000  00000000  00006a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000040bc  00000000  00000000  0001b896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082f3b  00000000  00000000  0001f952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a288d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001184  00000000  00000000  000a28d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000a3a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800154c 	.word	0x0800154c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800154c 	.word	0x0800154c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
void DWT_Init(void);
void DWT_Delay_us(volatile uint32_t microseconds);
uint8_t receive_data();

int main()
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	HAL_Init();
 8000296:	f000 fb3f 	bl	8000918 <HAL_Init>
	UART_Init();
 800029a:	f000 fa09 	bl	80006b0 <UART_Init>
	button_Init();
 800029e:	f000 f9e3 	bl	8000668 <button_Init>
	DHT11_Init();
 80002a2:	f000 f92b 	bl	80004fc <DHT11_Init>
	DWT_Init();
 80002a6:	f000 f943 	bl	8000530 <DWT_Init>
	uint8_t data[5] = {0};
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	711a      	strb	r2, [r3, #4]

	while (1)
	{
		// send start signal
		request();
 80002b2:	f000 f8ef 	bl	8000494 <request>
		// wait for response
		response();
 80002b6:	f000 f8ad 	bl	8000414 <response>
		// read data
		for (int i = 0; i < 5; i++)
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	e00b      	b.n	80002d8 <main+0x48>
		{
			data[i] = receive_data();
 80002c0:	f000 f836 	bl	8000330 <receive_data>
 80002c4:	4603      	mov	r3, r0
 80002c6:	4619      	mov	r1, r3
 80002c8:	1d3a      	adds	r2, r7, #4
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	4413      	add	r3, r2
 80002ce:	460a      	mov	r2, r1
 80002d0:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 5; i++)
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	3301      	adds	r3, #1
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	2b04      	cmp	r3, #4
 80002dc:	ddf0      	ble.n	80002c0 <main+0x30>
		}
		// check sum
		if ((data[0] + data[1] + data[2] + data[3]) != data[4])
 80002de:	793b      	ldrb	r3, [r7, #4]
 80002e0:	461a      	mov	r2, r3
 80002e2:	797b      	ldrb	r3, [r7, #5]
 80002e4:	4413      	add	r3, r2
 80002e6:	79ba      	ldrb	r2, [r7, #6]
 80002e8:	4413      	add	r3, r2
 80002ea:	79fa      	ldrb	r2, [r7, #7]
 80002ec:	4413      	add	r3, r2
 80002ee:	7a3a      	ldrb	r2, [r7, #8]
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d003      	beq.n	80002fc <main+0x6c>
		{
			USART_send_string("ERROR!\n");
 80002f4:	480b      	ldr	r0, [pc, #44]	@ (8000324 <main+0x94>)
 80002f6:	f000 f95b 	bl	80005b0 <USART_send_string>
 80002fa:	e00d      	b.n	8000318 <main+0x88>
		}
		else
		{
			USART_send_string("Humidity: %u,%u, ", data[0], data[1]);
 80002fc:	793b      	ldrb	r3, [r7, #4]
 80002fe:	4619      	mov	r1, r3
 8000300:	797b      	ldrb	r3, [r7, #5]
 8000302:	461a      	mov	r2, r3
 8000304:	4808      	ldr	r0, [pc, #32]	@ (8000328 <main+0x98>)
 8000306:	f000 f953 	bl	80005b0 <USART_send_string>
			USART_send_string("Temperature: %u,%u\n", data[2],data[3]);
 800030a:	79bb      	ldrb	r3, [r7, #6]
 800030c:	4619      	mov	r1, r3
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	461a      	mov	r2, r3
 8000312:	4806      	ldr	r0, [pc, #24]	@ (800032c <main+0x9c>)
 8000314:	f000 f94c 	bl	80005b0 <USART_send_string>
		}
		HAL_Delay(2000);
 8000318:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800031c:	f000 fb6e 	bl	80009fc <HAL_Delay>
		request();
 8000320:	e7c7      	b.n	80002b2 <main+0x22>
 8000322:	bf00      	nop
 8000324:	08001564 	.word	0x08001564
 8000328:	0800156c 	.word	0x0800156c
 800032c:	08001580 	.word	0x08001580

08000330 <receive_data>:
	}
	return 0;
}

uint8_t receive_data()
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
	uint8_t byte = 0;
 8000336:	2300      	movs	r3, #0
 8000338:	73fb      	strb	r3, [r7, #15]
	uint32_t* GPIOA_IDR = (uint32_t*) (GPIOA_BASE + 0x10);
 800033a:	4b35      	ldr	r3, [pc, #212]	@ (8000410 <receive_data+0xe0>)
 800033c:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 8; i++)
 800033e:	2300      	movs	r3, #0
 8000340:	60bb      	str	r3, [r7, #8]
 8000342:	e05d      	b.n	8000400 <receive_data+0xd0>
	{
		uint32_t timeout = 100;
 8000344:	2364      	movs	r3, #100	@ 0x64
 8000346:	607b      	str	r3, [r7, #4]
		while (((*GPIOA_IDR >> 9) & 1) == 1 && timeout--)
 8000348:	e002      	b.n	8000350 <receive_data+0x20>
		{
			DWT_Delay_us(1);
 800034a:	2001      	movs	r0, #1
 800034c:	f000 f90a 	bl	8000564 <DWT_Delay_us>
		while (((*GPIOA_IDR >> 9) & 1) == 1 && timeout--)
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	0a5b      	lsrs	r3, r3, #9
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d004      	beq.n	8000368 <receive_data+0x38>
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	1e5a      	subs	r2, r3, #1
 8000362:	607a      	str	r2, [r7, #4]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d1f0      	bne.n	800034a <receive_data+0x1a>
		}
		if (timeout == 0) {return 0xff;}
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d101      	bne.n	8000372 <receive_data+0x42>
 800036e:	23ff      	movs	r3, #255	@ 0xff
 8000370:	e04a      	b.n	8000408 <receive_data+0xd8>


		timeout = 100;
 8000372:	2364      	movs	r3, #100	@ 0x64
 8000374:	607b      	str	r3, [r7, #4]
		while (((*GPIOA_IDR >> 9) & 1) == 0 && timeout--)
 8000376:	e002      	b.n	800037e <receive_data+0x4e>
		{
			DWT_Delay_us(1);
 8000378:	2001      	movs	r0, #1
 800037a:	f000 f8f3 	bl	8000564 <DWT_Delay_us>
		while (((*GPIOA_IDR >> 9) & 1) == 0 && timeout--)
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	0a5b      	lsrs	r3, r3, #9
 8000384:	f003 0301 	and.w	r3, r3, #1
 8000388:	2b00      	cmp	r3, #0
 800038a:	d104      	bne.n	8000396 <receive_data+0x66>
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	1e5a      	subs	r2, r3, #1
 8000390:	607a      	str	r2, [r7, #4]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d1f0      	bne.n	8000378 <receive_data+0x48>
		}
		if (timeout == 0) {return 0xff;}
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d101      	bne.n	80003a0 <receive_data+0x70>
 800039c:	23ff      	movs	r3, #255	@ 0xff
 800039e:	e033      	b.n	8000408 <receive_data+0xd8>

		DWT_Delay_us(30);
 80003a0:	201e      	movs	r0, #30
 80003a2:	f000 f8df 	bl	8000564 <DWT_Delay_us>
		if (((*GPIOA_IDR >> 9) & 1) == 1)
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	0a5b      	lsrs	r3, r3, #9
 80003ac:	f003 0301 	and.w	r3, r3, #1
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d008      	beq.n	80003c6 <receive_data+0x96>
		{
			byte = (byte << 1) | 0x01;
 80003b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	b25b      	sxtb	r3, r3
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	b25b      	sxtb	r3, r3
 80003c2:	73fb      	strb	r3, [r7, #15]
 80003c4:	e002      	b.n	80003cc <receive_data+0x9c>
		}
		else
		{
			byte = byte << 1;
 80003c6:	7bfb      	ldrb	r3, [r7, #15]
 80003c8:	005b      	lsls	r3, r3, #1
 80003ca:	73fb      	strb	r3, [r7, #15]
		}

		timeout = 100;
 80003cc:	2364      	movs	r3, #100	@ 0x64
 80003ce:	607b      	str	r3, [r7, #4]
		while (((*GPIOA_IDR >> 9) & 1) == 1 && timeout--)
 80003d0:	e002      	b.n	80003d8 <receive_data+0xa8>
		{
			DWT_Delay_us(1);
 80003d2:	2001      	movs	r0, #1
 80003d4:	f000 f8c6 	bl	8000564 <DWT_Delay_us>
		while (((*GPIOA_IDR >> 9) & 1) == 1 && timeout--)
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	0a5b      	lsrs	r3, r3, #9
 80003de:	f003 0301 	and.w	r3, r3, #1
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d004      	beq.n	80003f0 <receive_data+0xc0>
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	1e5a      	subs	r2, r3, #1
 80003ea:	607a      	str	r2, [r7, #4]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d1f0      	bne.n	80003d2 <receive_data+0xa2>
		}
		if (timeout == 0) {return 0xff;}
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d101      	bne.n	80003fa <receive_data+0xca>
 80003f6:	23ff      	movs	r3, #255	@ 0xff
 80003f8:	e006      	b.n	8000408 <receive_data+0xd8>
	for (int i = 0; i < 8; i++)
 80003fa:	68bb      	ldr	r3, [r7, #8]
 80003fc:	3301      	adds	r3, #1
 80003fe:	60bb      	str	r3, [r7, #8]
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	2b07      	cmp	r3, #7
 8000404:	dd9e      	ble.n	8000344 <receive_data+0x14>
	}
	return byte;
 8000406:	7bfb      	ldrb	r3, [r7, #15]
}
 8000408:	4618      	mov	r0, r3
 800040a:	3710      	adds	r7, #16
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40020010 	.word	0x40020010

08000414 <response>:

void response()
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
	uint32_t* GPIOA_IDR = (uint32_t*) (GPIOA_BASE + 0x10);
 800041a:	4b1c      	ldr	r3, [pc, #112]	@ (800048c <response+0x78>)
 800041c:	603b      	str	r3, [r7, #0]
	uint32_t timeout = 1000;
 800041e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000422:	607b      	str	r3, [r7, #4]
	while (((*GPIOA_IDR >> 9) & 1) == 1 && timeout--) { DWT_Delay_us(1); }
 8000424:	e002      	b.n	800042c <response+0x18>
 8000426:	2001      	movs	r0, #1
 8000428:	f000 f89c 	bl	8000564 <DWT_Delay_us>
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	0a5b      	lsrs	r3, r3, #9
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	2b00      	cmp	r3, #0
 8000438:	d004      	beq.n	8000444 <response+0x30>
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	1e5a      	subs	r2, r3, #1
 800043e:	607a      	str	r2, [r7, #4]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d1f0      	bne.n	8000426 <response+0x12>
	if (timeout == 0)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d103      	bne.n	8000452 <response+0x3e>
	{
		USART_send_string("DHT11 not response!\n");
 800044a:	4811      	ldr	r0, [pc, #68]	@ (8000490 <response+0x7c>)
 800044c:	f000 f8b0 	bl	80005b0 <USART_send_string>
		return;
 8000450:	e019      	b.n	8000486 <response+0x72>
	}

	timeout = 1000;
 8000452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000456:	607b      	str	r3, [r7, #4]
	while (((*GPIOA_IDR >> 9) & 1) == 0 && timeout--) { DWT_Delay_us(1); }
 8000458:	e002      	b.n	8000460 <response+0x4c>
 800045a:	2001      	movs	r0, #1
 800045c:	f000 f882 	bl	8000564 <DWT_Delay_us>
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	0a5b      	lsrs	r3, r3, #9
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	2b00      	cmp	r3, #0
 800046c:	d104      	bne.n	8000478 <response+0x64>
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	1e5a      	subs	r2, r3, #1
 8000472:	607a      	str	r2, [r7, #4]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d1f0      	bne.n	800045a <response+0x46>
	if (timeout == 0)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d103      	bne.n	8000486 <response+0x72>
	{
		USART_send_string("DHT11 not response!\n");
 800047e:	4804      	ldr	r0, [pc, #16]	@ (8000490 <response+0x7c>)
 8000480:	f000 f896 	bl	80005b0 <USART_send_string>
		return;
 8000484:	bf00      	nop
	}
}
 8000486:	3708      	adds	r7, #8
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40020010 	.word	0x40020010
 8000490:	08001594 	.word	0x08001594

08000494 <request>:

void request()
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
	uint32_t* GPIOA_MODER = (uint32_t*) (GPIOA_BASE + 0x00);
 800049a:	4b16      	ldr	r3, [pc, #88]	@ (80004f4 <request+0x60>)
 800049c:	607b      	str	r3, [r7, #4]
	*GPIOA_MODER &= ~(0b11 << 18);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER |= (0b01 << 18);	// set pin PA9 as OUTPUT
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	601a      	str	r2, [r3, #0]

	uint32_t* GPIOA_ODR = (uint32_t*) (GPIOA_BASE + 0x14);
 80004b6:	4b10      	ldr	r3, [pc, #64]	@ (80004f8 <request+0x64>)
 80004b8:	603b      	str	r3, [r7, #0]

	// set PA9 to LOW
	*GPIOA_ODR &= ~(1 << 9);
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 80004c6:	2014      	movs	r0, #20
 80004c8:	f000 fa98 	bl	80009fc <HAL_Delay>

	// set PA9 to HIGH
	*GPIOA_ODR |= (1 << 9);
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	601a      	str	r2, [r3, #0]
	DWT_Delay_us(30);
 80004d8:	201e      	movs	r0, #30
 80004da:	f000 f843 	bl	8000564 <DWT_Delay_us>

	*GPIOA_MODER &= ~(0b11 << 18);	// set pin PA9 as INPUT
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	601a      	str	r2, [r3, #0]
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40020000 	.word	0x40020000
 80004f8:	40020014 	.word	0x40020014

080004fc <DHT11_Init>:

void DHT11_Init()
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	4b09      	ldr	r3, [pc, #36]	@ (800052c <DHT11_Init+0x30>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050a:	4a08      	ldr	r2, [pc, #32]	@ (800052c <DHT11_Init+0x30>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6313      	str	r3, [r2, #48]	@ 0x30
 8000512:	4b06      	ldr	r3, [pc, #24]	@ (800052c <DHT11_Init+0x30>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40023800 	.word	0x40023800

08000530 <DWT_Init>:

void DWT_Init(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Bật Trace
 8000534:	4b09      	ldr	r3, [pc, #36]	@ (800055c <DWT_Init+0x2c>)
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	4a08      	ldr	r2, [pc, #32]	@ (800055c <DWT_Init+0x2c>)
 800053a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800053e:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 8000540:	4b07      	ldr	r3, [pc, #28]	@ (8000560 <DWT_Init+0x30>)
 8000542:	2200      	movs	r2, #0
 8000544:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // Enable DWT
 8000546:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <DWT_Init+0x30>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a05      	ldr	r2, [pc, #20]	@ (8000560 <DWT_Init+0x30>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6013      	str	r3, [r2, #0]
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	e000edf0 	.word	0xe000edf0
 8000560:	e0001000 	.word	0xe0001000

08000564 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
    uint32_t clk_cycle_start = DWT->CYCCNT;
 800056c:	4b0d      	ldr	r3, [pc, #52]	@ (80005a4 <DWT_Delay_us+0x40>)
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	60fb      	str	r3, [r7, #12]
    microseconds *= (SystemCoreClock / 1000000);
 8000572:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <DWT_Delay_us+0x44>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a0d      	ldr	r2, [pc, #52]	@ (80005ac <DWT_Delay_us+0x48>)
 8000578:	fba2 2303 	umull	r2, r3, r2, r3
 800057c:	0c9b      	lsrs	r3, r3, #18
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	fb02 f303 	mul.w	r3, r2, r3
 8000584:	607b      	str	r3, [r7, #4]
    while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000586:	bf00      	nop
 8000588:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <DWT_Delay_us+0x40>)
 800058a:	685a      	ldr	r2, [r3, #4]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	1ad2      	subs	r2, r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	429a      	cmp	r2, r3
 8000594:	d3f8      	bcc.n	8000588 <DWT_Delay_us+0x24>
}
 8000596:	bf00      	nop
 8000598:	bf00      	nop
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	e0001000 	.word	0xe0001000
 80005a8:	20000000 	.word	0x20000000
 80005ac:	431bde83 	.word	0x431bde83

080005b0 <USART_send_string>:


void USART_send_string(char* str, ...)
{
 80005b0:	b40f      	push	{r0, r1, r2, r3}
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b0a4      	sub	sp, #144	@ 0x90
 80005b6:	af00      	add	r7, sp, #0
	va_list list;
	va_start(list, str);
 80005b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80005bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	char print_buf[128] = { 0 };
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2280      	movs	r2, #128	@ 0x80
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fb42 	bl	8000c50 <memset>
	vsprintf(print_buf, str, list);
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80005d2:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fb30 	bl	8000c3c <vsiprintf>
	int len = strlen(print_buf);
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff fdfe 	bl	80001e0 <strlen>
 80005e4:	4603      	mov	r3, r0
 80005e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	for(int i = 0; i < len; i++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80005f0:	e00c      	b.n	800060c <USART_send_string+0x5c>
	{
		USART_send(print_buf[i]);
 80005f2:	1d3a      	adds	r2, r7, #4
 80005f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80005f8:	4413      	add	r3, r2
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f813 	bl	8000628 <USART_send>
	for(int i = 0; i < len; i++)
 8000602:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000606:	3301      	adds	r3, #1
 8000608:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800060c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000610:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000614:	429a      	cmp	r2, r3
 8000616:	dbec      	blt.n	80005f2 <USART_send_string+0x42>
	}
	va_end(list);
}
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	3790      	adds	r7, #144	@ 0x90
 800061e:	46bd      	mov	sp, r7
 8000620:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <USART_send>:

void USART_send(uint8_t data)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
	uint32_t* USART6_DR = (uint32_t*) (USART6_BASE + 0x04);
 8000632:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <USART_send+0x38>)
 8000634:	60fb      	str	r3, [r7, #12]
	uint32_t* USART6_SR = (uint32_t*) (USART6_BASE + 0x00);
 8000636:	4b0b      	ldr	r3, [pc, #44]	@ (8000664 <USART_send+0x3c>)
 8000638:	60bb      	str	r3, [r7, #8]
	*USART6_DR = data;
 800063a:	79fa      	ldrb	r2, [r7, #7]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	601a      	str	r2, [r3, #0]
	while (((*USART6_SR >> 7) & 1) == 0);
 8000640:	bf00      	nop
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	09db      	lsrs	r3, r3, #7
 8000648:	f003 0301 	and.w	r3, r3, #1
 800064c:	2b00      	cmp	r3, #0
 800064e:	d0f8      	beq.n	8000642 <USART_send+0x1a>
}
 8000650:	bf00      	nop
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40011404 	.word	0x40011404
 8000664:	40011400 	.word	0x40011400

08000668 <button_Init>:
	if ((*GPIOA_IDR & 1) == 1) { return 1;}
	return 0;
}

void button_Init()
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	4b0d      	ldr	r3, [pc, #52]	@ (80006a8 <button_Init+0x40>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a0c      	ldr	r2, [pc, #48]	@ (80006a8 <button_Init+0x40>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b0a      	ldr	r3, [pc, #40]	@ (80006a8 <button_Init+0x40>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]
	uint32_t* GPIOA_MODER = (uint32_t*) (GPIOA_BASE + 0x00);
 800068a:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <button_Init+0x44>)
 800068c:	607b      	str	r3, [r7, #4]
	*GPIOA_MODER &= ~(0b11 << 0);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f023 0203 	bic.w	r2, r3, #3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	601a      	str	r2, [r3, #0]
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40020000 	.word	0x40020000

080006b0 <UART_Init>:

void UART_Init()
{
 80006b0:	b480      	push	{r7}
 80006b2:	b087      	sub	sp, #28
 80006b4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000770 <UART_Init+0xc0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a2c      	ldr	r2, [pc, #176]	@ (8000770 <UART_Init+0xc0>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000770 <UART_Init+0xc0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
	uint32_t* GPIOC_MODER = (uint32_t*) (GPIOC_BASE + 0x00);
 80006d2:	4b28      	ldr	r3, [pc, #160]	@ (8000774 <UART_Init+0xc4>)
 80006d4:	617b      	str	r3, [r7, #20]
	uint32_t* GPIOC_AFRL = (uint32_t*) (GPIOC_BASE + 0x20);
 80006d6:	4b28      	ldr	r3, [pc, #160]	@ (8000778 <UART_Init+0xc8>)
 80006d8:	613b      	str	r3, [r7, #16]
	*GPIOC_MODER &= ~(0b1111 << 12);
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	601a      	str	r2, [r3, #0]
	*GPIOC_MODER |= (0b1010 << 12);
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f443 4220 	orr.w	r2, r3, #40960	@ 0xa000
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	601a      	str	r2, [r3, #0]
	*GPIOC_AFRL &= ~(0xff << 24);
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	601a      	str	r2, [r3, #0]
	*GPIOC_AFRL = (0b1000 << 24) | (0b1000 << 28);
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	f04f 4208 	mov.w	r2, #2281701376	@ 0x88000000
 8000704:	601a      	str	r2, [r3, #0]

	__HAL_RCC_USART6_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <UART_Init+0xc0>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800070e:	4a18      	ldr	r2, [pc, #96]	@ (8000770 <UART_Init+0xc0>)
 8000710:	f043 0320 	orr.w	r3, r3, #32
 8000714:	6453      	str	r3, [r2, #68]	@ 0x44
 8000716:	4b16      	ldr	r3, [pc, #88]	@ (8000770 <UART_Init+0xc0>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071a:	f003 0320 	and.w	r3, r3, #32
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]
	uint32_t* USART6_CR1 = (uint32_t*) (USART6_BASE + 0x0C);
 8000722:	4b16      	ldr	r3, [pc, #88]	@ (800077c <UART_Init+0xcc>)
 8000724:	60fb      	str	r3, [r7, #12]
	uint32_t* USART6_BRR = (uint32_t*) (USART6_BASE + 0x08);
 8000726:	4b16      	ldr	r3, [pc, #88]	@ (8000780 <UART_Init+0xd0>)
 8000728:	60bb      	str	r3, [r7, #8]
	*USART6_CR1 &= ~(0b1 << 12); // set word length = 8 data bits
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	601a      	str	r2, [r3, #0]
	*USART6_CR1 &= ~(0b1 << 10); // disable parity control
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	601a      	str	r2, [r3, #0]
	*USART6_CR1 |= (0b11 << 2);  // enable transmitter and receiver
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f043 020c 	orr.w	r2, r3, #12
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	601a      	str	r2, [r3, #0]
	*USART6_BRR = (104 << 4) | (3 << 0); // set baud rate = 9600bps
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	f240 6283 	movw	r2, #1667	@ 0x683
 8000754:	601a      	str	r2, [r3, #0]
	*USART6_CR1 |= (0b1 << 13);  // enable USART
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	601a      	str	r2, [r3, #0]
}
 8000762:	bf00      	nop
 8000764:	371c      	adds	r7, #28
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40020800 	.word	0x40020800
 8000778:	40020820 	.word	0x40020820
 800077c:	4001140c 	.word	0x4001140c
 8000780:	40011408 	.word	0x40011408

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <HAL_MspInit+0x4c>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000792:	4a0f      	ldr	r2, [pc, #60]	@ (80007d0 <HAL_MspInit+0x4c>)
 8000794:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000798:	6453      	str	r3, [r2, #68]	@ 0x44
 800079a:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <HAL_MspInit+0x4c>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800079e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <HAL_MspInit+0x4c>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ae:	4a08      	ldr	r2, [pc, #32]	@ (80007d0 <HAL_MspInit+0x4c>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <HAL_MspInit+0x4c>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800

080007d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <NMI_Handler+0x4>

080007dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <HardFault_Handler+0x4>

080007e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <MemManage_Handler+0x4>

080007ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <BusFault_Handler+0x4>

080007f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <UsageFault_Handler+0x4>

080007fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082a:	f000 f8c7 	bl	80009bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800083c:	4a14      	ldr	r2, [pc, #80]	@ (8000890 <_sbrk+0x5c>)
 800083e:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <_sbrk+0x60>)
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000848:	4b13      	ldr	r3, [pc, #76]	@ (8000898 <_sbrk+0x64>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d102      	bne.n	8000856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000850:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <_sbrk+0x64>)
 8000852:	4a12      	ldr	r2, [pc, #72]	@ (800089c <_sbrk+0x68>)
 8000854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000856:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <_sbrk+0x64>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4413      	add	r3, r2
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	429a      	cmp	r2, r3
 8000862:	d207      	bcs.n	8000874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000864:	f000 f9fc 	bl	8000c60 <__errno>
 8000868:	4603      	mov	r3, r0
 800086a:	220c      	movs	r2, #12
 800086c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
 8000872:	e009      	b.n	8000888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000874:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <_sbrk+0x64>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800087a:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <_sbrk+0x64>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	4a05      	ldr	r2, [pc, #20]	@ (8000898 <_sbrk+0x64>)
 8000884:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000886:	68fb      	ldr	r3, [r7, #12]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20020000 	.word	0x20020000
 8000894:	00000400 	.word	0x00000400
 8000898:	20000078 	.word	0x20000078
 800089c:	200001c8 	.word	0x200001c8

080008a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <SystemInit+0x20>)
 80008a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008aa:	4a05      	ldr	r2, [pc, #20]	@ (80008c0 <SystemInit+0x20>)
 80008ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 80008c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008c8:	f7ff ffea 	bl	80008a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008cc:	480c      	ldr	r0, [pc, #48]	@ (8000900 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ce:	490d      	ldr	r1, [pc, #52]	@ (8000904 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000908 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d4:	e002      	b.n	80008dc <LoopCopyDataInit>

080008d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008da:	3304      	adds	r3, #4

080008dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e0:	d3f9      	bcc.n	80008d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e2:	4a0a      	ldr	r2, [pc, #40]	@ (800090c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000910 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e8:	e001      	b.n	80008ee <LoopFillZerobss>

080008ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ec:	3204      	adds	r2, #4

080008ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f0:	d3fb      	bcc.n	80008ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008f2:	f000 f9bb 	bl	8000c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008f6:	f7ff fccb 	bl	8000290 <main>
  bx  lr    
 80008fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000904:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000908:	080015ec 	.word	0x080015ec
  ldr r2, =_sbss
 800090c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000910:	200001c8 	.word	0x200001c8

08000914 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000914:	e7fe      	b.n	8000914 <ADC_IRQHandler>
	...

08000918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800091c:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <HAL_Init+0x40>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a0d      	ldr	r2, [pc, #52]	@ (8000958 <HAL_Init+0x40>)
 8000922:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000926:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000928:	4b0b      	ldr	r3, [pc, #44]	@ (8000958 <HAL_Init+0x40>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0a      	ldr	r2, [pc, #40]	@ (8000958 <HAL_Init+0x40>)
 800092e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000932:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000934:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <HAL_Init+0x40>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a07      	ldr	r2, [pc, #28]	@ (8000958 <HAL_Init+0x40>)
 800093a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800093e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000940:	2003      	movs	r0, #3
 8000942:	f000 f931 	bl	8000ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000946:	200f      	movs	r0, #15
 8000948:	f000 f808 	bl	800095c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800094c:	f7ff ff1a 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023c00 	.word	0x40023c00

0800095c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000964:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <HAL_InitTick+0x54>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <HAL_InitTick+0x58>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4619      	mov	r1, r3
 800096e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000972:	fbb3 f3f1 	udiv	r3, r3, r1
 8000976:	fbb2 f3f3 	udiv	r3, r2, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f93b 	bl	8000bf6 <HAL_SYSTICK_Config>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	e00e      	b.n	80009a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b0f      	cmp	r3, #15
 800098e:	d80a      	bhi.n	80009a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000990:	2200      	movs	r2, #0
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	f04f 30ff 	mov.w	r0, #4294967295
 8000998:	f000 f911 	bl	8000bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800099c:	4a06      	ldr	r2, [pc, #24]	@ (80009b8 <HAL_InitTick+0x5c>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a2:	2300      	movs	r3, #0
 80009a4:	e000      	b.n	80009a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000000 	.word	0x20000000
 80009b4:	20000008 	.word	0x20000008
 80009b8:	20000004 	.word	0x20000004

080009bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <HAL_IncTick+0x20>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <HAL_IncTick+0x24>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	4a04      	ldr	r2, [pc, #16]	@ (80009e0 <HAL_IncTick+0x24>)
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000008 	.word	0x20000008
 80009e0:	2000007c 	.word	0x2000007c

080009e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b03      	ldr	r3, [pc, #12]	@ (80009f8 <HAL_GetTick+0x14>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	2000007c 	.word	0x2000007c

080009fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a04:	f7ff ffee 	bl	80009e4 <HAL_GetTick>
 8000a08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a14:	d005      	beq.n	8000a22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a16:	4b0a      	ldr	r3, [pc, #40]	@ (8000a40 <HAL_Delay+0x44>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	4413      	add	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a22:	bf00      	nop
 8000a24:	f7ff ffde 	bl	80009e4 <HAL_GetTick>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d8f7      	bhi.n	8000a24 <HAL_Delay+0x28>
  {
  }
}
 8000a34:	bf00      	nop
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000008 	.word	0x20000008

08000a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a60:	4013      	ands	r3, r2
 8000a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a76:	4a04      	ldr	r2, [pc, #16]	@ (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	60d3      	str	r3, [r2, #12]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a90:	4b04      	ldr	r3, [pc, #16]	@ (8000aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	f003 0307 	and.w	r3, r3, #7
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	db0a      	blt.n	8000ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	490c      	ldr	r1, [pc, #48]	@ (8000af4 <__NVIC_SetPriority+0x4c>)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	0112      	lsls	r2, r2, #4
 8000ac8:	b2d2      	uxtb	r2, r2
 8000aca:	440b      	add	r3, r1
 8000acc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad0:	e00a      	b.n	8000ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4908      	ldr	r1, [pc, #32]	@ (8000af8 <__NVIC_SetPriority+0x50>)
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	f003 030f 	and.w	r3, r3, #15
 8000ade:	3b04      	subs	r3, #4
 8000ae0:	0112      	lsls	r2, r2, #4
 8000ae2:	b2d2      	uxtb	r2, r2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	761a      	strb	r2, [r3, #24]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000e100 	.word	0xe000e100
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b089      	sub	sp, #36	@ 0x24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	f1c3 0307 	rsb	r3, r3, #7
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	bf28      	it	cs
 8000b1a:	2304      	movcs	r3, #4
 8000b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3304      	adds	r3, #4
 8000b22:	2b06      	cmp	r3, #6
 8000b24:	d902      	bls.n	8000b2c <NVIC_EncodePriority+0x30>
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3b03      	subs	r3, #3
 8000b2a:	e000      	b.n	8000b2e <NVIC_EncodePriority+0x32>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	f04f 32ff 	mov.w	r2, #4294967295
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43da      	mvns	r2, r3
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	401a      	ands	r2, r3
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b44:	f04f 31ff 	mov.w	r1, #4294967295
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4e:	43d9      	mvns	r1, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	4313      	orrs	r3, r2
         );
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3724      	adds	r7, #36	@ 0x24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b74:	d301      	bcc.n	8000b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00f      	b.n	8000b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba4 <SysTick_Config+0x40>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b82:	210f      	movs	r1, #15
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f7ff ff8e 	bl	8000aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ba4 <SysTick_Config+0x40>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b92:	4b04      	ldr	r3, [pc, #16]	@ (8000ba4 <SysTick_Config+0x40>)
 8000b94:	2207      	movs	r2, #7
 8000b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	e000e010 	.word	0xe000e010

08000ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ff47 	bl	8000a44 <__NVIC_SetPriorityGrouping>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b086      	sub	sp, #24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd0:	f7ff ff5c 	bl	8000a8c <__NVIC_GetPriorityGrouping>
 8000bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	6978      	ldr	r0, [r7, #20]
 8000bdc:	f7ff ff8e 	bl	8000afc <NVIC_EncodePriority>
 8000be0:	4602      	mov	r2, r0
 8000be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be6:	4611      	mov	r1, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff5d 	bl	8000aa8 <__NVIC_SetPriority>
}
 8000bee:	bf00      	nop
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ffb0 	bl	8000b64 <SysTick_Config>
 8000c04:	4603      	mov	r3, r0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <_vsiprintf_r>:
 8000c10:	b510      	push	{r4, lr}
 8000c12:	b09a      	sub	sp, #104	@ 0x68
 8000c14:	2400      	movs	r4, #0
 8000c16:	9100      	str	r1, [sp, #0]
 8000c18:	9104      	str	r1, [sp, #16]
 8000c1a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000c1e:	9105      	str	r1, [sp, #20]
 8000c20:	9102      	str	r1, [sp, #8]
 8000c22:	4905      	ldr	r1, [pc, #20]	@ (8000c38 <_vsiprintf_r+0x28>)
 8000c24:	9103      	str	r1, [sp, #12]
 8000c26:	4669      	mov	r1, sp
 8000c28:	9419      	str	r4, [sp, #100]	@ 0x64
 8000c2a:	f000 f999 	bl	8000f60 <_svfiprintf_r>
 8000c2e:	9b00      	ldr	r3, [sp, #0]
 8000c30:	701c      	strb	r4, [r3, #0]
 8000c32:	b01a      	add	sp, #104	@ 0x68
 8000c34:	bd10      	pop	{r4, pc}
 8000c36:	bf00      	nop
 8000c38:	ffff0208 	.word	0xffff0208

08000c3c <vsiprintf>:
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	460a      	mov	r2, r1
 8000c40:	4601      	mov	r1, r0
 8000c42:	4802      	ldr	r0, [pc, #8]	@ (8000c4c <vsiprintf+0x10>)
 8000c44:	6800      	ldr	r0, [r0, #0]
 8000c46:	f7ff bfe3 	b.w	8000c10 <_vsiprintf_r>
 8000c4a:	bf00      	nop
 8000c4c:	2000000c 	.word	0x2000000c

08000c50 <memset>:
 8000c50:	4402      	add	r2, r0
 8000c52:	4603      	mov	r3, r0
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d100      	bne.n	8000c5a <memset+0xa>
 8000c58:	4770      	bx	lr
 8000c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8000c5e:	e7f9      	b.n	8000c54 <memset+0x4>

08000c60 <__errno>:
 8000c60:	4b01      	ldr	r3, [pc, #4]	@ (8000c68 <__errno+0x8>)
 8000c62:	6818      	ldr	r0, [r3, #0]
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	2000000c 	.word	0x2000000c

08000c6c <__libc_init_array>:
 8000c6c:	b570      	push	{r4, r5, r6, lr}
 8000c6e:	4d0d      	ldr	r5, [pc, #52]	@ (8000ca4 <__libc_init_array+0x38>)
 8000c70:	4c0d      	ldr	r4, [pc, #52]	@ (8000ca8 <__libc_init_array+0x3c>)
 8000c72:	1b64      	subs	r4, r4, r5
 8000c74:	10a4      	asrs	r4, r4, #2
 8000c76:	2600      	movs	r6, #0
 8000c78:	42a6      	cmp	r6, r4
 8000c7a:	d109      	bne.n	8000c90 <__libc_init_array+0x24>
 8000c7c:	4d0b      	ldr	r5, [pc, #44]	@ (8000cac <__libc_init_array+0x40>)
 8000c7e:	4c0c      	ldr	r4, [pc, #48]	@ (8000cb0 <__libc_init_array+0x44>)
 8000c80:	f000 fc64 	bl	800154c <_init>
 8000c84:	1b64      	subs	r4, r4, r5
 8000c86:	10a4      	asrs	r4, r4, #2
 8000c88:	2600      	movs	r6, #0
 8000c8a:	42a6      	cmp	r6, r4
 8000c8c:	d105      	bne.n	8000c9a <__libc_init_array+0x2e>
 8000c8e:	bd70      	pop	{r4, r5, r6, pc}
 8000c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c94:	4798      	blx	r3
 8000c96:	3601      	adds	r6, #1
 8000c98:	e7ee      	b.n	8000c78 <__libc_init_array+0xc>
 8000c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c9e:	4798      	blx	r3
 8000ca0:	3601      	adds	r6, #1
 8000ca2:	e7f2      	b.n	8000c8a <__libc_init_array+0x1e>
 8000ca4:	080015e4 	.word	0x080015e4
 8000ca8:	080015e4 	.word	0x080015e4
 8000cac:	080015e4 	.word	0x080015e4
 8000cb0:	080015e8 	.word	0x080015e8

08000cb4 <__retarget_lock_acquire_recursive>:
 8000cb4:	4770      	bx	lr

08000cb6 <__retarget_lock_release_recursive>:
 8000cb6:	4770      	bx	lr

08000cb8 <_free_r>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	4605      	mov	r5, r0
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	d041      	beq.n	8000d44 <_free_r+0x8c>
 8000cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000cc4:	1f0c      	subs	r4, r1, #4
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	bfb8      	it	lt
 8000cca:	18e4      	addlt	r4, r4, r3
 8000ccc:	f000 f8e0 	bl	8000e90 <__malloc_lock>
 8000cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8000d48 <_free_r+0x90>)
 8000cd2:	6813      	ldr	r3, [r2, #0]
 8000cd4:	b933      	cbnz	r3, 8000ce4 <_free_r+0x2c>
 8000cd6:	6063      	str	r3, [r4, #4]
 8000cd8:	6014      	str	r4, [r2, #0]
 8000cda:	4628      	mov	r0, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b8dc 	b.w	8000e9c <__malloc_unlock>
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	d908      	bls.n	8000cfa <_free_r+0x42>
 8000ce8:	6820      	ldr	r0, [r4, #0]
 8000cea:	1821      	adds	r1, r4, r0
 8000cec:	428b      	cmp	r3, r1
 8000cee:	bf01      	itttt	eq
 8000cf0:	6819      	ldreq	r1, [r3, #0]
 8000cf2:	685b      	ldreq	r3, [r3, #4]
 8000cf4:	1809      	addeq	r1, r1, r0
 8000cf6:	6021      	streq	r1, [r4, #0]
 8000cf8:	e7ed      	b.n	8000cd6 <_free_r+0x1e>
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	b10b      	cbz	r3, 8000d04 <_free_r+0x4c>
 8000d00:	42a3      	cmp	r3, r4
 8000d02:	d9fa      	bls.n	8000cfa <_free_r+0x42>
 8000d04:	6811      	ldr	r1, [r2, #0]
 8000d06:	1850      	adds	r0, r2, r1
 8000d08:	42a0      	cmp	r0, r4
 8000d0a:	d10b      	bne.n	8000d24 <_free_r+0x6c>
 8000d0c:	6820      	ldr	r0, [r4, #0]
 8000d0e:	4401      	add	r1, r0
 8000d10:	1850      	adds	r0, r2, r1
 8000d12:	4283      	cmp	r3, r0
 8000d14:	6011      	str	r1, [r2, #0]
 8000d16:	d1e0      	bne.n	8000cda <_free_r+0x22>
 8000d18:	6818      	ldr	r0, [r3, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	6053      	str	r3, [r2, #4]
 8000d1e:	4408      	add	r0, r1
 8000d20:	6010      	str	r0, [r2, #0]
 8000d22:	e7da      	b.n	8000cda <_free_r+0x22>
 8000d24:	d902      	bls.n	8000d2c <_free_r+0x74>
 8000d26:	230c      	movs	r3, #12
 8000d28:	602b      	str	r3, [r5, #0]
 8000d2a:	e7d6      	b.n	8000cda <_free_r+0x22>
 8000d2c:	6820      	ldr	r0, [r4, #0]
 8000d2e:	1821      	adds	r1, r4, r0
 8000d30:	428b      	cmp	r3, r1
 8000d32:	bf04      	itt	eq
 8000d34:	6819      	ldreq	r1, [r3, #0]
 8000d36:	685b      	ldreq	r3, [r3, #4]
 8000d38:	6063      	str	r3, [r4, #4]
 8000d3a:	bf04      	itt	eq
 8000d3c:	1809      	addeq	r1, r1, r0
 8000d3e:	6021      	streq	r1, [r4, #0]
 8000d40:	6054      	str	r4, [r2, #4]
 8000d42:	e7ca      	b.n	8000cda <_free_r+0x22>
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop
 8000d48:	200001c4 	.word	0x200001c4

08000d4c <sbrk_aligned>:
 8000d4c:	b570      	push	{r4, r5, r6, lr}
 8000d4e:	4e0f      	ldr	r6, [pc, #60]	@ (8000d8c <sbrk_aligned+0x40>)
 8000d50:	460c      	mov	r4, r1
 8000d52:	6831      	ldr	r1, [r6, #0]
 8000d54:	4605      	mov	r5, r0
 8000d56:	b911      	cbnz	r1, 8000d5e <sbrk_aligned+0x12>
 8000d58:	f000 fba4 	bl	80014a4 <_sbrk_r>
 8000d5c:	6030      	str	r0, [r6, #0]
 8000d5e:	4621      	mov	r1, r4
 8000d60:	4628      	mov	r0, r5
 8000d62:	f000 fb9f 	bl	80014a4 <_sbrk_r>
 8000d66:	1c43      	adds	r3, r0, #1
 8000d68:	d103      	bne.n	8000d72 <sbrk_aligned+0x26>
 8000d6a:	f04f 34ff 	mov.w	r4, #4294967295
 8000d6e:	4620      	mov	r0, r4
 8000d70:	bd70      	pop	{r4, r5, r6, pc}
 8000d72:	1cc4      	adds	r4, r0, #3
 8000d74:	f024 0403 	bic.w	r4, r4, #3
 8000d78:	42a0      	cmp	r0, r4
 8000d7a:	d0f8      	beq.n	8000d6e <sbrk_aligned+0x22>
 8000d7c:	1a21      	subs	r1, r4, r0
 8000d7e:	4628      	mov	r0, r5
 8000d80:	f000 fb90 	bl	80014a4 <_sbrk_r>
 8000d84:	3001      	adds	r0, #1
 8000d86:	d1f2      	bne.n	8000d6e <sbrk_aligned+0x22>
 8000d88:	e7ef      	b.n	8000d6a <sbrk_aligned+0x1e>
 8000d8a:	bf00      	nop
 8000d8c:	200001c0 	.word	0x200001c0

08000d90 <_malloc_r>:
 8000d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d94:	1ccd      	adds	r5, r1, #3
 8000d96:	f025 0503 	bic.w	r5, r5, #3
 8000d9a:	3508      	adds	r5, #8
 8000d9c:	2d0c      	cmp	r5, #12
 8000d9e:	bf38      	it	cc
 8000da0:	250c      	movcc	r5, #12
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	4606      	mov	r6, r0
 8000da6:	db01      	blt.n	8000dac <_malloc_r+0x1c>
 8000da8:	42a9      	cmp	r1, r5
 8000daa:	d904      	bls.n	8000db6 <_malloc_r+0x26>
 8000dac:	230c      	movs	r3, #12
 8000dae:	6033      	str	r3, [r6, #0]
 8000db0:	2000      	movs	r0, #0
 8000db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000db6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000e8c <_malloc_r+0xfc>
 8000dba:	f000 f869 	bl	8000e90 <__malloc_lock>
 8000dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8000dc2:	461c      	mov	r4, r3
 8000dc4:	bb44      	cbnz	r4, 8000e18 <_malloc_r+0x88>
 8000dc6:	4629      	mov	r1, r5
 8000dc8:	4630      	mov	r0, r6
 8000dca:	f7ff ffbf 	bl	8000d4c <sbrk_aligned>
 8000dce:	1c43      	adds	r3, r0, #1
 8000dd0:	4604      	mov	r4, r0
 8000dd2:	d158      	bne.n	8000e86 <_malloc_r+0xf6>
 8000dd4:	f8d8 4000 	ldr.w	r4, [r8]
 8000dd8:	4627      	mov	r7, r4
 8000dda:	2f00      	cmp	r7, #0
 8000ddc:	d143      	bne.n	8000e66 <_malloc_r+0xd6>
 8000dde:	2c00      	cmp	r4, #0
 8000de0:	d04b      	beq.n	8000e7a <_malloc_r+0xea>
 8000de2:	6823      	ldr	r3, [r4, #0]
 8000de4:	4639      	mov	r1, r7
 8000de6:	4630      	mov	r0, r6
 8000de8:	eb04 0903 	add.w	r9, r4, r3
 8000dec:	f000 fb5a 	bl	80014a4 <_sbrk_r>
 8000df0:	4581      	cmp	r9, r0
 8000df2:	d142      	bne.n	8000e7a <_malloc_r+0xea>
 8000df4:	6821      	ldr	r1, [r4, #0]
 8000df6:	1a6d      	subs	r5, r5, r1
 8000df8:	4629      	mov	r1, r5
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	f7ff ffa6 	bl	8000d4c <sbrk_aligned>
 8000e00:	3001      	adds	r0, #1
 8000e02:	d03a      	beq.n	8000e7a <_malloc_r+0xea>
 8000e04:	6823      	ldr	r3, [r4, #0]
 8000e06:	442b      	add	r3, r5
 8000e08:	6023      	str	r3, [r4, #0]
 8000e0a:	f8d8 3000 	ldr.w	r3, [r8]
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	bb62      	cbnz	r2, 8000e6c <_malloc_r+0xdc>
 8000e12:	f8c8 7000 	str.w	r7, [r8]
 8000e16:	e00f      	b.n	8000e38 <_malloc_r+0xa8>
 8000e18:	6822      	ldr	r2, [r4, #0]
 8000e1a:	1b52      	subs	r2, r2, r5
 8000e1c:	d420      	bmi.n	8000e60 <_malloc_r+0xd0>
 8000e1e:	2a0b      	cmp	r2, #11
 8000e20:	d917      	bls.n	8000e52 <_malloc_r+0xc2>
 8000e22:	1961      	adds	r1, r4, r5
 8000e24:	42a3      	cmp	r3, r4
 8000e26:	6025      	str	r5, [r4, #0]
 8000e28:	bf18      	it	ne
 8000e2a:	6059      	strne	r1, [r3, #4]
 8000e2c:	6863      	ldr	r3, [r4, #4]
 8000e2e:	bf08      	it	eq
 8000e30:	f8c8 1000 	streq.w	r1, [r8]
 8000e34:	5162      	str	r2, [r4, r5]
 8000e36:	604b      	str	r3, [r1, #4]
 8000e38:	4630      	mov	r0, r6
 8000e3a:	f000 f82f 	bl	8000e9c <__malloc_unlock>
 8000e3e:	f104 000b 	add.w	r0, r4, #11
 8000e42:	1d23      	adds	r3, r4, #4
 8000e44:	f020 0007 	bic.w	r0, r0, #7
 8000e48:	1ac2      	subs	r2, r0, r3
 8000e4a:	bf1c      	itt	ne
 8000e4c:	1a1b      	subne	r3, r3, r0
 8000e4e:	50a3      	strne	r3, [r4, r2]
 8000e50:	e7af      	b.n	8000db2 <_malloc_r+0x22>
 8000e52:	6862      	ldr	r2, [r4, #4]
 8000e54:	42a3      	cmp	r3, r4
 8000e56:	bf0c      	ite	eq
 8000e58:	f8c8 2000 	streq.w	r2, [r8]
 8000e5c:	605a      	strne	r2, [r3, #4]
 8000e5e:	e7eb      	b.n	8000e38 <_malloc_r+0xa8>
 8000e60:	4623      	mov	r3, r4
 8000e62:	6864      	ldr	r4, [r4, #4]
 8000e64:	e7ae      	b.n	8000dc4 <_malloc_r+0x34>
 8000e66:	463c      	mov	r4, r7
 8000e68:	687f      	ldr	r7, [r7, #4]
 8000e6a:	e7b6      	b.n	8000dda <_malloc_r+0x4a>
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	42a3      	cmp	r3, r4
 8000e72:	d1fb      	bne.n	8000e6c <_malloc_r+0xdc>
 8000e74:	2300      	movs	r3, #0
 8000e76:	6053      	str	r3, [r2, #4]
 8000e78:	e7de      	b.n	8000e38 <_malloc_r+0xa8>
 8000e7a:	230c      	movs	r3, #12
 8000e7c:	6033      	str	r3, [r6, #0]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	f000 f80c 	bl	8000e9c <__malloc_unlock>
 8000e84:	e794      	b.n	8000db0 <_malloc_r+0x20>
 8000e86:	6005      	str	r5, [r0, #0]
 8000e88:	e7d6      	b.n	8000e38 <_malloc_r+0xa8>
 8000e8a:	bf00      	nop
 8000e8c:	200001c4 	.word	0x200001c4

08000e90 <__malloc_lock>:
 8000e90:	4801      	ldr	r0, [pc, #4]	@ (8000e98 <__malloc_lock+0x8>)
 8000e92:	f7ff bf0f 	b.w	8000cb4 <__retarget_lock_acquire_recursive>
 8000e96:	bf00      	nop
 8000e98:	200001bc 	.word	0x200001bc

08000e9c <__malloc_unlock>:
 8000e9c:	4801      	ldr	r0, [pc, #4]	@ (8000ea4 <__malloc_unlock+0x8>)
 8000e9e:	f7ff bf0a 	b.w	8000cb6 <__retarget_lock_release_recursive>
 8000ea2:	bf00      	nop
 8000ea4:	200001bc 	.word	0x200001bc

08000ea8 <__ssputs_r>:
 8000ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eac:	688e      	ldr	r6, [r1, #8]
 8000eae:	461f      	mov	r7, r3
 8000eb0:	42be      	cmp	r6, r7
 8000eb2:	680b      	ldr	r3, [r1, #0]
 8000eb4:	4682      	mov	sl, r0
 8000eb6:	460c      	mov	r4, r1
 8000eb8:	4690      	mov	r8, r2
 8000eba:	d82d      	bhi.n	8000f18 <__ssputs_r+0x70>
 8000ebc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000ec0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000ec4:	d026      	beq.n	8000f14 <__ssputs_r+0x6c>
 8000ec6:	6965      	ldr	r5, [r4, #20]
 8000ec8:	6909      	ldr	r1, [r1, #16]
 8000eca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000ece:	eba3 0901 	sub.w	r9, r3, r1
 8000ed2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000ed6:	1c7b      	adds	r3, r7, #1
 8000ed8:	444b      	add	r3, r9
 8000eda:	106d      	asrs	r5, r5, #1
 8000edc:	429d      	cmp	r5, r3
 8000ede:	bf38      	it	cc
 8000ee0:	461d      	movcc	r5, r3
 8000ee2:	0553      	lsls	r3, r2, #21
 8000ee4:	d527      	bpl.n	8000f36 <__ssputs_r+0x8e>
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	f7ff ff52 	bl	8000d90 <_malloc_r>
 8000eec:	4606      	mov	r6, r0
 8000eee:	b360      	cbz	r0, 8000f4a <__ssputs_r+0xa2>
 8000ef0:	6921      	ldr	r1, [r4, #16]
 8000ef2:	464a      	mov	r2, r9
 8000ef4:	f000 fae6 	bl	80014c4 <memcpy>
 8000ef8:	89a3      	ldrh	r3, [r4, #12]
 8000efa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f02:	81a3      	strh	r3, [r4, #12]
 8000f04:	6126      	str	r6, [r4, #16]
 8000f06:	6165      	str	r5, [r4, #20]
 8000f08:	444e      	add	r6, r9
 8000f0a:	eba5 0509 	sub.w	r5, r5, r9
 8000f0e:	6026      	str	r6, [r4, #0]
 8000f10:	60a5      	str	r5, [r4, #8]
 8000f12:	463e      	mov	r6, r7
 8000f14:	42be      	cmp	r6, r7
 8000f16:	d900      	bls.n	8000f1a <__ssputs_r+0x72>
 8000f18:	463e      	mov	r6, r7
 8000f1a:	6820      	ldr	r0, [r4, #0]
 8000f1c:	4632      	mov	r2, r6
 8000f1e:	4641      	mov	r1, r8
 8000f20:	f000 faa6 	bl	8001470 <memmove>
 8000f24:	68a3      	ldr	r3, [r4, #8]
 8000f26:	1b9b      	subs	r3, r3, r6
 8000f28:	60a3      	str	r3, [r4, #8]
 8000f2a:	6823      	ldr	r3, [r4, #0]
 8000f2c:	4433      	add	r3, r6
 8000f2e:	6023      	str	r3, [r4, #0]
 8000f30:	2000      	movs	r0, #0
 8000f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f36:	462a      	mov	r2, r5
 8000f38:	f000 fad2 	bl	80014e0 <_realloc_r>
 8000f3c:	4606      	mov	r6, r0
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	d1e0      	bne.n	8000f04 <__ssputs_r+0x5c>
 8000f42:	6921      	ldr	r1, [r4, #16]
 8000f44:	4650      	mov	r0, sl
 8000f46:	f7ff feb7 	bl	8000cb8 <_free_r>
 8000f4a:	230c      	movs	r3, #12
 8000f4c:	f8ca 3000 	str.w	r3, [sl]
 8000f50:	89a3      	ldrh	r3, [r4, #12]
 8000f52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f56:	81a3      	strh	r3, [r4, #12]
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	e7e9      	b.n	8000f32 <__ssputs_r+0x8a>
	...

08000f60 <_svfiprintf_r>:
 8000f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f64:	4698      	mov	r8, r3
 8000f66:	898b      	ldrh	r3, [r1, #12]
 8000f68:	061b      	lsls	r3, r3, #24
 8000f6a:	b09d      	sub	sp, #116	@ 0x74
 8000f6c:	4607      	mov	r7, r0
 8000f6e:	460d      	mov	r5, r1
 8000f70:	4614      	mov	r4, r2
 8000f72:	d510      	bpl.n	8000f96 <_svfiprintf_r+0x36>
 8000f74:	690b      	ldr	r3, [r1, #16]
 8000f76:	b973      	cbnz	r3, 8000f96 <_svfiprintf_r+0x36>
 8000f78:	2140      	movs	r1, #64	@ 0x40
 8000f7a:	f7ff ff09 	bl	8000d90 <_malloc_r>
 8000f7e:	6028      	str	r0, [r5, #0]
 8000f80:	6128      	str	r0, [r5, #16]
 8000f82:	b930      	cbnz	r0, 8000f92 <_svfiprintf_r+0x32>
 8000f84:	230c      	movs	r3, #12
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	b01d      	add	sp, #116	@ 0x74
 8000f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f92:	2340      	movs	r3, #64	@ 0x40
 8000f94:	616b      	str	r3, [r5, #20]
 8000f96:	2300      	movs	r3, #0
 8000f98:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f9a:	2320      	movs	r3, #32
 8000f9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000fa0:	f8cd 800c 	str.w	r8, [sp, #12]
 8000fa4:	2330      	movs	r3, #48	@ 0x30
 8000fa6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001144 <_svfiprintf_r+0x1e4>
 8000faa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000fae:	f04f 0901 	mov.w	r9, #1
 8000fb2:	4623      	mov	r3, r4
 8000fb4:	469a      	mov	sl, r3
 8000fb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000fba:	b10a      	cbz	r2, 8000fc0 <_svfiprintf_r+0x60>
 8000fbc:	2a25      	cmp	r2, #37	@ 0x25
 8000fbe:	d1f9      	bne.n	8000fb4 <_svfiprintf_r+0x54>
 8000fc0:	ebba 0b04 	subs.w	fp, sl, r4
 8000fc4:	d00b      	beq.n	8000fde <_svfiprintf_r+0x7e>
 8000fc6:	465b      	mov	r3, fp
 8000fc8:	4622      	mov	r2, r4
 8000fca:	4629      	mov	r1, r5
 8000fcc:	4638      	mov	r0, r7
 8000fce:	f7ff ff6b 	bl	8000ea8 <__ssputs_r>
 8000fd2:	3001      	adds	r0, #1
 8000fd4:	f000 80a7 	beq.w	8001126 <_svfiprintf_r+0x1c6>
 8000fd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000fda:	445a      	add	r2, fp
 8000fdc:	9209      	str	r2, [sp, #36]	@ 0x24
 8000fde:	f89a 3000 	ldrb.w	r3, [sl]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f000 809f 	beq.w	8001126 <_svfiprintf_r+0x1c6>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f04f 32ff 	mov.w	r2, #4294967295
 8000fee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ff2:	f10a 0a01 	add.w	sl, sl, #1
 8000ff6:	9304      	str	r3, [sp, #16]
 8000ff8:	9307      	str	r3, [sp, #28]
 8000ffa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000ffe:	931a      	str	r3, [sp, #104]	@ 0x68
 8001000:	4654      	mov	r4, sl
 8001002:	2205      	movs	r2, #5
 8001004:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001008:	484e      	ldr	r0, [pc, #312]	@ (8001144 <_svfiprintf_r+0x1e4>)
 800100a:	f7ff f8f1 	bl	80001f0 <memchr>
 800100e:	9a04      	ldr	r2, [sp, #16]
 8001010:	b9d8      	cbnz	r0, 800104a <_svfiprintf_r+0xea>
 8001012:	06d0      	lsls	r0, r2, #27
 8001014:	bf44      	itt	mi
 8001016:	2320      	movmi	r3, #32
 8001018:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800101c:	0711      	lsls	r1, r2, #28
 800101e:	bf44      	itt	mi
 8001020:	232b      	movmi	r3, #43	@ 0x2b
 8001022:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001026:	f89a 3000 	ldrb.w	r3, [sl]
 800102a:	2b2a      	cmp	r3, #42	@ 0x2a
 800102c:	d015      	beq.n	800105a <_svfiprintf_r+0xfa>
 800102e:	9a07      	ldr	r2, [sp, #28]
 8001030:	4654      	mov	r4, sl
 8001032:	2000      	movs	r0, #0
 8001034:	f04f 0c0a 	mov.w	ip, #10
 8001038:	4621      	mov	r1, r4
 800103a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800103e:	3b30      	subs	r3, #48	@ 0x30
 8001040:	2b09      	cmp	r3, #9
 8001042:	d94b      	bls.n	80010dc <_svfiprintf_r+0x17c>
 8001044:	b1b0      	cbz	r0, 8001074 <_svfiprintf_r+0x114>
 8001046:	9207      	str	r2, [sp, #28]
 8001048:	e014      	b.n	8001074 <_svfiprintf_r+0x114>
 800104a:	eba0 0308 	sub.w	r3, r0, r8
 800104e:	fa09 f303 	lsl.w	r3, r9, r3
 8001052:	4313      	orrs	r3, r2
 8001054:	9304      	str	r3, [sp, #16]
 8001056:	46a2      	mov	sl, r4
 8001058:	e7d2      	b.n	8001000 <_svfiprintf_r+0xa0>
 800105a:	9b03      	ldr	r3, [sp, #12]
 800105c:	1d19      	adds	r1, r3, #4
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	9103      	str	r1, [sp, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	bfbb      	ittet	lt
 8001066:	425b      	neglt	r3, r3
 8001068:	f042 0202 	orrlt.w	r2, r2, #2
 800106c:	9307      	strge	r3, [sp, #28]
 800106e:	9307      	strlt	r3, [sp, #28]
 8001070:	bfb8      	it	lt
 8001072:	9204      	strlt	r2, [sp, #16]
 8001074:	7823      	ldrb	r3, [r4, #0]
 8001076:	2b2e      	cmp	r3, #46	@ 0x2e
 8001078:	d10a      	bne.n	8001090 <_svfiprintf_r+0x130>
 800107a:	7863      	ldrb	r3, [r4, #1]
 800107c:	2b2a      	cmp	r3, #42	@ 0x2a
 800107e:	d132      	bne.n	80010e6 <_svfiprintf_r+0x186>
 8001080:	9b03      	ldr	r3, [sp, #12]
 8001082:	1d1a      	adds	r2, r3, #4
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	9203      	str	r2, [sp, #12]
 8001088:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800108c:	3402      	adds	r4, #2
 800108e:	9305      	str	r3, [sp, #20]
 8001090:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001154 <_svfiprintf_r+0x1f4>
 8001094:	7821      	ldrb	r1, [r4, #0]
 8001096:	2203      	movs	r2, #3
 8001098:	4650      	mov	r0, sl
 800109a:	f7ff f8a9 	bl	80001f0 <memchr>
 800109e:	b138      	cbz	r0, 80010b0 <_svfiprintf_r+0x150>
 80010a0:	9b04      	ldr	r3, [sp, #16]
 80010a2:	eba0 000a 	sub.w	r0, r0, sl
 80010a6:	2240      	movs	r2, #64	@ 0x40
 80010a8:	4082      	lsls	r2, r0
 80010aa:	4313      	orrs	r3, r2
 80010ac:	3401      	adds	r4, #1
 80010ae:	9304      	str	r3, [sp, #16]
 80010b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010b4:	4824      	ldr	r0, [pc, #144]	@ (8001148 <_svfiprintf_r+0x1e8>)
 80010b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80010ba:	2206      	movs	r2, #6
 80010bc:	f7ff f898 	bl	80001f0 <memchr>
 80010c0:	2800      	cmp	r0, #0
 80010c2:	d036      	beq.n	8001132 <_svfiprintf_r+0x1d2>
 80010c4:	4b21      	ldr	r3, [pc, #132]	@ (800114c <_svfiprintf_r+0x1ec>)
 80010c6:	bb1b      	cbnz	r3, 8001110 <_svfiprintf_r+0x1b0>
 80010c8:	9b03      	ldr	r3, [sp, #12]
 80010ca:	3307      	adds	r3, #7
 80010cc:	f023 0307 	bic.w	r3, r3, #7
 80010d0:	3308      	adds	r3, #8
 80010d2:	9303      	str	r3, [sp, #12]
 80010d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80010d6:	4433      	add	r3, r6
 80010d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80010da:	e76a      	b.n	8000fb2 <_svfiprintf_r+0x52>
 80010dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80010e0:	460c      	mov	r4, r1
 80010e2:	2001      	movs	r0, #1
 80010e4:	e7a8      	b.n	8001038 <_svfiprintf_r+0xd8>
 80010e6:	2300      	movs	r3, #0
 80010e8:	3401      	adds	r4, #1
 80010ea:	9305      	str	r3, [sp, #20]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f04f 0c0a 	mov.w	ip, #10
 80010f2:	4620      	mov	r0, r4
 80010f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80010f8:	3a30      	subs	r2, #48	@ 0x30
 80010fa:	2a09      	cmp	r2, #9
 80010fc:	d903      	bls.n	8001106 <_svfiprintf_r+0x1a6>
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0c6      	beq.n	8001090 <_svfiprintf_r+0x130>
 8001102:	9105      	str	r1, [sp, #20]
 8001104:	e7c4      	b.n	8001090 <_svfiprintf_r+0x130>
 8001106:	fb0c 2101 	mla	r1, ip, r1, r2
 800110a:	4604      	mov	r4, r0
 800110c:	2301      	movs	r3, #1
 800110e:	e7f0      	b.n	80010f2 <_svfiprintf_r+0x192>
 8001110:	ab03      	add	r3, sp, #12
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	462a      	mov	r2, r5
 8001116:	4b0e      	ldr	r3, [pc, #56]	@ (8001150 <_svfiprintf_r+0x1f0>)
 8001118:	a904      	add	r1, sp, #16
 800111a:	4638      	mov	r0, r7
 800111c:	f3af 8000 	nop.w
 8001120:	1c42      	adds	r2, r0, #1
 8001122:	4606      	mov	r6, r0
 8001124:	d1d6      	bne.n	80010d4 <_svfiprintf_r+0x174>
 8001126:	89ab      	ldrh	r3, [r5, #12]
 8001128:	065b      	lsls	r3, r3, #25
 800112a:	f53f af2d 	bmi.w	8000f88 <_svfiprintf_r+0x28>
 800112e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001130:	e72c      	b.n	8000f8c <_svfiprintf_r+0x2c>
 8001132:	ab03      	add	r3, sp, #12
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	462a      	mov	r2, r5
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <_svfiprintf_r+0x1f0>)
 800113a:	a904      	add	r1, sp, #16
 800113c:	4638      	mov	r0, r7
 800113e:	f000 f879 	bl	8001234 <_printf_i>
 8001142:	e7ed      	b.n	8001120 <_svfiprintf_r+0x1c0>
 8001144:	080015a9 	.word	0x080015a9
 8001148:	080015b3 	.word	0x080015b3
 800114c:	00000000 	.word	0x00000000
 8001150:	08000ea9 	.word	0x08000ea9
 8001154:	080015af 	.word	0x080015af

08001158 <_printf_common>:
 8001158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800115c:	4616      	mov	r6, r2
 800115e:	4698      	mov	r8, r3
 8001160:	688a      	ldr	r2, [r1, #8]
 8001162:	690b      	ldr	r3, [r1, #16]
 8001164:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001168:	4293      	cmp	r3, r2
 800116a:	bfb8      	it	lt
 800116c:	4613      	movlt	r3, r2
 800116e:	6033      	str	r3, [r6, #0]
 8001170:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001174:	4607      	mov	r7, r0
 8001176:	460c      	mov	r4, r1
 8001178:	b10a      	cbz	r2, 800117e <_printf_common+0x26>
 800117a:	3301      	adds	r3, #1
 800117c:	6033      	str	r3, [r6, #0]
 800117e:	6823      	ldr	r3, [r4, #0]
 8001180:	0699      	lsls	r1, r3, #26
 8001182:	bf42      	ittt	mi
 8001184:	6833      	ldrmi	r3, [r6, #0]
 8001186:	3302      	addmi	r3, #2
 8001188:	6033      	strmi	r3, [r6, #0]
 800118a:	6825      	ldr	r5, [r4, #0]
 800118c:	f015 0506 	ands.w	r5, r5, #6
 8001190:	d106      	bne.n	80011a0 <_printf_common+0x48>
 8001192:	f104 0a19 	add.w	sl, r4, #25
 8001196:	68e3      	ldr	r3, [r4, #12]
 8001198:	6832      	ldr	r2, [r6, #0]
 800119a:	1a9b      	subs	r3, r3, r2
 800119c:	42ab      	cmp	r3, r5
 800119e:	dc26      	bgt.n	80011ee <_printf_common+0x96>
 80011a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80011a4:	6822      	ldr	r2, [r4, #0]
 80011a6:	3b00      	subs	r3, #0
 80011a8:	bf18      	it	ne
 80011aa:	2301      	movne	r3, #1
 80011ac:	0692      	lsls	r2, r2, #26
 80011ae:	d42b      	bmi.n	8001208 <_printf_common+0xb0>
 80011b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80011b4:	4641      	mov	r1, r8
 80011b6:	4638      	mov	r0, r7
 80011b8:	47c8      	blx	r9
 80011ba:	3001      	adds	r0, #1
 80011bc:	d01e      	beq.n	80011fc <_printf_common+0xa4>
 80011be:	6823      	ldr	r3, [r4, #0]
 80011c0:	6922      	ldr	r2, [r4, #16]
 80011c2:	f003 0306 	and.w	r3, r3, #6
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	bf02      	ittt	eq
 80011ca:	68e5      	ldreq	r5, [r4, #12]
 80011cc:	6833      	ldreq	r3, [r6, #0]
 80011ce:	1aed      	subeq	r5, r5, r3
 80011d0:	68a3      	ldr	r3, [r4, #8]
 80011d2:	bf0c      	ite	eq
 80011d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80011d8:	2500      	movne	r5, #0
 80011da:	4293      	cmp	r3, r2
 80011dc:	bfc4      	itt	gt
 80011de:	1a9b      	subgt	r3, r3, r2
 80011e0:	18ed      	addgt	r5, r5, r3
 80011e2:	2600      	movs	r6, #0
 80011e4:	341a      	adds	r4, #26
 80011e6:	42b5      	cmp	r5, r6
 80011e8:	d11a      	bne.n	8001220 <_printf_common+0xc8>
 80011ea:	2000      	movs	r0, #0
 80011ec:	e008      	b.n	8001200 <_printf_common+0xa8>
 80011ee:	2301      	movs	r3, #1
 80011f0:	4652      	mov	r2, sl
 80011f2:	4641      	mov	r1, r8
 80011f4:	4638      	mov	r0, r7
 80011f6:	47c8      	blx	r9
 80011f8:	3001      	adds	r0, #1
 80011fa:	d103      	bne.n	8001204 <_printf_common+0xac>
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001204:	3501      	adds	r5, #1
 8001206:	e7c6      	b.n	8001196 <_printf_common+0x3e>
 8001208:	18e1      	adds	r1, r4, r3
 800120a:	1c5a      	adds	r2, r3, #1
 800120c:	2030      	movs	r0, #48	@ 0x30
 800120e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001212:	4422      	add	r2, r4
 8001214:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001218:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800121c:	3302      	adds	r3, #2
 800121e:	e7c7      	b.n	80011b0 <_printf_common+0x58>
 8001220:	2301      	movs	r3, #1
 8001222:	4622      	mov	r2, r4
 8001224:	4641      	mov	r1, r8
 8001226:	4638      	mov	r0, r7
 8001228:	47c8      	blx	r9
 800122a:	3001      	adds	r0, #1
 800122c:	d0e6      	beq.n	80011fc <_printf_common+0xa4>
 800122e:	3601      	adds	r6, #1
 8001230:	e7d9      	b.n	80011e6 <_printf_common+0x8e>
	...

08001234 <_printf_i>:
 8001234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001238:	7e0f      	ldrb	r7, [r1, #24]
 800123a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800123c:	2f78      	cmp	r7, #120	@ 0x78
 800123e:	4691      	mov	r9, r2
 8001240:	4680      	mov	r8, r0
 8001242:	460c      	mov	r4, r1
 8001244:	469a      	mov	sl, r3
 8001246:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800124a:	d807      	bhi.n	800125c <_printf_i+0x28>
 800124c:	2f62      	cmp	r7, #98	@ 0x62
 800124e:	d80a      	bhi.n	8001266 <_printf_i+0x32>
 8001250:	2f00      	cmp	r7, #0
 8001252:	f000 80d1 	beq.w	80013f8 <_printf_i+0x1c4>
 8001256:	2f58      	cmp	r7, #88	@ 0x58
 8001258:	f000 80b8 	beq.w	80013cc <_printf_i+0x198>
 800125c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001260:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001264:	e03a      	b.n	80012dc <_printf_i+0xa8>
 8001266:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800126a:	2b15      	cmp	r3, #21
 800126c:	d8f6      	bhi.n	800125c <_printf_i+0x28>
 800126e:	a101      	add	r1, pc, #4	@ (adr r1, 8001274 <_printf_i+0x40>)
 8001270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001274:	080012cd 	.word	0x080012cd
 8001278:	080012e1 	.word	0x080012e1
 800127c:	0800125d 	.word	0x0800125d
 8001280:	0800125d 	.word	0x0800125d
 8001284:	0800125d 	.word	0x0800125d
 8001288:	0800125d 	.word	0x0800125d
 800128c:	080012e1 	.word	0x080012e1
 8001290:	0800125d 	.word	0x0800125d
 8001294:	0800125d 	.word	0x0800125d
 8001298:	0800125d 	.word	0x0800125d
 800129c:	0800125d 	.word	0x0800125d
 80012a0:	080013df 	.word	0x080013df
 80012a4:	0800130b 	.word	0x0800130b
 80012a8:	08001399 	.word	0x08001399
 80012ac:	0800125d 	.word	0x0800125d
 80012b0:	0800125d 	.word	0x0800125d
 80012b4:	08001401 	.word	0x08001401
 80012b8:	0800125d 	.word	0x0800125d
 80012bc:	0800130b 	.word	0x0800130b
 80012c0:	0800125d 	.word	0x0800125d
 80012c4:	0800125d 	.word	0x0800125d
 80012c8:	080013a1 	.word	0x080013a1
 80012cc:	6833      	ldr	r3, [r6, #0]
 80012ce:	1d1a      	adds	r2, r3, #4
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6032      	str	r2, [r6, #0]
 80012d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80012d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80012dc:	2301      	movs	r3, #1
 80012de:	e09c      	b.n	800141a <_printf_i+0x1e6>
 80012e0:	6833      	ldr	r3, [r6, #0]
 80012e2:	6820      	ldr	r0, [r4, #0]
 80012e4:	1d19      	adds	r1, r3, #4
 80012e6:	6031      	str	r1, [r6, #0]
 80012e8:	0606      	lsls	r6, r0, #24
 80012ea:	d501      	bpl.n	80012f0 <_printf_i+0xbc>
 80012ec:	681d      	ldr	r5, [r3, #0]
 80012ee:	e003      	b.n	80012f8 <_printf_i+0xc4>
 80012f0:	0645      	lsls	r5, r0, #25
 80012f2:	d5fb      	bpl.n	80012ec <_printf_i+0xb8>
 80012f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80012f8:	2d00      	cmp	r5, #0
 80012fa:	da03      	bge.n	8001304 <_printf_i+0xd0>
 80012fc:	232d      	movs	r3, #45	@ 0x2d
 80012fe:	426d      	negs	r5, r5
 8001300:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001304:	4858      	ldr	r0, [pc, #352]	@ (8001468 <_printf_i+0x234>)
 8001306:	230a      	movs	r3, #10
 8001308:	e011      	b.n	800132e <_printf_i+0xfa>
 800130a:	6821      	ldr	r1, [r4, #0]
 800130c:	6833      	ldr	r3, [r6, #0]
 800130e:	0608      	lsls	r0, r1, #24
 8001310:	f853 5b04 	ldr.w	r5, [r3], #4
 8001314:	d402      	bmi.n	800131c <_printf_i+0xe8>
 8001316:	0649      	lsls	r1, r1, #25
 8001318:	bf48      	it	mi
 800131a:	b2ad      	uxthmi	r5, r5
 800131c:	2f6f      	cmp	r7, #111	@ 0x6f
 800131e:	4852      	ldr	r0, [pc, #328]	@ (8001468 <_printf_i+0x234>)
 8001320:	6033      	str	r3, [r6, #0]
 8001322:	bf14      	ite	ne
 8001324:	230a      	movne	r3, #10
 8001326:	2308      	moveq	r3, #8
 8001328:	2100      	movs	r1, #0
 800132a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800132e:	6866      	ldr	r6, [r4, #4]
 8001330:	60a6      	str	r6, [r4, #8]
 8001332:	2e00      	cmp	r6, #0
 8001334:	db05      	blt.n	8001342 <_printf_i+0x10e>
 8001336:	6821      	ldr	r1, [r4, #0]
 8001338:	432e      	orrs	r6, r5
 800133a:	f021 0104 	bic.w	r1, r1, #4
 800133e:	6021      	str	r1, [r4, #0]
 8001340:	d04b      	beq.n	80013da <_printf_i+0x1a6>
 8001342:	4616      	mov	r6, r2
 8001344:	fbb5 f1f3 	udiv	r1, r5, r3
 8001348:	fb03 5711 	mls	r7, r3, r1, r5
 800134c:	5dc7      	ldrb	r7, [r0, r7]
 800134e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001352:	462f      	mov	r7, r5
 8001354:	42bb      	cmp	r3, r7
 8001356:	460d      	mov	r5, r1
 8001358:	d9f4      	bls.n	8001344 <_printf_i+0x110>
 800135a:	2b08      	cmp	r3, #8
 800135c:	d10b      	bne.n	8001376 <_printf_i+0x142>
 800135e:	6823      	ldr	r3, [r4, #0]
 8001360:	07df      	lsls	r7, r3, #31
 8001362:	d508      	bpl.n	8001376 <_printf_i+0x142>
 8001364:	6923      	ldr	r3, [r4, #16]
 8001366:	6861      	ldr	r1, [r4, #4]
 8001368:	4299      	cmp	r1, r3
 800136a:	bfde      	ittt	le
 800136c:	2330      	movle	r3, #48	@ 0x30
 800136e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001372:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001376:	1b92      	subs	r2, r2, r6
 8001378:	6122      	str	r2, [r4, #16]
 800137a:	f8cd a000 	str.w	sl, [sp]
 800137e:	464b      	mov	r3, r9
 8001380:	aa03      	add	r2, sp, #12
 8001382:	4621      	mov	r1, r4
 8001384:	4640      	mov	r0, r8
 8001386:	f7ff fee7 	bl	8001158 <_printf_common>
 800138a:	3001      	adds	r0, #1
 800138c:	d14a      	bne.n	8001424 <_printf_i+0x1f0>
 800138e:	f04f 30ff 	mov.w	r0, #4294967295
 8001392:	b004      	add	sp, #16
 8001394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001398:	6823      	ldr	r3, [r4, #0]
 800139a:	f043 0320 	orr.w	r3, r3, #32
 800139e:	6023      	str	r3, [r4, #0]
 80013a0:	4832      	ldr	r0, [pc, #200]	@ (800146c <_printf_i+0x238>)
 80013a2:	2778      	movs	r7, #120	@ 0x78
 80013a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	6831      	ldr	r1, [r6, #0]
 80013ac:	061f      	lsls	r7, r3, #24
 80013ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80013b2:	d402      	bmi.n	80013ba <_printf_i+0x186>
 80013b4:	065f      	lsls	r7, r3, #25
 80013b6:	bf48      	it	mi
 80013b8:	b2ad      	uxthmi	r5, r5
 80013ba:	6031      	str	r1, [r6, #0]
 80013bc:	07d9      	lsls	r1, r3, #31
 80013be:	bf44      	itt	mi
 80013c0:	f043 0320 	orrmi.w	r3, r3, #32
 80013c4:	6023      	strmi	r3, [r4, #0]
 80013c6:	b11d      	cbz	r5, 80013d0 <_printf_i+0x19c>
 80013c8:	2310      	movs	r3, #16
 80013ca:	e7ad      	b.n	8001328 <_printf_i+0xf4>
 80013cc:	4826      	ldr	r0, [pc, #152]	@ (8001468 <_printf_i+0x234>)
 80013ce:	e7e9      	b.n	80013a4 <_printf_i+0x170>
 80013d0:	6823      	ldr	r3, [r4, #0]
 80013d2:	f023 0320 	bic.w	r3, r3, #32
 80013d6:	6023      	str	r3, [r4, #0]
 80013d8:	e7f6      	b.n	80013c8 <_printf_i+0x194>
 80013da:	4616      	mov	r6, r2
 80013dc:	e7bd      	b.n	800135a <_printf_i+0x126>
 80013de:	6833      	ldr	r3, [r6, #0]
 80013e0:	6825      	ldr	r5, [r4, #0]
 80013e2:	6961      	ldr	r1, [r4, #20]
 80013e4:	1d18      	adds	r0, r3, #4
 80013e6:	6030      	str	r0, [r6, #0]
 80013e8:	062e      	lsls	r6, r5, #24
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	d501      	bpl.n	80013f2 <_printf_i+0x1be>
 80013ee:	6019      	str	r1, [r3, #0]
 80013f0:	e002      	b.n	80013f8 <_printf_i+0x1c4>
 80013f2:	0668      	lsls	r0, r5, #25
 80013f4:	d5fb      	bpl.n	80013ee <_printf_i+0x1ba>
 80013f6:	8019      	strh	r1, [r3, #0]
 80013f8:	2300      	movs	r3, #0
 80013fa:	6123      	str	r3, [r4, #16]
 80013fc:	4616      	mov	r6, r2
 80013fe:	e7bc      	b.n	800137a <_printf_i+0x146>
 8001400:	6833      	ldr	r3, [r6, #0]
 8001402:	1d1a      	adds	r2, r3, #4
 8001404:	6032      	str	r2, [r6, #0]
 8001406:	681e      	ldr	r6, [r3, #0]
 8001408:	6862      	ldr	r2, [r4, #4]
 800140a:	2100      	movs	r1, #0
 800140c:	4630      	mov	r0, r6
 800140e:	f7fe feef 	bl	80001f0 <memchr>
 8001412:	b108      	cbz	r0, 8001418 <_printf_i+0x1e4>
 8001414:	1b80      	subs	r0, r0, r6
 8001416:	6060      	str	r0, [r4, #4]
 8001418:	6863      	ldr	r3, [r4, #4]
 800141a:	6123      	str	r3, [r4, #16]
 800141c:	2300      	movs	r3, #0
 800141e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001422:	e7aa      	b.n	800137a <_printf_i+0x146>
 8001424:	6923      	ldr	r3, [r4, #16]
 8001426:	4632      	mov	r2, r6
 8001428:	4649      	mov	r1, r9
 800142a:	4640      	mov	r0, r8
 800142c:	47d0      	blx	sl
 800142e:	3001      	adds	r0, #1
 8001430:	d0ad      	beq.n	800138e <_printf_i+0x15a>
 8001432:	6823      	ldr	r3, [r4, #0]
 8001434:	079b      	lsls	r3, r3, #30
 8001436:	d413      	bmi.n	8001460 <_printf_i+0x22c>
 8001438:	68e0      	ldr	r0, [r4, #12]
 800143a:	9b03      	ldr	r3, [sp, #12]
 800143c:	4298      	cmp	r0, r3
 800143e:	bfb8      	it	lt
 8001440:	4618      	movlt	r0, r3
 8001442:	e7a6      	b.n	8001392 <_printf_i+0x15e>
 8001444:	2301      	movs	r3, #1
 8001446:	4632      	mov	r2, r6
 8001448:	4649      	mov	r1, r9
 800144a:	4640      	mov	r0, r8
 800144c:	47d0      	blx	sl
 800144e:	3001      	adds	r0, #1
 8001450:	d09d      	beq.n	800138e <_printf_i+0x15a>
 8001452:	3501      	adds	r5, #1
 8001454:	68e3      	ldr	r3, [r4, #12]
 8001456:	9903      	ldr	r1, [sp, #12]
 8001458:	1a5b      	subs	r3, r3, r1
 800145a:	42ab      	cmp	r3, r5
 800145c:	dcf2      	bgt.n	8001444 <_printf_i+0x210>
 800145e:	e7eb      	b.n	8001438 <_printf_i+0x204>
 8001460:	2500      	movs	r5, #0
 8001462:	f104 0619 	add.w	r6, r4, #25
 8001466:	e7f5      	b.n	8001454 <_printf_i+0x220>
 8001468:	080015ba 	.word	0x080015ba
 800146c:	080015cb 	.word	0x080015cb

08001470 <memmove>:
 8001470:	4288      	cmp	r0, r1
 8001472:	b510      	push	{r4, lr}
 8001474:	eb01 0402 	add.w	r4, r1, r2
 8001478:	d902      	bls.n	8001480 <memmove+0x10>
 800147a:	4284      	cmp	r4, r0
 800147c:	4623      	mov	r3, r4
 800147e:	d807      	bhi.n	8001490 <memmove+0x20>
 8001480:	1e43      	subs	r3, r0, #1
 8001482:	42a1      	cmp	r1, r4
 8001484:	d008      	beq.n	8001498 <memmove+0x28>
 8001486:	f811 2b01 	ldrb.w	r2, [r1], #1
 800148a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800148e:	e7f8      	b.n	8001482 <memmove+0x12>
 8001490:	4402      	add	r2, r0
 8001492:	4601      	mov	r1, r0
 8001494:	428a      	cmp	r2, r1
 8001496:	d100      	bne.n	800149a <memmove+0x2a>
 8001498:	bd10      	pop	{r4, pc}
 800149a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800149e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80014a2:	e7f7      	b.n	8001494 <memmove+0x24>

080014a4 <_sbrk_r>:
 80014a4:	b538      	push	{r3, r4, r5, lr}
 80014a6:	4d06      	ldr	r5, [pc, #24]	@ (80014c0 <_sbrk_r+0x1c>)
 80014a8:	2300      	movs	r3, #0
 80014aa:	4604      	mov	r4, r0
 80014ac:	4608      	mov	r0, r1
 80014ae:	602b      	str	r3, [r5, #0]
 80014b0:	f7ff f9c0 	bl	8000834 <_sbrk>
 80014b4:	1c43      	adds	r3, r0, #1
 80014b6:	d102      	bne.n	80014be <_sbrk_r+0x1a>
 80014b8:	682b      	ldr	r3, [r5, #0]
 80014ba:	b103      	cbz	r3, 80014be <_sbrk_r+0x1a>
 80014bc:	6023      	str	r3, [r4, #0]
 80014be:	bd38      	pop	{r3, r4, r5, pc}
 80014c0:	200001b8 	.word	0x200001b8

080014c4 <memcpy>:
 80014c4:	440a      	add	r2, r1
 80014c6:	4291      	cmp	r1, r2
 80014c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80014cc:	d100      	bne.n	80014d0 <memcpy+0xc>
 80014ce:	4770      	bx	lr
 80014d0:	b510      	push	{r4, lr}
 80014d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80014d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80014da:	4291      	cmp	r1, r2
 80014dc:	d1f9      	bne.n	80014d2 <memcpy+0xe>
 80014de:	bd10      	pop	{r4, pc}

080014e0 <_realloc_r>:
 80014e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014e4:	4607      	mov	r7, r0
 80014e6:	4614      	mov	r4, r2
 80014e8:	460d      	mov	r5, r1
 80014ea:	b921      	cbnz	r1, 80014f6 <_realloc_r+0x16>
 80014ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80014f0:	4611      	mov	r1, r2
 80014f2:	f7ff bc4d 	b.w	8000d90 <_malloc_r>
 80014f6:	b92a      	cbnz	r2, 8001504 <_realloc_r+0x24>
 80014f8:	f7ff fbde 	bl	8000cb8 <_free_r>
 80014fc:	4625      	mov	r5, r4
 80014fe:	4628      	mov	r0, r5
 8001500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001504:	f000 f81a 	bl	800153c <_malloc_usable_size_r>
 8001508:	4284      	cmp	r4, r0
 800150a:	4606      	mov	r6, r0
 800150c:	d802      	bhi.n	8001514 <_realloc_r+0x34>
 800150e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001512:	d8f4      	bhi.n	80014fe <_realloc_r+0x1e>
 8001514:	4621      	mov	r1, r4
 8001516:	4638      	mov	r0, r7
 8001518:	f7ff fc3a 	bl	8000d90 <_malloc_r>
 800151c:	4680      	mov	r8, r0
 800151e:	b908      	cbnz	r0, 8001524 <_realloc_r+0x44>
 8001520:	4645      	mov	r5, r8
 8001522:	e7ec      	b.n	80014fe <_realloc_r+0x1e>
 8001524:	42b4      	cmp	r4, r6
 8001526:	4622      	mov	r2, r4
 8001528:	4629      	mov	r1, r5
 800152a:	bf28      	it	cs
 800152c:	4632      	movcs	r2, r6
 800152e:	f7ff ffc9 	bl	80014c4 <memcpy>
 8001532:	4629      	mov	r1, r5
 8001534:	4638      	mov	r0, r7
 8001536:	f7ff fbbf 	bl	8000cb8 <_free_r>
 800153a:	e7f1      	b.n	8001520 <_realloc_r+0x40>

0800153c <_malloc_usable_size_r>:
 800153c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001540:	1f18      	subs	r0, r3, #4
 8001542:	2b00      	cmp	r3, #0
 8001544:	bfbc      	itt	lt
 8001546:	580b      	ldrlt	r3, [r1, r0]
 8001548:	18c0      	addlt	r0, r0, r3
 800154a:	4770      	bx	lr

0800154c <_init>:
 800154c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800154e:	bf00      	nop
 8001550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001552:	bc08      	pop	{r3}
 8001554:	469e      	mov	lr, r3
 8001556:	4770      	bx	lr

08001558 <_fini>:
 8001558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800155a:	bf00      	nop
 800155c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800155e:	bc08      	pop	{r3}
 8001560:	469e      	mov	lr, r3
 8001562:	4770      	bx	lr
