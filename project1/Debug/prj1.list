
prj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f94  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08005134  08005134  00006134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005278  08005278  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005278  08005278  00006278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005280  08005280  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005280  08005280  00006280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005284  08005284  00006284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005288  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049d0  20000010  08005298  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049e0  08005298  000079e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110c4  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b6  00000000  00000000  00018104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  0001a9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b09  00000000  00000000  0001b820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003092  00000000  00000000  0001c329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff21  00000000  00000000  0001f3bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fa6e  00000000  00000000  0002f2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bed4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b5c  00000000  00000000  000bed90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000c28ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800511c 	.word	0x0800511c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	0800511c 	.word	0x0800511c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b988 	b.w	8000518 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	468e      	mov	lr, r1
 8000228:	4604      	mov	r4, r0
 800022a:	4688      	mov	r8, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d962      	bls.n	80002fc <__udivmoddi4+0xdc>
 8000236:	fab2 f682 	clz	r6, r2
 800023a:	b14e      	cbz	r6, 8000250 <__udivmoddi4+0x30>
 800023c:	f1c6 0320 	rsb	r3, r6, #32
 8000240:	fa01 f806 	lsl.w	r8, r1, r6
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	40b7      	lsls	r7, r6
 800024a:	ea43 0808 	orr.w	r8, r3, r8
 800024e:	40b4      	lsls	r4, r6
 8000250:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000254:	fa1f fc87 	uxth.w	ip, r7
 8000258:	fbb8 f1fe 	udiv	r1, r8, lr
 800025c:	0c23      	lsrs	r3, r4, #16
 800025e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000262:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000266:	fb01 f20c 	mul.w	r2, r1, ip
 800026a:	429a      	cmp	r2, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x62>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f101 30ff 	add.w	r0, r1, #4294967295
 8000274:	f080 80ea 	bcs.w	800044c <__udivmoddi4+0x22c>
 8000278:	429a      	cmp	r2, r3
 800027a:	f240 80e7 	bls.w	800044c <__udivmoddi4+0x22c>
 800027e:	3902      	subs	r1, #2
 8000280:	443b      	add	r3, r7
 8000282:	1a9a      	subs	r2, r3, r2
 8000284:	b2a3      	uxth	r3, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000292:	fb00 fc0c 	mul.w	ip, r0, ip
 8000296:	459c      	cmp	ip, r3
 8000298:	d909      	bls.n	80002ae <__udivmoddi4+0x8e>
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a0:	f080 80d6 	bcs.w	8000450 <__udivmoddi4+0x230>
 80002a4:	459c      	cmp	ip, r3
 80002a6:	f240 80d3 	bls.w	8000450 <__udivmoddi4+0x230>
 80002aa:	443b      	add	r3, r7
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b2:	eba3 030c 	sub.w	r3, r3, ip
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40f3      	lsrs	r3, r6
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xb6>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb0>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x14c>
 80002de:	4573      	cmp	r3, lr
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xc8>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 8105 	bhi.w	80004f2 <__udivmoddi4+0x2d2>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4690      	mov	r8, r2
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e5      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002f6:	e9c5 4800 	strd	r4, r8, [r5]
 80002fa:	e7e2      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f000 8090 	beq.w	8000422 <__udivmoddi4+0x202>
 8000302:	fab2 f682 	clz	r6, r2
 8000306:	2e00      	cmp	r6, #0
 8000308:	f040 80a4 	bne.w	8000454 <__udivmoddi4+0x234>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	0c03      	lsrs	r3, r0, #16
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	b280      	uxth	r0, r0
 8000316:	b2bc      	uxth	r4, r7
 8000318:	2101      	movs	r1, #1
 800031a:	fbb2 fcfe 	udiv	ip, r2, lr
 800031e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000326:	fb04 f20c 	mul.w	r2, r4, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d907      	bls.n	800033e <__udivmoddi4+0x11e>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x11c>
 8000336:	429a      	cmp	r2, r3
 8000338:	f200 80e0 	bhi.w	80004fc <__udivmoddi4+0x2dc>
 800033c:	46c4      	mov	ip, r8
 800033e:	1a9b      	subs	r3, r3, r2
 8000340:	fbb3 f2fe 	udiv	r2, r3, lr
 8000344:	fb0e 3312 	mls	r3, lr, r2, r3
 8000348:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800034c:	fb02 f404 	mul.w	r4, r2, r4
 8000350:	429c      	cmp	r4, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x144>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f102 30ff 	add.w	r0, r2, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x142>
 800035c:	429c      	cmp	r4, r3
 800035e:	f200 80ca 	bhi.w	80004f6 <__udivmoddi4+0x2d6>
 8000362:	4602      	mov	r2, r0
 8000364:	1b1b      	subs	r3, r3, r4
 8000366:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x98>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa0e f401 	lsl.w	r4, lr, r1
 800037c:	fa20 f306 	lsr.w	r3, r0, r6
 8000380:	fa2e fe06 	lsr.w	lr, lr, r6
 8000384:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	fa1f fc87 	uxth.w	ip, r7
 8000392:	fbbe f0f9 	udiv	r0, lr, r9
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	fb09 ee10 	mls	lr, r9, r0, lr
 800039c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1a0>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80003b2:	f080 809c 	bcs.w	80004ee <__udivmoddi4+0x2ce>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f240 8099 	bls.w	80004ee <__udivmoddi4+0x2ce>
 80003bc:	3802      	subs	r0, #2
 80003be:	443c      	add	r4, r7
 80003c0:	eba4 040e 	sub.w	r4, r4, lr
 80003c4:	fa1f fe83 	uxth.w	lr, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d8:	45a4      	cmp	ip, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1ce>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f103 3eff 	add.w	lr, r3, #4294967295
 80003e2:	f080 8082 	bcs.w	80004ea <__udivmoddi4+0x2ca>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d97f      	bls.n	80004ea <__udivmoddi4+0x2ca>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003fa:	4564      	cmp	r4, ip
 80003fc:	4673      	mov	r3, lr
 80003fe:	46e1      	mov	r9, ip
 8000400:	d362      	bcc.n	80004c8 <__udivmoddi4+0x2a8>
 8000402:	d05f      	beq.n	80004c4 <__udivmoddi4+0x2a4>
 8000404:	b15d      	cbz	r5, 800041e <__udivmoddi4+0x1fe>
 8000406:	ebb8 0203 	subs.w	r2, r8, r3
 800040a:	eb64 0409 	sbc.w	r4, r4, r9
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	fa22 f301 	lsr.w	r3, r2, r1
 8000416:	431e      	orrs	r6, r3
 8000418:	40cc      	lsrs	r4, r1
 800041a:	e9c5 6400 	strd	r6, r4, [r5]
 800041e:	2100      	movs	r1, #0
 8000420:	e74f      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000422:	fbb1 fcf2 	udiv	ip, r1, r2
 8000426:	0c01      	lsrs	r1, r0, #16
 8000428:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800042c:	b280      	uxth	r0, r0
 800042e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000432:	463b      	mov	r3, r7
 8000434:	4638      	mov	r0, r7
 8000436:	463c      	mov	r4, r7
 8000438:	46b8      	mov	r8, r7
 800043a:	46be      	mov	lr, r7
 800043c:	2620      	movs	r6, #32
 800043e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000442:	eba2 0208 	sub.w	r2, r2, r8
 8000446:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800044a:	e766      	b.n	800031a <__udivmoddi4+0xfa>
 800044c:	4601      	mov	r1, r0
 800044e:	e718      	b.n	8000282 <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e72c      	b.n	80002ae <__udivmoddi4+0x8e>
 8000454:	f1c6 0220 	rsb	r2, r6, #32
 8000458:	fa2e f302 	lsr.w	r3, lr, r2
 800045c:	40b7      	lsls	r7, r6
 800045e:	40b1      	lsls	r1, r6
 8000460:	fa20 f202 	lsr.w	r2, r0, r2
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	430a      	orrs	r2, r1
 800046a:	fbb3 f8fe 	udiv	r8, r3, lr
 800046e:	b2bc      	uxth	r4, r7
 8000470:	fb0e 3318 	mls	r3, lr, r8, r3
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb08 f904 	mul.w	r9, r8, r4
 800047e:	40b0      	lsls	r0, r6
 8000480:	4589      	cmp	r9, r1
 8000482:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000486:	b280      	uxth	r0, r0
 8000488:	d93e      	bls.n	8000508 <__udivmoddi4+0x2e8>
 800048a:	1879      	adds	r1, r7, r1
 800048c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x276>
 8000492:	4589      	cmp	r9, r1
 8000494:	d81f      	bhi.n	80004d6 <__udivmoddi4+0x2b6>
 8000496:	eba1 0109 	sub.w	r1, r1, r9
 800049a:	fbb1 f9fe 	udiv	r9, r1, lr
 800049e:	fb09 f804 	mul.w	r8, r9, r4
 80004a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a6:	b292      	uxth	r2, r2
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d229      	bcs.n	8000504 <__udivmoddi4+0x2e4>
 80004b0:	18ba      	adds	r2, r7, r2
 80004b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b6:	d2c4      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d2c2      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004bc:	f1a9 0102 	sub.w	r1, r9, #2
 80004c0:	443a      	add	r2, r7
 80004c2:	e7be      	b.n	8000442 <__udivmoddi4+0x222>
 80004c4:	45f0      	cmp	r8, lr
 80004c6:	d29d      	bcs.n	8000404 <__udivmoddi4+0x1e4>
 80004c8:	ebbe 0302 	subs.w	r3, lr, r2
 80004cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d0:	3801      	subs	r0, #1
 80004d2:	46e1      	mov	r9, ip
 80004d4:	e796      	b.n	8000404 <__udivmoddi4+0x1e4>
 80004d6:	eba7 0909 	sub.w	r9, r7, r9
 80004da:	4449      	add	r1, r9
 80004dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e4:	fb09 f804 	mul.w	r8, r9, r4
 80004e8:	e7db      	b.n	80004a2 <__udivmoddi4+0x282>
 80004ea:	4673      	mov	r3, lr
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1ce>
 80004ee:	4650      	mov	r0, sl
 80004f0:	e766      	b.n	80003c0 <__udivmoddi4+0x1a0>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e6fd      	b.n	80002f2 <__udivmoddi4+0xd2>
 80004f6:	443b      	add	r3, r7
 80004f8:	3a02      	subs	r2, #2
 80004fa:	e733      	b.n	8000364 <__udivmoddi4+0x144>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	443b      	add	r3, r7
 8000502:	e71c      	b.n	800033e <__udivmoddi4+0x11e>
 8000504:	4649      	mov	r1, r9
 8000506:	e79c      	b.n	8000442 <__udivmoddi4+0x222>
 8000508:	eba1 0109 	sub.w	r1, r1, r9
 800050c:	46c4      	mov	ip, r8
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	e7c4      	b.n	80004a2 <__udivmoddi4+0x282>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <my_printf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void my_printf()
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
	uint8_t tmp;
	osMessageQueueGet(data_queue_Handle, &tmp, 0, HAL_MAX_DELAY);
 8000522:	4b09      	ldr	r3, [pc, #36]	@ (8000548 <my_printf+0x2c>)
 8000524:	6818      	ldr	r0, [r3, #0]
 8000526:	1df9      	adds	r1, r7, #7
 8000528:	f04f 33ff 	mov.w	r3, #4294967295
 800052c:	2200      	movs	r2, #0
 800052e:	f002 f815 	bl	800255c <osMessageQueueGet>
	HAL_UART_Transmit(&huart1, &tmp, 1, HAL_MAX_DELAY);
 8000532:	1df9      	adds	r1, r7, #7
 8000534:	f04f 33ff 	mov.w	r3, #4294967295
 8000538:	2201      	movs	r2, #1
 800053a:	4804      	ldr	r0, [pc, #16]	@ (800054c <my_printf+0x30>)
 800053c:	f001 fa54 	bl	80019e8 <HAL_UART_Transmit>
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000088 	.word	0x20000088
 800054c:	2000002c 	.word	0x2000002c

08000550 <put_string_to_Queue>:

void put_string_to_Queue(uint8_t* str)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	int str_len = strlen(str);
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f7ff fe41 	bl	80001e0 <strlen>
 800055e:	4603      	mov	r3, r0
 8000560:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < str_len; i++)
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	e00c      	b.n	8000582 <put_string_to_Queue+0x32>
	{
		osMessageQueuePut(data_queue_Handle, &str[i], 0, HAL_MAX_DELAY);
 8000568:	4b0a      	ldr	r3, [pc, #40]	@ (8000594 <put_string_to_Queue+0x44>)
 800056a:	6818      	ldr	r0, [r3, #0]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	18d1      	adds	r1, r2, r3
 8000572:	f04f 33ff 	mov.w	r3, #4294967295
 8000576:	2200      	movs	r2, #0
 8000578:	f001 ff90 	bl	800249c <osMessageQueuePut>
	for (int i = 0; i < str_len; i++)
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	3301      	adds	r3, #1
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	429a      	cmp	r2, r3
 8000588:	dbee      	blt.n	8000568 <put_string_to_Queue+0x18>
	}
}
 800058a:	bf00      	nop
 800058c:	bf00      	nop
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000088 	.word	0x20000088

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fa6c 	bl	8000a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f85c 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 f8e2 	bl	800076c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005a8:	f000 f8b6 	bl	8000718 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005ac:	f001 fe0c 	bl	80021c8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of data_queue_ */
  data_queue_Handle = osMessageQueueNew (128, sizeof(uint8_t), &data_queue__attributes);
 80005b0:	4a19      	ldr	r2, [pc, #100]	@ (8000618 <main+0x80>)
 80005b2:	2101      	movs	r1, #1
 80005b4:	2080      	movs	r0, #128	@ 0x80
 80005b6:	f001 fefe 	bl	80023b6 <osMessageQueueNew>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a17      	ldr	r2, [pc, #92]	@ (800061c <main+0x84>)
 80005be:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task1 */
  task1Handle = osThreadNew(task1_blink_red_led, NULL, &task1_attributes);
 80005c0:	4a17      	ldr	r2, [pc, #92]	@ (8000620 <main+0x88>)
 80005c2:	2100      	movs	r1, #0
 80005c4:	4817      	ldr	r0, [pc, #92]	@ (8000624 <main+0x8c>)
 80005c6:	f001 fe49 	bl	800225c <osThreadNew>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a16      	ldr	r2, [pc, #88]	@ (8000628 <main+0x90>)
 80005ce:	6013      	str	r3, [r2, #0]

  /* creation of task2 */
  task2Handle = osThreadNew(task2_blink_blue_led, NULL, &task2_attributes);
 80005d0:	4a16      	ldr	r2, [pc, #88]	@ (800062c <main+0x94>)
 80005d2:	2100      	movs	r1, #0
 80005d4:	4816      	ldr	r0, [pc, #88]	@ (8000630 <main+0x98>)
 80005d6:	f001 fe41 	bl	800225c <osThreadNew>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a15      	ldr	r2, [pc, #84]	@ (8000634 <main+0x9c>)
 80005de:	6013      	str	r3, [r2, #0]

  /* creation of task3 */
  task3Handle = osThreadNew(task3_send_hello, NULL, &task3_attributes);
 80005e0:	4a15      	ldr	r2, [pc, #84]	@ (8000638 <main+0xa0>)
 80005e2:	2100      	movs	r1, #0
 80005e4:	4815      	ldr	r0, [pc, #84]	@ (800063c <main+0xa4>)
 80005e6:	f001 fe39 	bl	800225c <osThreadNew>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a14      	ldr	r2, [pc, #80]	@ (8000640 <main+0xa8>)
 80005ee:	6013      	str	r3, [r2, #0]

  /* creation of task4 */
  task4Handle = osThreadNew(task4_send_xinchao, NULL, &task4_attributes);
 80005f0:	4a14      	ldr	r2, [pc, #80]	@ (8000644 <main+0xac>)
 80005f2:	2100      	movs	r1, #0
 80005f4:	4814      	ldr	r0, [pc, #80]	@ (8000648 <main+0xb0>)
 80005f6:	f001 fe31 	bl	800225c <osThreadNew>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a13      	ldr	r2, [pc, #76]	@ (800064c <main+0xb4>)
 80005fe:	6013      	str	r3, [r2, #0]

  /* creation of task5 */
  task5Handle = osThreadNew(task5_print_log, NULL, &task5_attributes);
 8000600:	4a13      	ldr	r2, [pc, #76]	@ (8000650 <main+0xb8>)
 8000602:	2100      	movs	r1, #0
 8000604:	4813      	ldr	r0, [pc, #76]	@ (8000654 <main+0xbc>)
 8000606:	f001 fe29 	bl	800225c <osThreadNew>
 800060a:	4603      	mov	r3, r0
 800060c:	4a12      	ldr	r2, [pc, #72]	@ (8000658 <main+0xc0>)
 800060e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000610:	f001 fdfe 	bl	8002210 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <main+0x7c>
 8000618:	08005248 	.word	0x08005248
 800061c:	20000088 	.word	0x20000088
 8000620:	08005194 	.word	0x08005194
 8000624:	080007f5 	.word	0x080007f5
 8000628:	20000074 	.word	0x20000074
 800062c:	080051b8 	.word	0x080051b8
 8000630:	08000819 	.word	0x08000819
 8000634:	20000078 	.word	0x20000078
 8000638:	080051dc 	.word	0x080051dc
 800063c:	0800083d 	.word	0x0800083d
 8000640:	2000007c 	.word	0x2000007c
 8000644:	08005200 	.word	0x08005200
 8000648:	08000875 	.word	0x08000875
 800064c:	20000080 	.word	0x20000080
 8000650:	08005224 	.word	0x08005224
 8000654:	080008a5 	.word	0x080008a5
 8000658:	20000084 	.word	0x20000084

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	@ 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	@ 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f004 fd1c 	bl	80050a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b22      	ldr	r3, [pc, #136]	@ (8000710 <SystemClock_Config+0xb4>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	4a21      	ldr	r2, [pc, #132]	@ (8000710 <SystemClock_Config+0xb4>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000690:	4b1f      	ldr	r3, [pc, #124]	@ (8000710 <SystemClock_Config+0xb4>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000714 <SystemClock_Config+0xb8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000714 <SystemClock_Config+0xb8>)
 80006a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b19      	ldr	r3, [pc, #100]	@ (8000714 <SystemClock_Config+0xb8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fce3 	bl	8001098 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006d8:	f000 f8ef 	bl	80008ba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 ff46 	bl	8001588 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000702:	f000 f8da 	bl	80008ba <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	@ 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800071c:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <MX_USART1_UART_Init+0x4c>)
 800071e:	4a12      	ldr	r2, [pc, #72]	@ (8000768 <MX_USART1_UART_Init+0x50>)
 8000720:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000722:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <MX_USART1_UART_Init+0x4c>)
 8000724:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000728:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <MX_USART1_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <MX_USART1_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <MX_USART1_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <MX_USART1_UART_Init+0x4c>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <MX_USART1_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <MX_USART1_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	@ (8000764 <MX_USART1_UART_Init+0x4c>)
 8000750:	f001 f8fa 	bl	8001948 <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800075a:	f000 f8ae 	bl	80008ba <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	2000002c 	.word	0x2000002c
 8000768:	40011000 	.word	0x40011000

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <MX_GPIO_Init+0x80>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a18      	ldr	r2, [pc, #96]	@ (80007ec <MX_GPIO_Init+0x80>)
 800078c:	f043 0308 	orr.w	r3, r3, #8
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <MX_GPIO_Init+0x80>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0308 	and.w	r3, r3, #8
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <MX_GPIO_Init+0x80>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a11      	ldr	r2, [pc, #68]	@ (80007ec <MX_GPIO_Init+0x80>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <MX_GPIO_Init+0x80>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80007c0:	480b      	ldr	r0, [pc, #44]	@ (80007f0 <MX_GPIO_Init+0x84>)
 80007c2:	f000 fc35 	bl	8001030 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80007c6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80007ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	4619      	mov	r1, r3
 80007de:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <MX_GPIO_Init+0x84>)
 80007e0:	f000 faa2 	bl	8000d28 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007e4:	bf00      	nop
 80007e6:	3720      	adds	r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020c00 	.word	0x40020c00

080007f4 <task1_blink_red_led>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task1_blink_red_led */
void task1_blink_red_led(void *argument)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80007fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000800:	4804      	ldr	r0, [pc, #16]	@ (8000814 <task1_blink_red_led+0x20>)
 8000802:	f000 fc2e 	bl	8001062 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000806:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800080a:	f001 fdb9 	bl	8002380 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800080e:	bf00      	nop
 8000810:	e7f4      	b.n	80007fc <task1_blink_red_led+0x8>
 8000812:	bf00      	nop
 8000814:	40020c00 	.word	0x40020c00

08000818 <task2_blink_blue_led>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task2_blink_blue_led */
void task2_blink_blue_led(void *argument)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task2_blink_blue_led */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000820:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000824:	4804      	ldr	r0, [pc, #16]	@ (8000838 <task2_blink_blue_led+0x20>)
 8000826:	f000 fc1c 	bl	8001062 <HAL_GPIO_TogglePin>
    osDelay(3000);
 800082a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800082e:	f001 fda7 	bl	8002380 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000832:	bf00      	nop
 8000834:	e7f4      	b.n	8000820 <task2_blink_blue_led+0x8>
 8000836:	bf00      	nop
 8000838:	40020c00 	.word	0x40020c00

0800083c <task3_send_hello>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task3_send_hello */
void task3_send_hello(void *argument)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task3_send_hello */
  /* Infinite loop */
	uint8_t data[] = "hello\n";
 8000844:	4a0a      	ldr	r2, [pc, #40]	@ (8000870 <task3_send_hello+0x34>)
 8000846:	f107 0308 	add.w	r3, r7, #8
 800084a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800084e:	6018      	str	r0, [r3, #0]
 8000850:	3304      	adds	r3, #4
 8000852:	8019      	strh	r1, [r3, #0]
 8000854:	3302      	adds	r3, #2
 8000856:	0c0a      	lsrs	r2, r1, #16
 8000858:	701a      	strb	r2, [r3, #0]
  for(;;)
  {
	  put_string_to_Queue(data);
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fe76 	bl	8000550 <put_string_to_Queue>
    osDelay(1000);
 8000864:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000868:	f001 fd8a 	bl	8002380 <osDelay>
	  put_string_to_Queue(data);
 800086c:	bf00      	nop
 800086e:	e7f4      	b.n	800085a <task3_send_hello+0x1e>
 8000870:	08005168 	.word	0x08005168

08000874 <task4_send_xinchao>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task4_send_xinchao */
void task4_send_xinchao(void *argument)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task4_send_xinchao */
  /* Infinite loop */
  uint8_t data[] = "xin chao\n";
 800087c:	4a08      	ldr	r2, [pc, #32]	@ (80008a0 <task4_send_xinchao+0x2c>)
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	ca07      	ldmia	r2, {r0, r1, r2}
 8000884:	c303      	stmia	r3!, {r0, r1}
 8000886:	801a      	strh	r2, [r3, #0]
	for(;;)
  {
	  put_string_to_Queue(data);
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fe5f 	bl	8000550 <put_string_to_Queue>
    osDelay(1000);
 8000892:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000896:	f001 fd73 	bl	8002380 <osDelay>
	  put_string_to_Queue(data);
 800089a:	bf00      	nop
 800089c:	e7f4      	b.n	8000888 <task4_send_xinchao+0x14>
 800089e:	bf00      	nop
 80008a0:	08005170 	.word	0x08005170

080008a4 <task5_print_log>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task5_print_log */
void task5_print_log(void *argument)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task5_print_log */
  /* Infinite loop */
  for(;;)
  {
	  my_printf();
 80008ac:	f7ff fe36 	bl	800051c <my_printf>
    osDelay(100);
 80008b0:	2064      	movs	r0, #100	@ 0x64
 80008b2:	f001 fd65 	bl	8002380 <osDelay>
	  my_printf();
 80008b6:	bf00      	nop
 80008b8:	e7f8      	b.n	80008ac <task5_print_log+0x8>

080008ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008be:	b672      	cpsid	i
}
 80008c0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c2:	bf00      	nop
 80008c4:	e7fd      	b.n	80008c2 <Error_Handler+0x8>
	...

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b12      	ldr	r3, [pc, #72]	@ (800091c <HAL_MspInit+0x54>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d6:	4a11      	ldr	r2, [pc, #68]	@ (800091c <HAL_MspInit+0x54>)
 80008d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008de:	4b0f      	ldr	r3, [pc, #60]	@ (800091c <HAL_MspInit+0x54>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b0b      	ldr	r3, [pc, #44]	@ (800091c <HAL_MspInit+0x54>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f2:	4a0a      	ldr	r2, [pc, #40]	@ (800091c <HAL_MspInit+0x54>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008fa:	4b08      	ldr	r3, [pc, #32]	@ (800091c <HAL_MspInit+0x54>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	210f      	movs	r1, #15
 800090a:	f06f 0001 	mvn.w	r0, #1
 800090e:	f000 f9e2 	bl	8000cd6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800

08000920 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	@ 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a19      	ldr	r2, [pc, #100]	@ (80009a4 <HAL_UART_MspInit+0x84>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d12b      	bne.n	800099a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	4b18      	ldr	r3, [pc, #96]	@ (80009a8 <HAL_UART_MspInit+0x88>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094a:	4a17      	ldr	r2, [pc, #92]	@ (80009a8 <HAL_UART_MspInit+0x88>)
 800094c:	f043 0310 	orr.w	r3, r3, #16
 8000950:	6453      	str	r3, [r2, #68]	@ 0x44
 8000952:	4b15      	ldr	r3, [pc, #84]	@ (80009a8 <HAL_UART_MspInit+0x88>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000956:	f003 0310 	and.w	r3, r3, #16
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <HAL_UART_MspInit+0x88>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	4a10      	ldr	r2, [pc, #64]	@ (80009a8 <HAL_UART_MspInit+0x88>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	6313      	str	r3, [r2, #48]	@ 0x30
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <HAL_UART_MspInit+0x88>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800097a:	23c0      	movs	r3, #192	@ 0xc0
 800097c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800098a:	2307      	movs	r3, #7
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	4805      	ldr	r0, [pc, #20]	@ (80009ac <HAL_UART_MspInit+0x8c>)
 8000996:	f000 f9c7 	bl	8000d28 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800099a:	bf00      	nop
 800099c:	3728      	adds	r7, #40	@ 0x28
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40011000 	.word	0x40011000
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020400 	.word	0x40020400

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <NMI_Handler+0x4>

080009b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <MemManage_Handler+0x4>

080009c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ea:	f000 f897 	bl	8000b1c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009ee:	f003 fadd 	bl	8003fac <xTaskGetSchedulerState>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d001      	beq.n	80009fc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009f8:	f004 f8d6 	bl	8004ba8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <SystemInit+0x20>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a0a:	4a05      	ldr	r2, [pc, #20]	@ (8000a20 <SystemInit+0x20>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8000a24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a28:	f7ff ffea 	bl	8000a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a2c:	480c      	ldr	r0, [pc, #48]	@ (8000a60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a2e:	490d      	ldr	r1, [pc, #52]	@ (8000a64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a30:	4a0d      	ldr	r2, [pc, #52]	@ (8000a68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0a      	ldr	r2, [pc, #40]	@ (8000a6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a44:	4c0a      	ldr	r4, [pc, #40]	@ (8000a70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a52:	f004 fb31 	bl	80050b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a56:	f7ff fd9f 	bl	8000598 <main>
  bx  lr    
 8000a5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a68:	08005288 	.word	0x08005288
  ldr r2, =_sbss
 8000a6c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a70:	200049e0 	.word	0x200049e0

08000a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
   b  Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab8 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab8 <HAL_Init+0x40>)
 8000a82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a88:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <HAL_Init+0x40>)
 8000a8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	@ (8000ab8 <HAL_Init+0x40>)
 8000a9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f90d 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	200f      	movs	r0, #15
 8000aa8:	f000 f808 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff ff0c 	bl	80008c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023c00 	.word	0x40023c00

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac4:	4b12      	ldr	r3, [pc, #72]	@ (8000b10 <HAL_InitTick+0x54>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <HAL_InitTick+0x58>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f917 	bl	8000d0e <HAL_SYSTICK_Config>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00e      	b.n	8000b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	d80a      	bhi.n	8000b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	f000 f8ed 	bl	8000cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000afc:	4a06      	ldr	r2, [pc, #24]	@ (8000b18 <HAL_InitTick+0x5c>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000004 	.word	0x20000004

08000b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_IncTick+0x20>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <HAL_IncTick+0x24>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a04      	ldr	r2, [pc, #16]	@ (8000b40 <HAL_IncTick+0x24>)
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	2000008c 	.word	0x2000008c

08000b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;
 8000b48:	4b03      	ldr	r3, [pc, #12]	@ (8000b58 <HAL_GetTick+0x14>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	2000008c 	.word	0x2000008c

08000b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	60d3      	str	r3, [r2, #12]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	@ (8000bbc <__NVIC_GetPriorityGrouping+0x18>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	f003 0307 	and.w	r3, r3, #7
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	db0a      	blt.n	8000bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	490c      	ldr	r1, [pc, #48]	@ (8000c0c <__NVIC_SetPriority+0x4c>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	0112      	lsls	r2, r2, #4
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	440b      	add	r3, r1
 8000be4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be8:	e00a      	b.n	8000c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4908      	ldr	r1, [pc, #32]	@ (8000c10 <__NVIC_SetPriority+0x50>)
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	f003 030f 	and.w	r3, r3, #15
 8000bf6:	3b04      	subs	r3, #4
 8000bf8:	0112      	lsls	r2, r2, #4
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	761a      	strb	r2, [r3, #24]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000e100 	.word	0xe000e100
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b089      	sub	sp, #36	@ 0x24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	f1c3 0307 	rsb	r3, r3, #7
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	bf28      	it	cs
 8000c32:	2304      	movcs	r3, #4
 8000c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3304      	adds	r3, #4
 8000c3a:	2b06      	cmp	r3, #6
 8000c3c:	d902      	bls.n	8000c44 <NVIC_EncodePriority+0x30>
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3b03      	subs	r3, #3
 8000c42:	e000      	b.n	8000c46 <NVIC_EncodePriority+0x32>
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43da      	mvns	r2, r3
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	401a      	ands	r2, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa01 f303 	lsl.w	r3, r1, r3
 8000c66:	43d9      	mvns	r1, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	4313      	orrs	r3, r2
         );
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3724      	adds	r7, #36	@ 0x24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c8c:	d301      	bcc.n	8000c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00f      	b.n	8000cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c92:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <SysTick_Config+0x40>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f7ff ff8e 	bl	8000bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <SysTick_Config+0x40>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000caa:	4b04      	ldr	r3, [pc, #16]	@ (8000cbc <SysTick_Config+0x40>)
 8000cac:	2207      	movs	r2, #7
 8000cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	e000e010 	.word	0xe000e010

08000cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff ff47 	bl	8000b5c <__NVIC_SetPriorityGrouping>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce8:	f7ff ff5c 	bl	8000ba4 <__NVIC_GetPriorityGrouping>
 8000cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	6978      	ldr	r0, [r7, #20]
 8000cf4:	f7ff ff8e 	bl	8000c14 <NVIC_EncodePriority>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff5d 	bl	8000bc0 <__NVIC_SetPriority>
}
 8000d06:	bf00      	nop
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffb0 	bl	8000c7c <SysTick_Config>
 8000d1c:	4603      	mov	r3, r0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	@ 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
 8000d42:	e159      	b.n	8000ff8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d44:	2201      	movs	r2, #1
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	f040 8148 	bne.w	8000ff2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d005      	beq.n	8000d7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d130      	bne.n	8000ddc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	2203      	movs	r2, #3
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	68da      	ldr	r2, [r3, #12]
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db0:	2201      	movs	r2, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	091b      	lsrs	r3, r3, #4
 8000dc6:	f003 0201 	and.w	r2, r3, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	d017      	beq.n	8000e18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	2203      	movs	r2, #3
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d123      	bne.n	8000e6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	08da      	lsrs	r2, r3, #3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3208      	adds	r2, #8
 8000e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	f003 0307 	and.w	r3, r3, #7
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	220f      	movs	r2, #15
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	691a      	ldr	r2, [r3, #16]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	08da      	lsrs	r2, r3, #3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3208      	adds	r2, #8
 8000e66:	69b9      	ldr	r1, [r7, #24]
 8000e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0203 	and.w	r2, r3, #3
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	f000 80a2 	beq.w	8000ff2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b57      	ldr	r3, [pc, #348]	@ (8001010 <HAL_GPIO_Init+0x2e8>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	4a56      	ldr	r2, [pc, #344]	@ (8001010 <HAL_GPIO_Init+0x2e8>)
 8000eb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ebe:	4b54      	ldr	r3, [pc, #336]	@ (8001010 <HAL_GPIO_Init+0x2e8>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eca:	4a52      	ldr	r2, [pc, #328]	@ (8001014 <HAL_GPIO_Init+0x2ec>)
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	089b      	lsrs	r3, r3, #2
 8000ed0:	3302      	adds	r3, #2
 8000ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a49      	ldr	r2, [pc, #292]	@ (8001018 <HAL_GPIO_Init+0x2f0>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d019      	beq.n	8000f2a <HAL_GPIO_Init+0x202>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a48      	ldr	r2, [pc, #288]	@ (800101c <HAL_GPIO_Init+0x2f4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d013      	beq.n	8000f26 <HAL_GPIO_Init+0x1fe>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a47      	ldr	r2, [pc, #284]	@ (8001020 <HAL_GPIO_Init+0x2f8>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d00d      	beq.n	8000f22 <HAL_GPIO_Init+0x1fa>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a46      	ldr	r2, [pc, #280]	@ (8001024 <HAL_GPIO_Init+0x2fc>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d007      	beq.n	8000f1e <HAL_GPIO_Init+0x1f6>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a45      	ldr	r2, [pc, #276]	@ (8001028 <HAL_GPIO_Init+0x300>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d101      	bne.n	8000f1a <HAL_GPIO_Init+0x1f2>
 8000f16:	2304      	movs	r3, #4
 8000f18:	e008      	b.n	8000f2c <HAL_GPIO_Init+0x204>
 8000f1a:	2307      	movs	r3, #7
 8000f1c:	e006      	b.n	8000f2c <HAL_GPIO_Init+0x204>
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e004      	b.n	8000f2c <HAL_GPIO_Init+0x204>
 8000f22:	2302      	movs	r3, #2
 8000f24:	e002      	b.n	8000f2c <HAL_GPIO_Init+0x204>
 8000f26:	2301      	movs	r3, #1
 8000f28:	e000      	b.n	8000f2c <HAL_GPIO_Init+0x204>
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	69fa      	ldr	r2, [r7, #28]
 8000f2e:	f002 0203 	and.w	r2, r2, #3
 8000f32:	0092      	lsls	r2, r2, #2
 8000f34:	4093      	lsls	r3, r2
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f3c:	4935      	ldr	r1, [pc, #212]	@ (8001014 <HAL_GPIO_Init+0x2ec>)
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	089b      	lsrs	r3, r3, #2
 8000f42:	3302      	adds	r3, #2
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f4a:	4b38      	ldr	r3, [pc, #224]	@ (800102c <HAL_GPIO_Init+0x304>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f6e:	4a2f      	ldr	r2, [pc, #188]	@ (800102c <HAL_GPIO_Init+0x304>)
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f74:	4b2d      	ldr	r3, [pc, #180]	@ (800102c <HAL_GPIO_Init+0x304>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f98:	4a24      	ldr	r2, [pc, #144]	@ (800102c <HAL_GPIO_Init+0x304>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f9e:	4b23      	ldr	r3, [pc, #140]	@ (800102c <HAL_GPIO_Init+0x304>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fc2:	4a1a      	ldr	r2, [pc, #104]	@ (800102c <HAL_GPIO_Init+0x304>)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc8:	4b18      	ldr	r3, [pc, #96]	@ (800102c <HAL_GPIO_Init+0x304>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fec:	4a0f      	ldr	r2, [pc, #60]	@ (800102c <HAL_GPIO_Init+0x304>)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	2b0f      	cmp	r3, #15
 8000ffc:	f67f aea2 	bls.w	8000d44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3724      	adds	r7, #36	@ 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40013800 	.word	0x40013800
 8001018:	40020000 	.word	0x40020000
 800101c:	40020400 	.word	0x40020400
 8001020:	40020800 	.word	0x40020800
 8001024:	40020c00 	.word	0x40020c00
 8001028:	40021000 	.word	0x40021000
 800102c:	40013c00 	.word	0x40013c00

08001030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]
 800103c:	4613      	mov	r3, r2
 800103e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001040:	787b      	ldrb	r3, [r7, #1]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001046:	887a      	ldrh	r2, [r7, #2]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800104c:	e003      	b.n	8001056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800104e:	887b      	ldrh	r3, [r7, #2]
 8001050:	041a      	lsls	r2, r3, #16
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	619a      	str	r2, [r3, #24]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001062:	b480      	push	{r7}
 8001064:	b085      	sub	sp, #20
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	460b      	mov	r3, r1
 800106c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001074:	887a      	ldrh	r2, [r7, #2]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4013      	ands	r3, r2
 800107a:	041a      	lsls	r2, r3, #16
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	43d9      	mvns	r1, r3
 8001080:	887b      	ldrh	r3, [r7, #2]
 8001082:	400b      	ands	r3, r1
 8001084:	431a      	orrs	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	619a      	str	r2, [r3, #24]
}
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e267      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d075      	beq.n	80011a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010b6:	4b88      	ldr	r3, [pc, #544]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 030c 	and.w	r3, r3, #12
 80010be:	2b04      	cmp	r3, #4
 80010c0:	d00c      	beq.n	80010dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010c2:	4b85      	ldr	r3, [pc, #532]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010ca:	2b08      	cmp	r3, #8
 80010cc:	d112      	bne.n	80010f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ce:	4b82      	ldr	r3, [pc, #520]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010da:	d10b      	bne.n	80010f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010dc:	4b7e      	ldr	r3, [pc, #504]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d05b      	beq.n	80011a0 <HAL_RCC_OscConfig+0x108>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d157      	bne.n	80011a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e242      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010fc:	d106      	bne.n	800110c <HAL_RCC_OscConfig+0x74>
 80010fe:	4b76      	ldr	r3, [pc, #472]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a75      	ldr	r2, [pc, #468]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e01d      	b.n	8001148 <HAL_RCC_OscConfig+0xb0>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001114:	d10c      	bne.n	8001130 <HAL_RCC_OscConfig+0x98>
 8001116:	4b70      	ldr	r3, [pc, #448]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a6f      	ldr	r2, [pc, #444]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 800111c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	4b6d      	ldr	r3, [pc, #436]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a6c      	ldr	r2, [pc, #432]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e00b      	b.n	8001148 <HAL_RCC_OscConfig+0xb0>
 8001130:	4b69      	ldr	r3, [pc, #420]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a68      	ldr	r2, [pc, #416]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001136:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b66      	ldr	r3, [pc, #408]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a65      	ldr	r2, [pc, #404]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001142:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d013      	beq.n	8001178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fcf8 	bl	8000b44 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff fcf4 	bl	8000b44 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	@ 0x64
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e207      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116a:	4b5b      	ldr	r3, [pc, #364]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f0      	beq.n	8001158 <HAL_RCC_OscConfig+0xc0>
 8001176:	e014      	b.n	80011a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fce4 	bl	8000b44 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001180:	f7ff fce0 	bl	8000b44 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b64      	cmp	r3, #100	@ 0x64
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e1f3      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001192:	4b51      	ldr	r3, [pc, #324]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f0      	bne.n	8001180 <HAL_RCC_OscConfig+0xe8>
 800119e:	e000      	b.n	80011a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d063      	beq.n	8001276 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011ae:	4b4a      	ldr	r3, [pc, #296]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00b      	beq.n	80011d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ba:	4b47      	ldr	r3, [pc, #284]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d11c      	bne.n	8001200 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c6:	4b44      	ldr	r3, [pc, #272]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d116      	bne.n	8001200 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d2:	4b41      	ldr	r3, [pc, #260]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d005      	beq.n	80011ea <HAL_RCC_OscConfig+0x152>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d001      	beq.n	80011ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e1c7      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ea:	4b3b      	ldr	r3, [pc, #236]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	4937      	ldr	r1, [pc, #220]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fe:	e03a      	b.n	8001276 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d020      	beq.n	800124a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001208:	4b34      	ldr	r3, [pc, #208]	@ (80012dc <HAL_RCC_OscConfig+0x244>)
 800120a:	2201      	movs	r2, #1
 800120c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120e:	f7ff fc99 	bl	8000b44 <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001216:	f7ff fc95 	bl	8000b44 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e1a8      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001228:	4b2b      	ldr	r3, [pc, #172]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0f0      	beq.n	8001216 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001234:	4b28      	ldr	r3, [pc, #160]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4925      	ldr	r1, [pc, #148]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001244:	4313      	orrs	r3, r2
 8001246:	600b      	str	r3, [r1, #0]
 8001248:	e015      	b.n	8001276 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800124a:	4b24      	ldr	r3, [pc, #144]	@ (80012dc <HAL_RCC_OscConfig+0x244>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001250:	f7ff fc78 	bl	8000b44 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001258:	f7ff fc74 	bl	8000b44 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e187      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126a:	4b1b      	ldr	r3, [pc, #108]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	2b00      	cmp	r3, #0
 8001280:	d036      	beq.n	80012f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d016      	beq.n	80012b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <HAL_RCC_OscConfig+0x248>)
 800128c:	2201      	movs	r2, #1
 800128e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001290:	f7ff fc58 	bl	8000b44 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001298:	f7ff fc54 	bl	8000b44 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e167      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012aa:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80012ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0x200>
 80012b6:	e01b      	b.n	80012f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b8:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <HAL_RCC_OscConfig+0x248>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012be:	f7ff fc41 	bl	8000b44 <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c4:	e00e      	b.n	80012e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c6:	f7ff fc3d 	bl	8000b44 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d907      	bls.n	80012e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e150      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
 80012d8:	40023800 	.word	0x40023800
 80012dc:	42470000 	.word	0x42470000
 80012e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e4:	4b88      	ldr	r3, [pc, #544]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 80012e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1ea      	bne.n	80012c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 8097 	beq.w	800142c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001302:	4b81      	ldr	r3, [pc, #516]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d10f      	bne.n	800132e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	4b7d      	ldr	r3, [pc, #500]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001316:	4a7c      	ldr	r2, [pc, #496]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800131c:	6413      	str	r3, [r2, #64]	@ 0x40
 800131e:	4b7a      	ldr	r3, [pc, #488]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800132a:	2301      	movs	r3, #1
 800132c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132e:	4b77      	ldr	r3, [pc, #476]	@ (800150c <HAL_RCC_OscConfig+0x474>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001336:	2b00      	cmp	r3, #0
 8001338:	d118      	bne.n	800136c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800133a:	4b74      	ldr	r3, [pc, #464]	@ (800150c <HAL_RCC_OscConfig+0x474>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a73      	ldr	r2, [pc, #460]	@ (800150c <HAL_RCC_OscConfig+0x474>)
 8001340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001346:	f7ff fbfd 	bl	8000b44 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800134e:	f7ff fbf9 	bl	8000b44 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e10c      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001360:	4b6a      	ldr	r3, [pc, #424]	@ (800150c <HAL_RCC_OscConfig+0x474>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d106      	bne.n	8001382 <HAL_RCC_OscConfig+0x2ea>
 8001374:	4b64      	ldr	r3, [pc, #400]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001378:	4a63      	ldr	r2, [pc, #396]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001380:	e01c      	b.n	80013bc <HAL_RCC_OscConfig+0x324>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	2b05      	cmp	r3, #5
 8001388:	d10c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x30c>
 800138a:	4b5f      	ldr	r3, [pc, #380]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 800138c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800138e:	4a5e      	ldr	r2, [pc, #376]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	6713      	str	r3, [r2, #112]	@ 0x70
 8001396:	4b5c      	ldr	r3, [pc, #368]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800139a:	4a5b      	ldr	r2, [pc, #364]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80013a2:	e00b      	b.n	80013bc <HAL_RCC_OscConfig+0x324>
 80013a4:	4b58      	ldr	r3, [pc, #352]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 80013a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a8:	4a57      	ldr	r2, [pc, #348]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 80013aa:	f023 0301 	bic.w	r3, r3, #1
 80013ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80013b0:	4b55      	ldr	r3, [pc, #340]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 80013b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b4:	4a54      	ldr	r2, [pc, #336]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 80013b6:	f023 0304 	bic.w	r3, r3, #4
 80013ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d015      	beq.n	80013f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c4:	f7ff fbbe 	bl	8000b44 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ca:	e00a      	b.n	80013e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013cc:	f7ff fbba 	bl	8000b44 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013da:	4293      	cmp	r3, r2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e0cb      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e2:	4b49      	ldr	r3, [pc, #292]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 80013e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0ee      	beq.n	80013cc <HAL_RCC_OscConfig+0x334>
 80013ee:	e014      	b.n	800141a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f0:	f7ff fba8 	bl	8000b44 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f6:	e00a      	b.n	800140e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f8:	f7ff fba4 	bl	8000b44 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001406:	4293      	cmp	r3, r2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e0b5      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140e:	4b3e      	ldr	r3, [pc, #248]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1ee      	bne.n	80013f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800141a:	7dfb      	ldrb	r3, [r7, #23]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d105      	bne.n	800142c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001420:	4b39      	ldr	r3, [pc, #228]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	4a38      	ldr	r2, [pc, #224]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001426:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800142a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80a1 	beq.w	8001578 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001436:	4b34      	ldr	r3, [pc, #208]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	2b08      	cmp	r3, #8
 8001440:	d05c      	beq.n	80014fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d141      	bne.n	80014ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144a:	4b31      	ldr	r3, [pc, #196]	@ (8001510 <HAL_RCC_OscConfig+0x478>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fb78 	bl	8000b44 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001458:	f7ff fb74 	bl	8000b44 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e087      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146a:	4b27      	ldr	r3, [pc, #156]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69da      	ldr	r2, [r3, #28]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001484:	019b      	lsls	r3, r3, #6
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800148c:	085b      	lsrs	r3, r3, #1
 800148e:	3b01      	subs	r3, #1
 8001490:	041b      	lsls	r3, r3, #16
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001498:	061b      	lsls	r3, r3, #24
 800149a:	491b      	ldr	r1, [pc, #108]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <HAL_RCC_OscConfig+0x478>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a6:	f7ff fb4d 	bl	8000b44 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ae:	f7ff fb49 	bl	8000b44 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e05c      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c0:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x416>
 80014cc:	e054      	b.n	8001578 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ce:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <HAL_RCC_OscConfig+0x478>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fb36 	bl	8000b44 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014dc:	f7ff fb32 	bl	8000b44 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e045      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0x444>
 80014fa:	e03d      	b.n	8001578 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d107      	bne.n	8001514 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e038      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
 8001508:	40023800 	.word	0x40023800
 800150c:	40007000 	.word	0x40007000
 8001510:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001514:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <HAL_RCC_OscConfig+0x4ec>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d028      	beq.n	8001574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800152c:	429a      	cmp	r2, r3
 800152e:	d121      	bne.n	8001574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153a:	429a      	cmp	r2, r3
 800153c:	d11a      	bne.n	8001574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001544:	4013      	ands	r3, r2
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800154a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800154c:	4293      	cmp	r3, r2
 800154e:	d111      	bne.n	8001574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800155a:	085b      	lsrs	r3, r3, #1
 800155c:	3b01      	subs	r3, #1
 800155e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001560:	429a      	cmp	r2, r3
 8001562:	d107      	bne.n	8001574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800156e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001570:	429a      	cmp	r2, r3
 8001572:	d001      	beq.n	8001578 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800

08001588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0cc      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800159c:	4b68      	ldr	r3, [pc, #416]	@ (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d90c      	bls.n	80015c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015aa:	4b65      	ldr	r3, [pc, #404]	@ (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b2:	4b63      	ldr	r3, [pc, #396]	@ (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d001      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0b8      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d020      	beq.n	8001612 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015dc:	4b59      	ldr	r3, [pc, #356]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	4a58      	ldr	r2, [pc, #352]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f4:	4b53      	ldr	r3, [pc, #332]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4a52      	ldr	r2, [pc, #328]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001600:	4b50      	ldr	r3, [pc, #320]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	494d      	ldr	r1, [pc, #308]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	4313      	orrs	r3, r2
 8001610:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d044      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d107      	bne.n	8001636 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	4b47      	ldr	r3, [pc, #284]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d119      	bne.n	8001666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e07f      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d003      	beq.n	8001646 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001642:	2b03      	cmp	r3, #3
 8001644:	d107      	bne.n	8001656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001646:	4b3f      	ldr	r3, [pc, #252]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d109      	bne.n	8001666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e06f      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001656:	4b3b      	ldr	r3, [pc, #236]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e067      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001666:	4b37      	ldr	r3, [pc, #220]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f023 0203 	bic.w	r2, r3, #3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	4934      	ldr	r1, [pc, #208]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	4313      	orrs	r3, r2
 8001676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001678:	f7ff fa64 	bl	8000b44 <HAL_GetTick>
 800167c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167e:	e00a      	b.n	8001696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001680:	f7ff fa60 	bl	8000b44 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e04f      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001696:	4b2b      	ldr	r3, [pc, #172]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 020c 	and.w	r2, r3, #12
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d1eb      	bne.n	8001680 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016a8:	4b25      	ldr	r3, [pc, #148]	@ (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d20c      	bcs.n	80016d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b6:	4b22      	ldr	r3, [pc, #136]	@ (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016be:	4b20      	ldr	r3, [pc, #128]	@ (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e032      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d008      	beq.n	80016ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016dc:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	4916      	ldr	r1, [pc, #88]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d009      	beq.n	800170e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016fa:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	490e      	ldr	r1, [pc, #56]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	4313      	orrs	r3, r2
 800170c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800170e:	f000 f821 	bl	8001754 <HAL_RCC_GetSysClockFreq>
 8001712:	4602      	mov	r2, r0
 8001714:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	490a      	ldr	r1, [pc, #40]	@ (8001748 <HAL_RCC_ClockConfig+0x1c0>)
 8001720:	5ccb      	ldrb	r3, [r1, r3]
 8001722:	fa22 f303 	lsr.w	r3, r2, r3
 8001726:	4a09      	ldr	r2, [pc, #36]	@ (800174c <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <HAL_RCC_ClockConfig+0x1c8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff f9c4 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023c00 	.word	0x40023c00
 8001744:	40023800 	.word	0x40023800
 8001748:	08005260 	.word	0x08005260
 800174c:	20000000 	.word	0x20000000
 8001750:	20000004 	.word	0x20000004

08001754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001758:	b090      	sub	sp, #64	@ 0x40
 800175a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800176c:	4b59      	ldr	r3, [pc, #356]	@ (80018d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 030c 	and.w	r3, r3, #12
 8001774:	2b08      	cmp	r3, #8
 8001776:	d00d      	beq.n	8001794 <HAL_RCC_GetSysClockFreq+0x40>
 8001778:	2b08      	cmp	r3, #8
 800177a:	f200 80a1 	bhi.w	80018c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <HAL_RCC_GetSysClockFreq+0x34>
 8001782:	2b04      	cmp	r3, #4
 8001784:	d003      	beq.n	800178e <HAL_RCC_GetSysClockFreq+0x3a>
 8001786:	e09b      	b.n	80018c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001788:	4b53      	ldr	r3, [pc, #332]	@ (80018d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800178a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800178c:	e09b      	b.n	80018c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800178e:	4b53      	ldr	r3, [pc, #332]	@ (80018dc <HAL_RCC_GetSysClockFreq+0x188>)
 8001790:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001792:	e098      	b.n	80018c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001794:	4b4f      	ldr	r3, [pc, #316]	@ (80018d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800179c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800179e:	4b4d      	ldr	r3, [pc, #308]	@ (80018d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d028      	beq.n	80017fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017aa:	4b4a      	ldr	r3, [pc, #296]	@ (80018d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	099b      	lsrs	r3, r3, #6
 80017b0:	2200      	movs	r2, #0
 80017b2:	623b      	str	r3, [r7, #32]
 80017b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80017b6:	6a3b      	ldr	r3, [r7, #32]
 80017b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017bc:	2100      	movs	r1, #0
 80017be:	4b47      	ldr	r3, [pc, #284]	@ (80018dc <HAL_RCC_GetSysClockFreq+0x188>)
 80017c0:	fb03 f201 	mul.w	r2, r3, r1
 80017c4:	2300      	movs	r3, #0
 80017c6:	fb00 f303 	mul.w	r3, r0, r3
 80017ca:	4413      	add	r3, r2
 80017cc:	4a43      	ldr	r2, [pc, #268]	@ (80018dc <HAL_RCC_GetSysClockFreq+0x188>)
 80017ce:	fba0 1202 	umull	r1, r2, r0, r2
 80017d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017d4:	460a      	mov	r2, r1
 80017d6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80017d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017da:	4413      	add	r3, r2
 80017dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017e0:	2200      	movs	r2, #0
 80017e2:	61bb      	str	r3, [r7, #24]
 80017e4:	61fa      	str	r2, [r7, #28]
 80017e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80017ee:	f7fe fcff 	bl	80001f0 <__aeabi_uldivmod>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4613      	mov	r3, r2
 80017f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017fa:	e053      	b.n	80018a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fc:	4b35      	ldr	r3, [pc, #212]	@ (80018d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	099b      	lsrs	r3, r3, #6
 8001802:	2200      	movs	r2, #0
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	617a      	str	r2, [r7, #20]
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800180e:	f04f 0b00 	mov.w	fp, #0
 8001812:	4652      	mov	r2, sl
 8001814:	465b      	mov	r3, fp
 8001816:	f04f 0000 	mov.w	r0, #0
 800181a:	f04f 0100 	mov.w	r1, #0
 800181e:	0159      	lsls	r1, r3, #5
 8001820:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001824:	0150      	lsls	r0, r2, #5
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	ebb2 080a 	subs.w	r8, r2, sl
 800182e:	eb63 090b 	sbc.w	r9, r3, fp
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	f04f 0300 	mov.w	r3, #0
 800183a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800183e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001842:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001846:	ebb2 0408 	subs.w	r4, r2, r8
 800184a:	eb63 0509 	sbc.w	r5, r3, r9
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	00eb      	lsls	r3, r5, #3
 8001858:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800185c:	00e2      	lsls	r2, r4, #3
 800185e:	4614      	mov	r4, r2
 8001860:	461d      	mov	r5, r3
 8001862:	eb14 030a 	adds.w	r3, r4, sl
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	eb45 030b 	adc.w	r3, r5, fp
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	e9d7 4500 	ldrd	r4, r5, [r7]
 800187a:	4629      	mov	r1, r5
 800187c:	028b      	lsls	r3, r1, #10
 800187e:	4621      	mov	r1, r4
 8001880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001884:	4621      	mov	r1, r4
 8001886:	028a      	lsls	r2, r1, #10
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800188e:	2200      	movs	r2, #0
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	60fa      	str	r2, [r7, #12]
 8001894:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001898:	f7fe fcaa 	bl	80001f0 <__aeabi_uldivmod>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4613      	mov	r3, r2
 80018a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018a4:	4b0b      	ldr	r3, [pc, #44]	@ (80018d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	0c1b      	lsrs	r3, r3, #16
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	3301      	adds	r3, #1
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80018b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80018b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018be:	e002      	b.n	80018c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018c0:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80018c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3740      	adds	r7, #64	@ 0x40
 80018cc:	46bd      	mov	sp, r7
 80018ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800
 80018d8:	00f42400 	.word	0x00f42400
 80018dc:	017d7840 	.word	0x017d7840

080018e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018e4:	4b03      	ldr	r3, [pc, #12]	@ (80018f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000000 	.word	0x20000000

080018f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018fc:	f7ff fff0 	bl	80018e0 <HAL_RCC_GetHCLKFreq>
 8001900:	4602      	mov	r2, r0
 8001902:	4b05      	ldr	r3, [pc, #20]	@ (8001918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	0a9b      	lsrs	r3, r3, #10
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	4903      	ldr	r1, [pc, #12]	@ (800191c <HAL_RCC_GetPCLK1Freq+0x24>)
 800190e:	5ccb      	ldrb	r3, [r1, r3]
 8001910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001914:	4618      	mov	r0, r3
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40023800 	.word	0x40023800
 800191c:	08005270 	.word	0x08005270

08001920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001924:	f7ff ffdc 	bl	80018e0 <HAL_RCC_GetHCLKFreq>
 8001928:	4602      	mov	r2, r0
 800192a:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	0b5b      	lsrs	r3, r3, #13
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	4903      	ldr	r1, [pc, #12]	@ (8001944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001936:	5ccb      	ldrb	r3, [r1, r3]
 8001938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800193c:	4618      	mov	r0, r3
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40023800 	.word	0x40023800
 8001944:	08005270 	.word	0x08005270

08001948 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e042      	b.n	80019e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d106      	bne.n	8001974 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7fe ffd6 	bl	8000920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2224      	movs	r2, #36	@ 0x24
 8001978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800198a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 f973 	bl	8001c78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80019a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	695a      	ldr	r2, [r3, #20]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80019b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80019c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2220      	movs	r2, #32
 80019cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2220      	movs	r2, #32
 80019d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	@ 0x28
 80019ec:	af02      	add	r7, sp, #8
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	4613      	mov	r3, r2
 80019f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b20      	cmp	r3, #32
 8001a06:	d175      	bne.n	8001af4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <HAL_UART_Transmit+0x2c>
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e06e      	b.n	8001af6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2221      	movs	r2, #33	@ 0x21
 8001a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a26:	f7ff f88d 	bl	8000b44 <HAL_GetTick>
 8001a2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	88fa      	ldrh	r2, [r7, #6]
 8001a30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	88fa      	ldrh	r2, [r7, #6]
 8001a36:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a40:	d108      	bne.n	8001a54 <HAL_UART_Transmit+0x6c>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d104      	bne.n	8001a54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	61bb      	str	r3, [r7, #24]
 8001a52:	e003      	b.n	8001a5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001a5c:	e02e      	b.n	8001abc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	2200      	movs	r2, #0
 8001a66:	2180      	movs	r1, #128	@ 0x80
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f000 f848 	bl	8001afe <UART_WaitOnFlagUntilTimeout>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2220      	movs	r2, #32
 8001a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e03a      	b.n	8001af6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10b      	bne.n	8001a9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	3302      	adds	r3, #2
 8001a9a:	61bb      	str	r3, [r7, #24]
 8001a9c:	e007      	b.n	8001aae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	781a      	ldrb	r2, [r3, #0]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1cb      	bne.n	8001a5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2200      	movs	r2, #0
 8001ace:	2140      	movs	r1, #64	@ 0x40
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 f814 	bl	8001afe <UART_WaitOnFlagUntilTimeout>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2220      	movs	r2, #32
 8001ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e006      	b.n	8001af6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2220      	movs	r2, #32
 8001aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	e000      	b.n	8001af6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001af4:	2302      	movs	r3, #2
  }
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3720      	adds	r7, #32
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b0e:	e03b      	b.n	8001b88 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b16:	d037      	beq.n	8001b88 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b18:	f7ff f814 	bl	8000b44 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	6a3a      	ldr	r2, [r7, #32]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d302      	bcc.n	8001b2e <UART_WaitOnFlagUntilTimeout+0x30>
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e03a      	b.n	8001ba8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d023      	beq.n	8001b88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2b80      	cmp	r3, #128	@ 0x80
 8001b44:	d020      	beq.n	8001b88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b40      	cmp	r3, #64	@ 0x40
 8001b4a:	d01d      	beq.n	8001b88 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d116      	bne.n	8001b88 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f000 f81d 	bl	8001bb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2208      	movs	r2, #8
 8001b7a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e00f      	b.n	8001ba8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	4013      	ands	r3, r2
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	bf0c      	ite	eq
 8001b98:	2301      	moveq	r3, #1
 8001b9a:	2300      	movne	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d0b4      	beq.n	8001b10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b095      	sub	sp, #84	@ 0x54
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	330c      	adds	r3, #12
 8001bbe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bc2:	e853 3f00 	ldrex	r3, [r3]
 8001bc6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	330c      	adds	r3, #12
 8001bd6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001bd8:	643a      	str	r2, [r7, #64]	@ 0x40
 8001bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bdc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001bde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001be0:	e841 2300 	strex	r3, r2, [r1]
 8001be4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1e5      	bne.n	8001bb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	3314      	adds	r3, #20
 8001bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	e853 3f00 	ldrex	r3, [r3]
 8001bfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f023 0301 	bic.w	r3, r3, #1
 8001c02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	3314      	adds	r3, #20
 8001c0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c14:	e841 2300 	strex	r3, r2, [r1]
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1e5      	bne.n	8001bec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d119      	bne.n	8001c5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	330c      	adds	r3, #12
 8001c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	e853 3f00 	ldrex	r3, [r3]
 8001c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	f023 0310 	bic.w	r3, r3, #16
 8001c3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	330c      	adds	r3, #12
 8001c46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c48:	61ba      	str	r2, [r7, #24]
 8001c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c4c:	6979      	ldr	r1, [r7, #20]
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	e841 2300 	strex	r3, r2, [r1]
 8001c54:	613b      	str	r3, [r7, #16]
   return(result);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1e5      	bne.n	8001c28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2220      	movs	r2, #32
 8001c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001c6a:	bf00      	nop
 8001c6c:	3754      	adds	r7, #84	@ 0x54
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c7c:	b0c0      	sub	sp, #256	@ 0x100
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c94:	68d9      	ldr	r1, [r3, #12]
 8001c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	ea40 0301 	orr.w	r3, r0, r1
 8001ca0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001cd0:	f021 010c 	bic.w	r1, r1, #12
 8001cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001cde:	430b      	orrs	r3, r1
 8001ce0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cf2:	6999      	ldr	r1, [r3, #24]
 8001cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	ea40 0301 	orr.w	r3, r0, r1
 8001cfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	4b8f      	ldr	r3, [pc, #572]	@ (8001f44 <UART_SetConfig+0x2cc>)
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d005      	beq.n	8001d18 <UART_SetConfig+0xa0>
 8001d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	4b8d      	ldr	r3, [pc, #564]	@ (8001f48 <UART_SetConfig+0x2d0>)
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d104      	bne.n	8001d22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d18:	f7ff fe02 	bl	8001920 <HAL_RCC_GetPCLK2Freq>
 8001d1c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001d20:	e003      	b.n	8001d2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d22:	f7ff fde9 	bl	80018f8 <HAL_RCC_GetPCLK1Freq>
 8001d26:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d34:	f040 810c 	bne.w	8001f50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001d42:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001d46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001d4a:	4622      	mov	r2, r4
 8001d4c:	462b      	mov	r3, r5
 8001d4e:	1891      	adds	r1, r2, r2
 8001d50:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001d52:	415b      	adcs	r3, r3
 8001d54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d5a:	4621      	mov	r1, r4
 8001d5c:	eb12 0801 	adds.w	r8, r2, r1
 8001d60:	4629      	mov	r1, r5
 8001d62:	eb43 0901 	adc.w	r9, r3, r1
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d7a:	4690      	mov	r8, r2
 8001d7c:	4699      	mov	r9, r3
 8001d7e:	4623      	mov	r3, r4
 8001d80:	eb18 0303 	adds.w	r3, r8, r3
 8001d84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001d88:	462b      	mov	r3, r5
 8001d8a:	eb49 0303 	adc.w	r3, r9, r3
 8001d8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001d9e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001da2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001da6:	460b      	mov	r3, r1
 8001da8:	18db      	adds	r3, r3, r3
 8001daa:	653b      	str	r3, [r7, #80]	@ 0x50
 8001dac:	4613      	mov	r3, r2
 8001dae:	eb42 0303 	adc.w	r3, r2, r3
 8001db2:	657b      	str	r3, [r7, #84]	@ 0x54
 8001db4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001db8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001dbc:	f7fe fa18 	bl	80001f0 <__aeabi_uldivmod>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4b61      	ldr	r3, [pc, #388]	@ (8001f4c <UART_SetConfig+0x2d4>)
 8001dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	011c      	lsls	r4, r3, #4
 8001dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001dd8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001ddc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001de0:	4642      	mov	r2, r8
 8001de2:	464b      	mov	r3, r9
 8001de4:	1891      	adds	r1, r2, r2
 8001de6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001de8:	415b      	adcs	r3, r3
 8001dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001dec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001df0:	4641      	mov	r1, r8
 8001df2:	eb12 0a01 	adds.w	sl, r2, r1
 8001df6:	4649      	mov	r1, r9
 8001df8:	eb43 0b01 	adc.w	fp, r3, r1
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e10:	4692      	mov	sl, r2
 8001e12:	469b      	mov	fp, r3
 8001e14:	4643      	mov	r3, r8
 8001e16:	eb1a 0303 	adds.w	r3, sl, r3
 8001e1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001e1e:	464b      	mov	r3, r9
 8001e20:	eb4b 0303 	adc.w	r3, fp, r3
 8001e24:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001e34:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001e38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	18db      	adds	r3, r3, r3
 8001e40:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e42:	4613      	mov	r3, r2
 8001e44:	eb42 0303 	adc.w	r3, r2, r3
 8001e48:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001e4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001e52:	f7fe f9cd 	bl	80001f0 <__aeabi_uldivmod>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f4c <UART_SetConfig+0x2d4>)
 8001e5e:	fba3 2301 	umull	r2, r3, r3, r1
 8001e62:	095b      	lsrs	r3, r3, #5
 8001e64:	2264      	movs	r2, #100	@ 0x64
 8001e66:	fb02 f303 	mul.w	r3, r2, r3
 8001e6a:	1acb      	subs	r3, r1, r3
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001e72:	4b36      	ldr	r3, [pc, #216]	@ (8001f4c <UART_SetConfig+0x2d4>)
 8001e74:	fba3 2302 	umull	r2, r3, r3, r2
 8001e78:	095b      	lsrs	r3, r3, #5
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001e80:	441c      	add	r4, r3
 8001e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e86:	2200      	movs	r2, #0
 8001e88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001e8c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001e90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001e94:	4642      	mov	r2, r8
 8001e96:	464b      	mov	r3, r9
 8001e98:	1891      	adds	r1, r2, r2
 8001e9a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001e9c:	415b      	adcs	r3, r3
 8001e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ea0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001ea4:	4641      	mov	r1, r8
 8001ea6:	1851      	adds	r1, r2, r1
 8001ea8:	6339      	str	r1, [r7, #48]	@ 0x30
 8001eaa:	4649      	mov	r1, r9
 8001eac:	414b      	adcs	r3, r1
 8001eae:	637b      	str	r3, [r7, #52]	@ 0x34
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001ebc:	4659      	mov	r1, fp
 8001ebe:	00cb      	lsls	r3, r1, #3
 8001ec0:	4651      	mov	r1, sl
 8001ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ec6:	4651      	mov	r1, sl
 8001ec8:	00ca      	lsls	r2, r1, #3
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4642      	mov	r2, r8
 8001ed2:	189b      	adds	r3, r3, r2
 8001ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001ed8:	464b      	mov	r3, r9
 8001eda:	460a      	mov	r2, r1
 8001edc:	eb42 0303 	adc.w	r3, r2, r3
 8001ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001ef0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001ef4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001ef8:	460b      	mov	r3, r1
 8001efa:	18db      	adds	r3, r3, r3
 8001efc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001efe:	4613      	mov	r3, r2
 8001f00:	eb42 0303 	adc.w	r3, r2, r3
 8001f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001f0e:	f7fe f96f 	bl	80001f0 <__aeabi_uldivmod>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4b0d      	ldr	r3, [pc, #52]	@ (8001f4c <UART_SetConfig+0x2d4>)
 8001f18:	fba3 1302 	umull	r1, r3, r3, r2
 8001f1c:	095b      	lsrs	r3, r3, #5
 8001f1e:	2164      	movs	r1, #100	@ 0x64
 8001f20:	fb01 f303 	mul.w	r3, r1, r3
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	3332      	adds	r3, #50	@ 0x32
 8001f2a:	4a08      	ldr	r2, [pc, #32]	@ (8001f4c <UART_SetConfig+0x2d4>)
 8001f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f30:	095b      	lsrs	r3, r3, #5
 8001f32:	f003 0207 	and.w	r2, r3, #7
 8001f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4422      	add	r2, r4
 8001f3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001f40:	e106      	b.n	8002150 <UART_SetConfig+0x4d8>
 8001f42:	bf00      	nop
 8001f44:	40011000 	.word	0x40011000
 8001f48:	40011400 	.word	0x40011400
 8001f4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f54:	2200      	movs	r2, #0
 8001f56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001f5a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001f5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001f62:	4642      	mov	r2, r8
 8001f64:	464b      	mov	r3, r9
 8001f66:	1891      	adds	r1, r2, r2
 8001f68:	6239      	str	r1, [r7, #32]
 8001f6a:	415b      	adcs	r3, r3
 8001f6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f72:	4641      	mov	r1, r8
 8001f74:	1854      	adds	r4, r2, r1
 8001f76:	4649      	mov	r1, r9
 8001f78:	eb43 0501 	adc.w	r5, r3, r1
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	00eb      	lsls	r3, r5, #3
 8001f86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f8a:	00e2      	lsls	r2, r4, #3
 8001f8c:	4614      	mov	r4, r2
 8001f8e:	461d      	mov	r5, r3
 8001f90:	4643      	mov	r3, r8
 8001f92:	18e3      	adds	r3, r4, r3
 8001f94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001f98:	464b      	mov	r3, r9
 8001f9a:	eb45 0303 	adc.w	r3, r5, r3
 8001f9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001fae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	008b      	lsls	r3, r1, #2
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fc8:	4621      	mov	r1, r4
 8001fca:	008a      	lsls	r2, r1, #2
 8001fcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001fd0:	f7fe f90e 	bl	80001f0 <__aeabi_uldivmod>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4b60      	ldr	r3, [pc, #384]	@ (800215c <UART_SetConfig+0x4e4>)
 8001fda:	fba3 2302 	umull	r2, r3, r3, r2
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	011c      	lsls	r4, r3, #4
 8001fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001fec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ff0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001ff4:	4642      	mov	r2, r8
 8001ff6:	464b      	mov	r3, r9
 8001ff8:	1891      	adds	r1, r2, r2
 8001ffa:	61b9      	str	r1, [r7, #24]
 8001ffc:	415b      	adcs	r3, r3
 8001ffe:	61fb      	str	r3, [r7, #28]
 8002000:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002004:	4641      	mov	r1, r8
 8002006:	1851      	adds	r1, r2, r1
 8002008:	6139      	str	r1, [r7, #16]
 800200a:	4649      	mov	r1, r9
 800200c:	414b      	adcs	r3, r1
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800201c:	4659      	mov	r1, fp
 800201e:	00cb      	lsls	r3, r1, #3
 8002020:	4651      	mov	r1, sl
 8002022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002026:	4651      	mov	r1, sl
 8002028:	00ca      	lsls	r2, r1, #3
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	4603      	mov	r3, r0
 8002030:	4642      	mov	r2, r8
 8002032:	189b      	adds	r3, r3, r2
 8002034:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002038:	464b      	mov	r3, r9
 800203a:	460a      	mov	r2, r1
 800203c:	eb42 0303 	adc.w	r3, r2, r3
 8002040:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800204e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800205c:	4649      	mov	r1, r9
 800205e:	008b      	lsls	r3, r1, #2
 8002060:	4641      	mov	r1, r8
 8002062:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002066:	4641      	mov	r1, r8
 8002068:	008a      	lsls	r2, r1, #2
 800206a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800206e:	f7fe f8bf 	bl	80001f0 <__aeabi_uldivmod>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4611      	mov	r1, r2
 8002078:	4b38      	ldr	r3, [pc, #224]	@ (800215c <UART_SetConfig+0x4e4>)
 800207a:	fba3 2301 	umull	r2, r3, r3, r1
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	2264      	movs	r2, #100	@ 0x64
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	1acb      	subs	r3, r1, r3
 8002088:	011b      	lsls	r3, r3, #4
 800208a:	3332      	adds	r3, #50	@ 0x32
 800208c:	4a33      	ldr	r2, [pc, #204]	@ (800215c <UART_SetConfig+0x4e4>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	095b      	lsrs	r3, r3, #5
 8002094:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002098:	441c      	add	r4, r3
 800209a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800209e:	2200      	movs	r2, #0
 80020a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80020a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80020a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80020a8:	4642      	mov	r2, r8
 80020aa:	464b      	mov	r3, r9
 80020ac:	1891      	adds	r1, r2, r2
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	415b      	adcs	r3, r3
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020b8:	4641      	mov	r1, r8
 80020ba:	1851      	adds	r1, r2, r1
 80020bc:	6039      	str	r1, [r7, #0]
 80020be:	4649      	mov	r1, r9
 80020c0:	414b      	adcs	r3, r1
 80020c2:	607b      	str	r3, [r7, #4]
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80020d0:	4659      	mov	r1, fp
 80020d2:	00cb      	lsls	r3, r1, #3
 80020d4:	4651      	mov	r1, sl
 80020d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020da:	4651      	mov	r1, sl
 80020dc:	00ca      	lsls	r2, r1, #3
 80020de:	4610      	mov	r0, r2
 80020e0:	4619      	mov	r1, r3
 80020e2:	4603      	mov	r3, r0
 80020e4:	4642      	mov	r2, r8
 80020e6:	189b      	adds	r3, r3, r2
 80020e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80020ea:	464b      	mov	r3, r9
 80020ec:	460a      	mov	r2, r1
 80020ee:	eb42 0303 	adc.w	r3, r2, r3
 80020f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80020f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80020fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800210c:	4649      	mov	r1, r9
 800210e:	008b      	lsls	r3, r1, #2
 8002110:	4641      	mov	r1, r8
 8002112:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002116:	4641      	mov	r1, r8
 8002118:	008a      	lsls	r2, r1, #2
 800211a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800211e:	f7fe f867 	bl	80001f0 <__aeabi_uldivmod>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4b0d      	ldr	r3, [pc, #52]	@ (800215c <UART_SetConfig+0x4e4>)
 8002128:	fba3 1302 	umull	r1, r3, r3, r2
 800212c:	095b      	lsrs	r3, r3, #5
 800212e:	2164      	movs	r1, #100	@ 0x64
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	3332      	adds	r3, #50	@ 0x32
 800213a:	4a08      	ldr	r2, [pc, #32]	@ (800215c <UART_SetConfig+0x4e4>)
 800213c:	fba2 2303 	umull	r2, r3, r2, r3
 8002140:	095b      	lsrs	r3, r3, #5
 8002142:	f003 020f 	and.w	r2, r3, #15
 8002146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4422      	add	r2, r4
 800214e:	609a      	str	r2, [r3, #8]
}
 8002150:	bf00      	nop
 8002152:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002156:	46bd      	mov	sp, r7
 8002158:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800215c:	51eb851f 	.word	0x51eb851f

08002160 <__NVIC_SetPriority>:
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	6039      	str	r1, [r7, #0]
 800216a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002170:	2b00      	cmp	r3, #0
 8002172:	db0a      	blt.n	800218a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	b2da      	uxtb	r2, r3
 8002178:	490c      	ldr	r1, [pc, #48]	@ (80021ac <__NVIC_SetPriority+0x4c>)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	0112      	lsls	r2, r2, #4
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	440b      	add	r3, r1
 8002184:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002188:	e00a      	b.n	80021a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4908      	ldr	r1, [pc, #32]	@ (80021b0 <__NVIC_SetPriority+0x50>)
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	3b04      	subs	r3, #4
 8002198:	0112      	lsls	r2, r2, #4
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	440b      	add	r3, r1
 800219e:	761a      	strb	r2, [r3, #24]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000e100 	.word	0xe000e100
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80021b8:	2100      	movs	r1, #0
 80021ba:	f06f 0004 	mvn.w	r0, #4
 80021be:	f7ff ffcf 	bl	8002160 <__NVIC_SetPriority>
#endif
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021ce:	f3ef 8305 	mrs	r3, IPSR
 80021d2:	603b      	str	r3, [r7, #0]
  return(result);
 80021d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80021da:	f06f 0305 	mvn.w	r3, #5
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	e00c      	b.n	80021fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80021e2:	4b0a      	ldr	r3, [pc, #40]	@ (800220c <osKernelInitialize+0x44>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d105      	bne.n	80021f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80021ea:	4b08      	ldr	r3, [pc, #32]	@ (800220c <osKernelInitialize+0x44>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	e002      	b.n	80021fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295
 80021fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80021fc:	687b      	ldr	r3, [r7, #4]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000090 	.word	0x20000090

08002210 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002216:	f3ef 8305 	mrs	r3, IPSR
 800221a:	603b      	str	r3, [r7, #0]
  return(result);
 800221c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002222:	f06f 0305 	mvn.w	r3, #5
 8002226:	607b      	str	r3, [r7, #4]
 8002228:	e010      	b.n	800224c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800222a:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <osKernelStart+0x48>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d109      	bne.n	8002246 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002232:	f7ff ffbf 	bl	80021b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002236:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <osKernelStart+0x48>)
 8002238:	2202      	movs	r2, #2
 800223a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800223c:	f001 fa68 	bl	8003710 <vTaskStartScheduler>
      stat = osOK;
 8002240:	2300      	movs	r3, #0
 8002242:	607b      	str	r3, [r7, #4]
 8002244:	e002      	b.n	800224c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002246:	f04f 33ff 	mov.w	r3, #4294967295
 800224a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800224c:	687b      	ldr	r3, [r7, #4]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000090 	.word	0x20000090

0800225c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b08e      	sub	sp, #56	@ 0x38
 8002260:	af04      	add	r7, sp, #16
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002268:	2300      	movs	r3, #0
 800226a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800226c:	f3ef 8305 	mrs	r3, IPSR
 8002270:	617b      	str	r3, [r7, #20]
  return(result);
 8002272:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002274:	2b00      	cmp	r3, #0
 8002276:	d17e      	bne.n	8002376 <osThreadNew+0x11a>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d07b      	beq.n	8002376 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800227e:	2380      	movs	r3, #128	@ 0x80
 8002280:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002282:	2318      	movs	r3, #24
 8002284:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002286:	2300      	movs	r3, #0
 8002288:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800228a:	f04f 33ff 	mov.w	r3, #4294967295
 800228e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d045      	beq.n	8002322 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d002      	beq.n	80022a4 <osThreadNew+0x48>
        name = attr->name;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <osThreadNew+0x6e>
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	2b38      	cmp	r3, #56	@ 0x38
 80022bc:	d805      	bhi.n	80022ca <osThreadNew+0x6e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <osThreadNew+0x72>
        return (NULL);
 80022ca:	2300      	movs	r3, #0
 80022cc:	e054      	b.n	8002378 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	089b      	lsrs	r3, r3, #2
 80022dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00e      	beq.n	8002304 <osThreadNew+0xa8>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2b5b      	cmp	r3, #91	@ 0x5b
 80022ec:	d90a      	bls.n	8002304 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d006      	beq.n	8002304 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <osThreadNew+0xa8>
        mem = 1;
 80022fe:	2301      	movs	r3, #1
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	e010      	b.n	8002326 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10c      	bne.n	8002326 <osThreadNew+0xca>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d108      	bne.n	8002326 <osThreadNew+0xca>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d104      	bne.n	8002326 <osThreadNew+0xca>
          mem = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	61bb      	str	r3, [r7, #24]
 8002320:	e001      	b.n	8002326 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d110      	bne.n	800234e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002334:	9202      	str	r2, [sp, #8]
 8002336:	9301      	str	r3, [sp, #4]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	6a3a      	ldr	r2, [r7, #32]
 8002340:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f001 f808 	bl	8003358 <xTaskCreateStatic>
 8002348:	4603      	mov	r3, r0
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	e013      	b.n	8002376 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d110      	bne.n	8002376 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	b29a      	uxth	r2, r3
 8002358:	f107 0310 	add.w	r3, r7, #16
 800235c:	9301      	str	r3, [sp, #4]
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f001 f856 	bl	8003418 <xTaskCreate>
 800236c:	4603      	mov	r3, r0
 800236e:	2b01      	cmp	r3, #1
 8002370:	d001      	beq.n	8002376 <osThreadNew+0x11a>
            hTask = NULL;
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002376:	693b      	ldr	r3, [r7, #16]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3728      	adds	r7, #40	@ 0x28
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002388:	f3ef 8305 	mrs	r3, IPSR
 800238c:	60bb      	str	r3, [r7, #8]
  return(result);
 800238e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <osDelay+0x1c>
    stat = osErrorISR;
 8002394:	f06f 0305 	mvn.w	r3, #5
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	e007      	b.n	80023ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f001 f97c 	bl	80036a4 <vTaskDelay>
    }
  }

  return (stat);
 80023ac:	68fb      	ldr	r3, [r7, #12]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b08a      	sub	sp, #40	@ 0x28
 80023ba:	af02      	add	r7, sp, #8
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023c6:	f3ef 8305 	mrs	r3, IPSR
 80023ca:	613b      	str	r3, [r7, #16]
  return(result);
 80023cc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d15f      	bne.n	8002492 <osMessageQueueNew+0xdc>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d05c      	beq.n	8002492 <osMessageQueueNew+0xdc>
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d059      	beq.n	8002492 <osMessageQueueNew+0xdc>
    mem = -1;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
 80023e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d029      	beq.n	800243e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d012      	beq.n	8002418 <osMessageQueueNew+0x62>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2b4f      	cmp	r3, #79	@ 0x4f
 80023f8:	d90e      	bls.n	8002418 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00a      	beq.n	8002418 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695a      	ldr	r2, [r3, #20]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	429a      	cmp	r2, r3
 8002410:	d302      	bcc.n	8002418 <osMessageQueueNew+0x62>
        mem = 1;
 8002412:	2301      	movs	r3, #1
 8002414:	61bb      	str	r3, [r7, #24]
 8002416:	e014      	b.n	8002442 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d110      	bne.n	8002442 <osMessageQueueNew+0x8c>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10c      	bne.n	8002442 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800242c:	2b00      	cmp	r3, #0
 800242e:	d108      	bne.n	8002442 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d104      	bne.n	8002442 <osMessageQueueNew+0x8c>
          mem = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	61bb      	str	r3, [r7, #24]
 800243c:	e001      	b.n	8002442 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d10b      	bne.n	8002460 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691a      	ldr	r2, [r3, #16]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2100      	movs	r1, #0
 8002452:	9100      	str	r1, [sp, #0]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 fa30 	bl	80028bc <xQueueGenericCreateStatic>
 800245c:	61f8      	str	r0, [r7, #28]
 800245e:	e008      	b.n	8002472 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d105      	bne.n	8002472 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8002466:	2200      	movs	r2, #0
 8002468:	68b9      	ldr	r1, [r7, #8]
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 faa3 	bl	80029b6 <xQueueGenericCreate>
 8002470:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00c      	beq.n	8002492 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <osMessageQueueNew+0xd0>
        name = attr->name;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	e001      	b.n	800248a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800248a:	6979      	ldr	r1, [r7, #20]
 800248c:	69f8      	ldr	r0, [r7, #28]
 800248e:	f000 ff05 	bl	800329c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002492:	69fb      	ldr	r3, [r7, #28]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3720      	adds	r7, #32
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	4613      	mov	r3, r2
 80024aa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024b4:	f3ef 8305 	mrs	r3, IPSR
 80024b8:	617b      	str	r3, [r7, #20]
  return(result);
 80024ba:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d028      	beq.n	8002512 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <osMessageQueuePut+0x36>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <osMessageQueuePut+0x36>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80024d2:	f06f 0303 	mvn.w	r3, #3
 80024d6:	61fb      	str	r3, [r7, #28]
 80024d8:	e038      	b.n	800254c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80024de:	f107 0210 	add.w	r2, r7, #16
 80024e2:	2300      	movs	r3, #0
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	69b8      	ldr	r0, [r7, #24]
 80024e8:	f000 fbc6 	bl	8002c78 <xQueueGenericSendFromISR>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d003      	beq.n	80024fa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80024f2:	f06f 0302 	mvn.w	r3, #2
 80024f6:	61fb      	str	r3, [r7, #28]
 80024f8:	e028      	b.n	800254c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d025      	beq.n	800254c <osMessageQueuePut+0xb0>
 8002500:	4b15      	ldr	r3, [pc, #84]	@ (8002558 <osMessageQueuePut+0xbc>)
 8002502:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	f3bf 8f4f 	dsb	sy
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	e01c      	b.n	800254c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <osMessageQueuePut+0x82>
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d103      	bne.n	8002526 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800251e:	f06f 0303 	mvn.w	r3, #3
 8002522:	61fb      	str	r3, [r7, #28]
 8002524:	e012      	b.n	800254c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002526:	2300      	movs	r3, #0
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	68b9      	ldr	r1, [r7, #8]
 800252c:	69b8      	ldr	r0, [r7, #24]
 800252e:	f000 faa1 	bl	8002a74 <xQueueGenericSend>
 8002532:	4603      	mov	r3, r0
 8002534:	2b01      	cmp	r3, #1
 8002536:	d009      	beq.n	800254c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800253e:	f06f 0301 	mvn.w	r3, #1
 8002542:	61fb      	str	r3, [r7, #28]
 8002544:	e002      	b.n	800254c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8002546:	f06f 0302 	mvn.w	r3, #2
 800254a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800254c:	69fb      	ldr	r3, [r7, #28]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3720      	adds	r7, #32
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	e000ed04 	.word	0xe000ed04

0800255c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
 8002568:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002572:	f3ef 8305 	mrs	r3, IPSR
 8002576:	617b      	str	r3, [r7, #20]
  return(result);
 8002578:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800257a:	2b00      	cmp	r3, #0
 800257c:	d028      	beq.n	80025d0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <osMessageQueueGet+0x34>
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <osMessageQueueGet+0x34>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8002590:	f06f 0303 	mvn.w	r3, #3
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	e037      	b.n	8002608 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800259c:	f107 0310 	add.w	r3, r7, #16
 80025a0:	461a      	mov	r2, r3
 80025a2:	68b9      	ldr	r1, [r7, #8]
 80025a4:	69b8      	ldr	r0, [r7, #24]
 80025a6:	f000 fce7 	bl	8002f78 <xQueueReceiveFromISR>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d003      	beq.n	80025b8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80025b0:	f06f 0302 	mvn.w	r3, #2
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	e027      	b.n	8002608 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d024      	beq.n	8002608 <osMessageQueueGet+0xac>
 80025be:	4b15      	ldr	r3, [pc, #84]	@ (8002614 <osMessageQueueGet+0xb8>)
 80025c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	f3bf 8f4f 	dsb	sy
 80025ca:	f3bf 8f6f 	isb	sy
 80025ce:	e01b      	b.n	8002608 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <osMessageQueueGet+0x80>
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d103      	bne.n	80025e4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80025dc:	f06f 0303 	mvn.w	r3, #3
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	e011      	b.n	8002608 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	68b9      	ldr	r1, [r7, #8]
 80025e8:	69b8      	ldr	r0, [r7, #24]
 80025ea:	f000 fbe3 	bl	8002db4 <xQueueReceive>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d009      	beq.n	8002608 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80025fa:	f06f 0301 	mvn.w	r3, #1
 80025fe:	61fb      	str	r3, [r7, #28]
 8002600:	e002      	b.n	8002608 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8002602:	f06f 0302 	mvn.w	r3, #2
 8002606:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002608:	69fb      	ldr	r3, [r7, #28]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3720      	adds	r7, #32
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	e000ed04 	.word	0xe000ed04

08002618 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4a07      	ldr	r2, [pc, #28]	@ (8002644 <vApplicationGetIdleTaskMemory+0x2c>)
 8002628:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	4a06      	ldr	r2, [pc, #24]	@ (8002648 <vApplicationGetIdleTaskMemory+0x30>)
 800262e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2280      	movs	r2, #128	@ 0x80
 8002634:	601a      	str	r2, [r3, #0]
}
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20000094 	.word	0x20000094
 8002648:	200000f0 	.word	0x200000f0

0800264c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4a07      	ldr	r2, [pc, #28]	@ (8002678 <vApplicationGetTimerTaskMemory+0x2c>)
 800265c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	4a06      	ldr	r2, [pc, #24]	@ (800267c <vApplicationGetTimerTaskMemory+0x30>)
 8002662:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800266a:	601a      	str	r2, [r3, #0]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	200002f0 	.word	0x200002f0
 800267c:	2000034c 	.word	0x2000034c

08002680 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f103 0208 	add.w	r2, r3, #8
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f04f 32ff 	mov.w	r2, #4294967295
 8002698:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f103 0208 	add.w	r2, r3, #8
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f103 0208 	add.w	r2, r3, #8
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026da:	b480      	push	{r7}
 80026dc:	b085      	sub	sp, #20
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	601a      	str	r2, [r3, #0]
}
 8002716:	bf00      	nop
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002722:	b480      	push	{r7}
 8002724:	b085      	sub	sp, #20
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002738:	d103      	bne.n	8002742 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	e00c      	b.n	800275c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3308      	adds	r3, #8
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	e002      	b.n	8002750 <vListInsert+0x2e>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	429a      	cmp	r2, r3
 800275a:	d2f6      	bcs.n	800274a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	601a      	str	r2, [r3, #0]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6892      	ldr	r2, [r2, #8]
 80027aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6852      	ldr	r2, [r2, #4]
 80027b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d103      	bne.n	80027c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	1e5a      	subs	r2, r3, #1
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10b      	bne.n	8002814 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80027fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002800:	f383 8811 	msr	BASEPRI, r3
 8002804:	f3bf 8f6f 	isb	sy
 8002808:	f3bf 8f4f 	dsb	sy
 800280c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800280e:	bf00      	nop
 8002810:	bf00      	nop
 8002812:	e7fd      	b.n	8002810 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002814:	f002 f938 	bl	8004a88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002820:	68f9      	ldr	r1, [r7, #12]
 8002822:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	441a      	add	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002844:	3b01      	subs	r3, #1
 8002846:	68f9      	ldr	r1, [r7, #12]
 8002848:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	441a      	add	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	22ff      	movs	r2, #255	@ 0xff
 8002858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	22ff      	movs	r2, #255	@ 0xff
 8002860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d114      	bne.n	8002894 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d01a      	beq.n	80028a8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3310      	adds	r3, #16
 8002876:	4618      	mov	r0, r3
 8002878:	f001 f9d8 	bl	8003c2c <xTaskRemoveFromEventList>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d012      	beq.n	80028a8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002882:	4b0d      	ldr	r3, [pc, #52]	@ (80028b8 <xQueueGenericReset+0xd0>)
 8002884:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	f3bf 8f4f 	dsb	sy
 800288e:	f3bf 8f6f 	isb	sy
 8002892:	e009      	b.n	80028a8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	3310      	adds	r3, #16
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fef1 	bl	8002680 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	3324      	adds	r3, #36	@ 0x24
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff feec 	bl	8002680 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80028a8:	f002 f920 	bl	8004aec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80028ac:	2301      	movs	r3, #1
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	e000ed04 	.word	0xe000ed04

080028bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08e      	sub	sp, #56	@ 0x38
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10b      	bne.n	80028e8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80028d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d4:	f383 8811 	msr	BASEPRI, r3
 80028d8:	f3bf 8f6f 	isb	sy
 80028dc:	f3bf 8f4f 	dsb	sy
 80028e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80028e2:	bf00      	nop
 80028e4:	bf00      	nop
 80028e6:	e7fd      	b.n	80028e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10b      	bne.n	8002906 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80028ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028f2:	f383 8811 	msr	BASEPRI, r3
 80028f6:	f3bf 8f6f 	isb	sy
 80028fa:	f3bf 8f4f 	dsb	sy
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002900:	bf00      	nop
 8002902:	bf00      	nop
 8002904:	e7fd      	b.n	8002902 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d002      	beq.n	8002912 <xQueueGenericCreateStatic+0x56>
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <xQueueGenericCreateStatic+0x5a>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <xQueueGenericCreateStatic+0x5c>
 8002916:	2300      	movs	r3, #0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10b      	bne.n	8002934 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800291c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002920:	f383 8811 	msr	BASEPRI, r3
 8002924:	f3bf 8f6f 	isb	sy
 8002928:	f3bf 8f4f 	dsb	sy
 800292c:	623b      	str	r3, [r7, #32]
}
 800292e:	bf00      	nop
 8002930:	bf00      	nop
 8002932:	e7fd      	b.n	8002930 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d102      	bne.n	8002940 <xQueueGenericCreateStatic+0x84>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <xQueueGenericCreateStatic+0x88>
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <xQueueGenericCreateStatic+0x8a>
 8002944:	2300      	movs	r3, #0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10b      	bne.n	8002962 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800294a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800294e:	f383 8811 	msr	BASEPRI, r3
 8002952:	f3bf 8f6f 	isb	sy
 8002956:	f3bf 8f4f 	dsb	sy
 800295a:	61fb      	str	r3, [r7, #28]
}
 800295c:	bf00      	nop
 800295e:	bf00      	nop
 8002960:	e7fd      	b.n	800295e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002962:	2350      	movs	r3, #80	@ 0x50
 8002964:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b50      	cmp	r3, #80	@ 0x50
 800296a:	d00b      	beq.n	8002984 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800296c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002970:	f383 8811 	msr	BASEPRI, r3
 8002974:	f3bf 8f6f 	isb	sy
 8002978:	f3bf 8f4f 	dsb	sy
 800297c:	61bb      	str	r3, [r7, #24]
}
 800297e:	bf00      	nop
 8002980:	bf00      	nop
 8002982:	e7fd      	b.n	8002980 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002984:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800298a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00d      	beq.n	80029ac <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002998:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800299c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	4613      	mov	r3, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f840 	bl	8002a2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80029ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3730      	adds	r7, #48	@ 0x30
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b08a      	sub	sp, #40	@ 0x28
 80029ba:	af02      	add	r7, sp, #8
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	4613      	mov	r3, r2
 80029c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10b      	bne.n	80029e2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80029ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029ce:	f383 8811 	msr	BASEPRI, r3
 80029d2:	f3bf 8f6f 	isb	sy
 80029d6:	f3bf 8f4f 	dsb	sy
 80029da:	613b      	str	r3, [r7, #16]
}
 80029dc:	bf00      	nop
 80029de:	bf00      	nop
 80029e0:	e7fd      	b.n	80029de <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	3350      	adds	r3, #80	@ 0x50
 80029f0:	4618      	mov	r0, r3
 80029f2:	f002 f96b 	bl	8004ccc <pvPortMalloc>
 80029f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d011      	beq.n	8002a22 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	3350      	adds	r3, #80	@ 0x50
 8002a06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a10:	79fa      	ldrb	r2, [r7, #7]
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	4613      	mov	r3, r2
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f805 	bl	8002a2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a22:	69bb      	ldr	r3, [r7, #24]
	}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3720      	adds	r7, #32
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d103      	bne.n	8002a48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	e002      	b.n	8002a4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	69b8      	ldr	r0, [r7, #24]
 8002a5e:	f7ff fec3 	bl	80027e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08e      	sub	sp, #56	@ 0x38
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a82:	2300      	movs	r3, #0
 8002a84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10b      	bne.n	8002aa8 <xQueueGenericSend+0x34>
	__asm volatile
 8002a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a94:	f383 8811 	msr	BASEPRI, r3
 8002a98:	f3bf 8f6f 	isb	sy
 8002a9c:	f3bf 8f4f 	dsb	sy
 8002aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002aa2:	bf00      	nop
 8002aa4:	bf00      	nop
 8002aa6:	e7fd      	b.n	8002aa4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d103      	bne.n	8002ab6 <xQueueGenericSend+0x42>
 8002aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <xQueueGenericSend+0x46>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <xQueueGenericSend+0x48>
 8002aba:	2300      	movs	r3, #0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10b      	bne.n	8002ad8 <xQueueGenericSend+0x64>
	__asm volatile
 8002ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ac4:	f383 8811 	msr	BASEPRI, r3
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ad2:	bf00      	nop
 8002ad4:	bf00      	nop
 8002ad6:	e7fd      	b.n	8002ad4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d103      	bne.n	8002ae6 <xQueueGenericSend+0x72>
 8002ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <xQueueGenericSend+0x76>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <xQueueGenericSend+0x78>
 8002aea:	2300      	movs	r3, #0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10b      	bne.n	8002b08 <xQueueGenericSend+0x94>
	__asm volatile
 8002af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	623b      	str	r3, [r7, #32]
}
 8002b02:	bf00      	nop
 8002b04:	bf00      	nop
 8002b06:	e7fd      	b.n	8002b04 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b08:	f001 fa50 	bl	8003fac <xTaskGetSchedulerState>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d102      	bne.n	8002b18 <xQueueGenericSend+0xa4>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <xQueueGenericSend+0xa8>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <xQueueGenericSend+0xaa>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10b      	bne.n	8002b3a <xQueueGenericSend+0xc6>
	__asm volatile
 8002b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b26:	f383 8811 	msr	BASEPRI, r3
 8002b2a:	f3bf 8f6f 	isb	sy
 8002b2e:	f3bf 8f4f 	dsb	sy
 8002b32:	61fb      	str	r3, [r7, #28]
}
 8002b34:	bf00      	nop
 8002b36:	bf00      	nop
 8002b38:	e7fd      	b.n	8002b36 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b3a:	f001 ffa5 	bl	8004a88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d302      	bcc.n	8002b50 <xQueueGenericSend+0xdc>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d129      	bne.n	8002ba4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	68b9      	ldr	r1, [r7, #8]
 8002b54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b56:	f000 fa91 	bl	800307c <prvCopyDataToQueue>
 8002b5a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d010      	beq.n	8002b86 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b66:	3324      	adds	r3, #36	@ 0x24
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f001 f85f 	bl	8003c2c <xTaskRemoveFromEventList>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d013      	beq.n	8002b9c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b74:	4b3f      	ldr	r3, [pc, #252]	@ (8002c74 <xQueueGenericSend+0x200>)
 8002b76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	f3bf 8f6f 	isb	sy
 8002b84:	e00a      	b.n	8002b9c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d007      	beq.n	8002b9c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b8c:	4b39      	ldr	r3, [pc, #228]	@ (8002c74 <xQueueGenericSend+0x200>)
 8002b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b9c:	f001 ffa6 	bl	8004aec <vPortExitCritical>
				return pdPASS;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e063      	b.n	8002c6c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d103      	bne.n	8002bb2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002baa:	f001 ff9f 	bl	8004aec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e05c      	b.n	8002c6c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d106      	bne.n	8002bc6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002bb8:	f107 0314 	add.w	r3, r7, #20
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f001 f899 	bl	8003cf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002bc6:	f001 ff91 	bl	8004aec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bca:	f000 fe09 	bl	80037e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bce:	f001 ff5b 	bl	8004a88 <vPortEnterCritical>
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002bd8:	b25b      	sxtb	r3, r3
 8002bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bde:	d103      	bne.n	8002be8 <xQueueGenericSend+0x174>
 8002be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002bee:	b25b      	sxtb	r3, r3
 8002bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf4:	d103      	bne.n	8002bfe <xQueueGenericSend+0x18a>
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002bfe:	f001 ff75 	bl	8004aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c02:	1d3a      	adds	r2, r7, #4
 8002c04:	f107 0314 	add.w	r3, r7, #20
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f001 f888 	bl	8003d20 <xTaskCheckForTimeOut>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d124      	bne.n	8002c60 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c18:	f000 fb28 	bl	800326c <prvIsQueueFull>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d018      	beq.n	8002c54 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c24:	3310      	adds	r3, #16
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	4611      	mov	r1, r2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 ffac 	bl	8003b88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c32:	f000 fab3 	bl	800319c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c36:	f000 fde1 	bl	80037fc <xTaskResumeAll>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f47f af7c 	bne.w	8002b3a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002c42:	4b0c      	ldr	r3, [pc, #48]	@ (8002c74 <xQueueGenericSend+0x200>)
 8002c44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	f3bf 8f4f 	dsb	sy
 8002c4e:	f3bf 8f6f 	isb	sy
 8002c52:	e772      	b.n	8002b3a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c56:	f000 faa1 	bl	800319c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c5a:	f000 fdcf 	bl	80037fc <xTaskResumeAll>
 8002c5e:	e76c      	b.n	8002b3a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c62:	f000 fa9b 	bl	800319c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c66:	f000 fdc9 	bl	80037fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3738      	adds	r7, #56	@ 0x38
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	e000ed04 	.word	0xe000ed04

08002c78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b090      	sub	sp, #64	@ 0x40
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10b      	bne.n	8002ca8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c94:	f383 8811 	msr	BASEPRI, r3
 8002c98:	f3bf 8f6f 	isb	sy
 8002c9c:	f3bf 8f4f 	dsb	sy
 8002ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002ca2:	bf00      	nop
 8002ca4:	bf00      	nop
 8002ca6:	e7fd      	b.n	8002ca4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d103      	bne.n	8002cb6 <xQueueGenericSendFromISR+0x3e>
 8002cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <xQueueGenericSendFromISR+0x42>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <xQueueGenericSendFromISR+0x44>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10b      	bne.n	8002cd8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002cd2:	bf00      	nop
 8002cd4:	bf00      	nop
 8002cd6:	e7fd      	b.n	8002cd4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d103      	bne.n	8002ce6 <xQueueGenericSendFromISR+0x6e>
 8002cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <xQueueGenericSendFromISR+0x72>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <xQueueGenericSendFromISR+0x74>
 8002cea:	2300      	movs	r3, #0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10b      	bne.n	8002d08 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	623b      	str	r3, [r7, #32]
}
 8002d02:	bf00      	nop
 8002d04:	bf00      	nop
 8002d06:	e7fd      	b.n	8002d04 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d08:	f001 ff9e 	bl	8004c48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d0c:	f3ef 8211 	mrs	r2, BASEPRI
 8002d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	61fa      	str	r2, [r7, #28]
 8002d22:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d24:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d26:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d302      	bcc.n	8002d3a <xQueueGenericSendFromISR+0xc2>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d12f      	bne.n	8002d9a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	68b9      	ldr	r1, [r7, #8]
 8002d4e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002d50:	f000 f994 	bl	800307c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d54:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5c:	d112      	bne.n	8002d84 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d016      	beq.n	8002d94 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d68:	3324      	adds	r3, #36	@ 0x24
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 ff5e 	bl	8003c2c <xTaskRemoveFromEventList>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00e      	beq.n	8002d94 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00b      	beq.n	8002d94 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	e007      	b.n	8002d94 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d88:	3301      	adds	r3, #1
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	b25a      	sxtb	r2, r3
 8002d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002d94:	2301      	movs	r3, #1
 8002d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002d98:	e001      	b.n	8002d9e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002da0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002da8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3740      	adds	r7, #64	@ 0x40
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08c      	sub	sp, #48	@ 0x30
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10b      	bne.n	8002de6 <xQueueReceive+0x32>
	__asm volatile
 8002dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dd2:	f383 8811 	msr	BASEPRI, r3
 8002dd6:	f3bf 8f6f 	isb	sy
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	623b      	str	r3, [r7, #32]
}
 8002de0:	bf00      	nop
 8002de2:	bf00      	nop
 8002de4:	e7fd      	b.n	8002de2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d103      	bne.n	8002df4 <xQueueReceive+0x40>
 8002dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <xQueueReceive+0x44>
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <xQueueReceive+0x46>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10b      	bne.n	8002e16 <xQueueReceive+0x62>
	__asm volatile
 8002dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e02:	f383 8811 	msr	BASEPRI, r3
 8002e06:	f3bf 8f6f 	isb	sy
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	61fb      	str	r3, [r7, #28]
}
 8002e10:	bf00      	nop
 8002e12:	bf00      	nop
 8002e14:	e7fd      	b.n	8002e12 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e16:	f001 f8c9 	bl	8003fac <xTaskGetSchedulerState>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d102      	bne.n	8002e26 <xQueueReceive+0x72>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <xQueueReceive+0x76>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <xQueueReceive+0x78>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10b      	bne.n	8002e48 <xQueueReceive+0x94>
	__asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	61bb      	str	r3, [r7, #24]
}
 8002e42:	bf00      	nop
 8002e44:	bf00      	nop
 8002e46:	e7fd      	b.n	8002e44 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e48:	f001 fe1e 	bl	8004a88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e50:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d01f      	beq.n	8002e98 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e5c:	f000 f978 	bl	8003150 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e62:	1e5a      	subs	r2, r3, #1
 8002e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e66:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00f      	beq.n	8002e90 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e72:	3310      	adds	r3, #16
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fed9 	bl	8003c2c <xTaskRemoveFromEventList>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d007      	beq.n	8002e90 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e80:	4b3c      	ldr	r3, [pc, #240]	@ (8002f74 <xQueueReceive+0x1c0>)
 8002e82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e90:	f001 fe2c 	bl	8004aec <vPortExitCritical>
				return pdPASS;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e069      	b.n	8002f6c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d103      	bne.n	8002ea6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e9e:	f001 fe25 	bl	8004aec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e062      	b.n	8002f6c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d106      	bne.n	8002eba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002eac:	f107 0310 	add.w	r3, r7, #16
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 ff1f 	bl	8003cf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002eba:	f001 fe17 	bl	8004aec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ebe:	f000 fc8f 	bl	80037e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ec2:	f001 fde1 	bl	8004a88 <vPortEnterCritical>
 8002ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ecc:	b25b      	sxtb	r3, r3
 8002ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed2:	d103      	bne.n	8002edc <xQueueReceive+0x128>
 8002ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ede:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ee2:	b25b      	sxtb	r3, r3
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d103      	bne.n	8002ef2 <xQueueReceive+0x13e>
 8002eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ef2:	f001 fdfb 	bl	8004aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ef6:	1d3a      	adds	r2, r7, #4
 8002ef8:	f107 0310 	add.w	r3, r7, #16
 8002efc:	4611      	mov	r1, r2
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 ff0e 	bl	8003d20 <xTaskCheckForTimeOut>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d123      	bne.n	8002f52 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f0c:	f000 f998 	bl	8003240 <prvIsQueueEmpty>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d017      	beq.n	8002f46 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f18:	3324      	adds	r3, #36	@ 0x24
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fe32 	bl	8003b88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f26:	f000 f939 	bl	800319c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f2a:	f000 fc67 	bl	80037fc <xTaskResumeAll>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d189      	bne.n	8002e48 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002f34:	4b0f      	ldr	r3, [pc, #60]	@ (8002f74 <xQueueReceive+0x1c0>)
 8002f36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	f3bf 8f4f 	dsb	sy
 8002f40:	f3bf 8f6f 	isb	sy
 8002f44:	e780      	b.n	8002e48 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f48:	f000 f928 	bl	800319c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f4c:	f000 fc56 	bl	80037fc <xTaskResumeAll>
 8002f50:	e77a      	b.n	8002e48 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f54:	f000 f922 	bl	800319c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f58:	f000 fc50 	bl	80037fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f5e:	f000 f96f 	bl	8003240 <prvIsQueueEmpty>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f43f af6f 	beq.w	8002e48 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3730      	adds	r7, #48	@ 0x30
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	e000ed04 	.word	0xe000ed04

08002f78 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08e      	sub	sp, #56	@ 0x38
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10b      	bne.n	8002fa6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8002f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f92:	f383 8811 	msr	BASEPRI, r3
 8002f96:	f3bf 8f6f 	isb	sy
 8002f9a:	f3bf 8f4f 	dsb	sy
 8002f9e:	623b      	str	r3, [r7, #32]
}
 8002fa0:	bf00      	nop
 8002fa2:	bf00      	nop
 8002fa4:	e7fd      	b.n	8002fa2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d103      	bne.n	8002fb4 <xQueueReceiveFromISR+0x3c>
 8002fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <xQueueReceiveFromISR+0x40>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <xQueueReceiveFromISR+0x42>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10b      	bne.n	8002fd6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8002fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	61fb      	str	r3, [r7, #28]
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	e7fd      	b.n	8002fd2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fd6:	f001 fe37 	bl	8004c48 <vPortValidateInterruptPriority>
	__asm volatile
 8002fda:	f3ef 8211 	mrs	r2, BASEPRI
 8002fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fe2:	f383 8811 	msr	BASEPRI, r3
 8002fe6:	f3bf 8f6f 	isb	sy
 8002fea:	f3bf 8f4f 	dsb	sy
 8002fee:	61ba      	str	r2, [r7, #24]
 8002ff0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002ff2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d02f      	beq.n	8003062 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003004:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003008:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003010:	f000 f89e 	bl	8003150 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003016:	1e5a      	subs	r2, r3, #1
 8003018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800301c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003024:	d112      	bne.n	800304c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d016      	beq.n	800305c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800302e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003030:	3310      	adds	r3, #16
 8003032:	4618      	mov	r0, r3
 8003034:	f000 fdfa 	bl	8003c2c <xTaskRemoveFromEventList>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00e      	beq.n	800305c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00b      	beq.n	800305c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	e007      	b.n	800305c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800304c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003050:	3301      	adds	r3, #1
 8003052:	b2db      	uxtb	r3, r3
 8003054:	b25a      	sxtb	r2, r3
 8003056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800305c:	2301      	movs	r3, #1
 800305e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003060:	e001      	b.n	8003066 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003062:	2300      	movs	r3, #0
 8003064:	637b      	str	r3, [r7, #52]	@ 0x34
 8003066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003068:	613b      	str	r3, [r7, #16]
	__asm volatile
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f383 8811 	msr	BASEPRI, r3
}
 8003070:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003074:	4618      	mov	r0, r3
 8003076:	3738      	adds	r7, #56	@ 0x38
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003090:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10d      	bne.n	80030b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d14d      	bne.n	800313e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 ff9e 	bl	8003fe8 <xTaskPriorityDisinherit>
 80030ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	e043      	b.n	800313e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d119      	bne.n	80030f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6858      	ldr	r0, [r3, #4]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c4:	461a      	mov	r2, r3
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	f002 f81a 	bl	8005100 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d4:	441a      	add	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d32b      	bcc.n	800313e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	e026      	b.n	800313e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	68d8      	ldr	r0, [r3, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f8:	461a      	mov	r2, r3
 80030fa:	68b9      	ldr	r1, [r7, #8]
 80030fc:	f002 f800 	bl	8005100 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003108:	425b      	negs	r3, r3
 800310a:	441a      	add	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d207      	bcs.n	800312c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003124:	425b      	negs	r3, r3
 8003126:	441a      	add	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d105      	bne.n	800313e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	3b01      	subs	r3, #1
 800313c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003146:	697b      	ldr	r3, [r7, #20]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d018      	beq.n	8003194 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	441a      	add	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	429a      	cmp	r2, r3
 800317a:	d303      	bcc.n	8003184 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68d9      	ldr	r1, [r3, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318c:	461a      	mov	r2, r3
 800318e:	6838      	ldr	r0, [r7, #0]
 8003190:	f001 ffb6 	bl	8005100 <memcpy>
	}
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80031a4:	f001 fc70 	bl	8004a88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031b0:	e011      	b.n	80031d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d012      	beq.n	80031e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3324      	adds	r3, #36	@ 0x24
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fd34 	bl	8003c2c <xTaskRemoveFromEventList>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80031ca:	f000 fe0d 	bl	8003de8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	dce9      	bgt.n	80031b2 <prvUnlockQueue+0x16>
 80031de:	e000      	b.n	80031e2 <prvUnlockQueue+0x46>
					break;
 80031e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	22ff      	movs	r2, #255	@ 0xff
 80031e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80031ea:	f001 fc7f 	bl	8004aec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80031ee:	f001 fc4b 	bl	8004a88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031fa:	e011      	b.n	8003220 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d012      	beq.n	800322a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3310      	adds	r3, #16
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fd0f 	bl	8003c2c <xTaskRemoveFromEventList>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003214:	f000 fde8 	bl	8003de8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003218:	7bbb      	ldrb	r3, [r7, #14]
 800321a:	3b01      	subs	r3, #1
 800321c:	b2db      	uxtb	r3, r3
 800321e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003220:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003224:	2b00      	cmp	r3, #0
 8003226:	dce9      	bgt.n	80031fc <prvUnlockQueue+0x60>
 8003228:	e000      	b.n	800322c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800322a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	22ff      	movs	r2, #255	@ 0xff
 8003230:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003234:	f001 fc5a 	bl	8004aec <vPortExitCritical>
}
 8003238:	bf00      	nop
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003248:	f001 fc1e 	bl	8004a88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003250:	2b00      	cmp	r3, #0
 8003252:	d102      	bne.n	800325a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003254:	2301      	movs	r3, #1
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	e001      	b.n	800325e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800325e:	f001 fc45 	bl	8004aec <vPortExitCritical>

	return xReturn;
 8003262:	68fb      	ldr	r3, [r7, #12]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003274:	f001 fc08 	bl	8004a88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003280:	429a      	cmp	r2, r3
 8003282:	d102      	bne.n	800328a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003284:	2301      	movs	r3, #1
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	e001      	b.n	800328e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800328e:	f001 fc2d 	bl	8004aec <vPortExitCritical>

	return xReturn;
 8003292:	68fb      	ldr	r3, [r7, #12]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80032a6:	2300      	movs	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	e014      	b.n	80032d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80032ac:	4a0f      	ldr	r2, [pc, #60]	@ (80032ec <vQueueAddToRegistry+0x50>)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10b      	bne.n	80032d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80032b8:	490c      	ldr	r1, [pc, #48]	@ (80032ec <vQueueAddToRegistry+0x50>)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80032c2:	4a0a      	ldr	r2, [pc, #40]	@ (80032ec <vQueueAddToRegistry+0x50>)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	4413      	add	r3, r2
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80032ce:	e006      	b.n	80032de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	3301      	adds	r3, #1
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b07      	cmp	r3, #7
 80032da:	d9e7      	bls.n	80032ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80032dc:	bf00      	nop
 80032de:	bf00      	nop
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	2000074c 	.word	0x2000074c

080032f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003300:	f001 fbc2 	bl	8004a88 <vPortEnterCritical>
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800330a:	b25b      	sxtb	r3, r3
 800330c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003310:	d103      	bne.n	800331a <vQueueWaitForMessageRestricted+0x2a>
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003320:	b25b      	sxtb	r3, r3
 8003322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003326:	d103      	bne.n	8003330 <vQueueWaitForMessageRestricted+0x40>
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003330:	f001 fbdc 	bl	8004aec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003338:	2b00      	cmp	r3, #0
 800333a:	d106      	bne.n	800334a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	3324      	adds	r3, #36	@ 0x24
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	68b9      	ldr	r1, [r7, #8]
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fc45 	bl	8003bd4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800334a:	6978      	ldr	r0, [r7, #20]
 800334c:	f7ff ff26 	bl	800319c <prvUnlockQueue>
	}
 8003350:	bf00      	nop
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08e      	sub	sp, #56	@ 0x38
 800335c:	af04      	add	r7, sp, #16
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10b      	bne.n	8003384 <xTaskCreateStatic+0x2c>
	__asm volatile
 800336c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003370:	f383 8811 	msr	BASEPRI, r3
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	623b      	str	r3, [r7, #32]
}
 800337e:	bf00      	nop
 8003380:	bf00      	nop
 8003382:	e7fd      	b.n	8003380 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10b      	bne.n	80033a2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800338a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800338e:	f383 8811 	msr	BASEPRI, r3
 8003392:	f3bf 8f6f 	isb	sy
 8003396:	f3bf 8f4f 	dsb	sy
 800339a:	61fb      	str	r3, [r7, #28]
}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	e7fd      	b.n	800339e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80033a2:	235c      	movs	r3, #92	@ 0x5c
 80033a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	2b5c      	cmp	r3, #92	@ 0x5c
 80033aa:	d00b      	beq.n	80033c4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80033ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	61bb      	str	r3, [r7, #24]
}
 80033be:	bf00      	nop
 80033c0:	bf00      	nop
 80033c2:	e7fd      	b.n	80033c0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80033c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80033c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01e      	beq.n	800340a <xTaskCreateStatic+0xb2>
 80033cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d01b      	beq.n	800340a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033d4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80033d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033da:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80033dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80033e4:	2300      	movs	r3, #0
 80033e6:	9303      	str	r3, [sp, #12]
 80033e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ea:	9302      	str	r3, [sp, #8]
 80033ec:	f107 0314 	add.w	r3, r7, #20
 80033f0:	9301      	str	r3, [sp, #4]
 80033f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	68b9      	ldr	r1, [r7, #8]
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 f850 	bl	80034a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003402:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003404:	f000 f8de 	bl	80035c4 <prvAddNewTaskToReadyList>
 8003408:	e001      	b.n	800340e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800340e:	697b      	ldr	r3, [r7, #20]
	}
 8003410:	4618      	mov	r0, r3
 8003412:	3728      	adds	r7, #40	@ 0x28
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08c      	sub	sp, #48	@ 0x30
 800341c:	af04      	add	r7, sp, #16
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	4613      	mov	r3, r2
 8003426:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4618      	mov	r0, r3
 800342e:	f001 fc4d 	bl	8004ccc <pvPortMalloc>
 8003432:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00e      	beq.n	8003458 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800343a:	205c      	movs	r0, #92	@ 0x5c
 800343c:	f001 fc46 	bl	8004ccc <pvPortMalloc>
 8003440:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	631a      	str	r2, [r3, #48]	@ 0x30
 800344e:	e005      	b.n	800345c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003450:	6978      	ldr	r0, [r7, #20]
 8003452:	f001 fd09 	bl	8004e68 <vPortFree>
 8003456:	e001      	b.n	800345c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003458:	2300      	movs	r3, #0
 800345a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d017      	beq.n	8003492 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800346a:	88fa      	ldrh	r2, [r7, #6]
 800346c:	2300      	movs	r3, #0
 800346e:	9303      	str	r3, [sp, #12]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	9302      	str	r3, [sp, #8]
 8003474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f80e 	bl	80034a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003486:	69f8      	ldr	r0, [r7, #28]
 8003488:	f000 f89c 	bl	80035c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800348c:	2301      	movs	r3, #1
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	e002      	b.n	8003498 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003492:	f04f 33ff 	mov.w	r3, #4294967295
 8003496:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003498:	69bb      	ldr	r3, [r7, #24]
	}
 800349a:	4618      	mov	r0, r3
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b088      	sub	sp, #32
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80034b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	461a      	mov	r2, r3
 80034ba:	21a5      	movs	r1, #165	@ 0xa5
 80034bc:	f001 fdf4 	bl	80050a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80034c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034ca:	3b01      	subs	r3, #1
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	f023 0307 	bic.w	r3, r3, #7
 80034d8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00b      	beq.n	80034fc <prvInitialiseNewTask+0x5a>
	__asm volatile
 80034e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034e8:	f383 8811 	msr	BASEPRI, r3
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	617b      	str	r3, [r7, #20]
}
 80034f6:	bf00      	nop
 80034f8:	bf00      	nop
 80034fa:	e7fd      	b.n	80034f8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d01f      	beq.n	8003542 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
 8003506:	e012      	b.n	800352e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	4413      	add	r3, r2
 800350e:	7819      	ldrb	r1, [r3, #0]
 8003510:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	4413      	add	r3, r2
 8003516:	3334      	adds	r3, #52	@ 0x34
 8003518:	460a      	mov	r2, r1
 800351a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	4413      	add	r3, r2
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d006      	beq.n	8003536 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	3301      	adds	r3, #1
 800352c:	61fb      	str	r3, [r7, #28]
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	2b0f      	cmp	r3, #15
 8003532:	d9e9      	bls.n	8003508 <prvInitialiseNewTask+0x66>
 8003534:	e000      	b.n	8003538 <prvInitialiseNewTask+0x96>
			{
				break;
 8003536:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003540:	e003      	b.n	800354a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800354a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800354c:	2b37      	cmp	r3, #55	@ 0x37
 800354e:	d901      	bls.n	8003554 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003550:	2337      	movs	r3, #55	@ 0x37
 8003552:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003556:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003558:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800355a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800355e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003562:	2200      	movs	r2, #0
 8003564:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003568:	3304      	adds	r3, #4
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff f8a8 	bl	80026c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003572:	3318      	adds	r3, #24
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff f8a3 	bl	80026c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800357a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800357e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003582:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003588:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800358a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800358e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003592:	2200      	movs	r2, #0
 8003594:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	68f9      	ldr	r1, [r7, #12]
 80035a2:	69b8      	ldr	r0, [r7, #24]
 80035a4:	f001 f93e 	bl	8004824 <pxPortInitialiseStack>
 80035a8:	4602      	mov	r2, r0
 80035aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80035ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035ba:	bf00      	nop
 80035bc:	3720      	adds	r7, #32
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035cc:	f001 fa5c 	bl	8004a88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003688 <prvAddNewTaskToReadyList+0xc4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3301      	adds	r3, #1
 80035d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003688 <prvAddNewTaskToReadyList+0xc4>)
 80035d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80035da:	4b2c      	ldr	r3, [pc, #176]	@ (800368c <prvAddNewTaskToReadyList+0xc8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80035e2:	4a2a      	ldr	r2, [pc, #168]	@ (800368c <prvAddNewTaskToReadyList+0xc8>)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035e8:	4b27      	ldr	r3, [pc, #156]	@ (8003688 <prvAddNewTaskToReadyList+0xc4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d110      	bne.n	8003612 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80035f0:	f000 fc1e 	bl	8003e30 <prvInitialiseTaskLists>
 80035f4:	e00d      	b.n	8003612 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80035f6:	4b26      	ldr	r3, [pc, #152]	@ (8003690 <prvAddNewTaskToReadyList+0xcc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035fe:	4b23      	ldr	r3, [pc, #140]	@ (800368c <prvAddNewTaskToReadyList+0xc8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003608:	429a      	cmp	r2, r3
 800360a:	d802      	bhi.n	8003612 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800360c:	4a1f      	ldr	r2, [pc, #124]	@ (800368c <prvAddNewTaskToReadyList+0xc8>)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003612:	4b20      	ldr	r3, [pc, #128]	@ (8003694 <prvAddNewTaskToReadyList+0xd0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	3301      	adds	r3, #1
 8003618:	4a1e      	ldr	r2, [pc, #120]	@ (8003694 <prvAddNewTaskToReadyList+0xd0>)
 800361a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800361c:	4b1d      	ldr	r3, [pc, #116]	@ (8003694 <prvAddNewTaskToReadyList+0xd0>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003628:	4b1b      	ldr	r3, [pc, #108]	@ (8003698 <prvAddNewTaskToReadyList+0xd4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d903      	bls.n	8003638 <prvAddNewTaskToReadyList+0x74>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003634:	4a18      	ldr	r2, [pc, #96]	@ (8003698 <prvAddNewTaskToReadyList+0xd4>)
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800363c:	4613      	mov	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4a15      	ldr	r2, [pc, #84]	@ (800369c <prvAddNewTaskToReadyList+0xd8>)
 8003646:	441a      	add	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3304      	adds	r3, #4
 800364c:	4619      	mov	r1, r3
 800364e:	4610      	mov	r0, r2
 8003650:	f7ff f843 	bl	80026da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003654:	f001 fa4a 	bl	8004aec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003658:	4b0d      	ldr	r3, [pc, #52]	@ (8003690 <prvAddNewTaskToReadyList+0xcc>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00e      	beq.n	800367e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003660:	4b0a      	ldr	r3, [pc, #40]	@ (800368c <prvAddNewTaskToReadyList+0xc8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366a:	429a      	cmp	r2, r3
 800366c:	d207      	bcs.n	800367e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800366e:	4b0c      	ldr	r3, [pc, #48]	@ (80036a0 <prvAddNewTaskToReadyList+0xdc>)
 8003670:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	20000c60 	.word	0x20000c60
 800368c:	2000078c 	.word	0x2000078c
 8003690:	20000c6c 	.word	0x20000c6c
 8003694:	20000c7c 	.word	0x20000c7c
 8003698:	20000c68 	.word	0x20000c68
 800369c:	20000790 	.word	0x20000790
 80036a0:	e000ed04 	.word	0xe000ed04

080036a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d018      	beq.n	80036e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80036b6:	4b14      	ldr	r3, [pc, #80]	@ (8003708 <vTaskDelay+0x64>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00b      	beq.n	80036d6 <vTaskDelay+0x32>
	__asm volatile
 80036be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	60bb      	str	r3, [r7, #8]
}
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	e7fd      	b.n	80036d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80036d6:	f000 f883 	bl	80037e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80036da:	2100      	movs	r1, #0
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fcf3 	bl	80040c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80036e2:	f000 f88b 	bl	80037fc <xTaskResumeAll>
 80036e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d107      	bne.n	80036fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80036ee:	4b07      	ldr	r3, [pc, #28]	@ (800370c <vTaskDelay+0x68>)
 80036f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	f3bf 8f4f 	dsb	sy
 80036fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80036fe:	bf00      	nop
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000c88 	.word	0x20000c88
 800370c:	e000ed04 	.word	0xe000ed04

08003710 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08a      	sub	sp, #40	@ 0x28
 8003714:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003716:	2300      	movs	r3, #0
 8003718:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800371a:	2300      	movs	r3, #0
 800371c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800371e:	463a      	mov	r2, r7
 8003720:	1d39      	adds	r1, r7, #4
 8003722:	f107 0308 	add.w	r3, r7, #8
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe ff76 	bl	8002618 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800372c:	6839      	ldr	r1, [r7, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	9202      	str	r2, [sp, #8]
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	2300      	movs	r3, #0
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	2300      	movs	r3, #0
 800373c:	460a      	mov	r2, r1
 800373e:	4922      	ldr	r1, [pc, #136]	@ (80037c8 <vTaskStartScheduler+0xb8>)
 8003740:	4822      	ldr	r0, [pc, #136]	@ (80037cc <vTaskStartScheduler+0xbc>)
 8003742:	f7ff fe09 	bl	8003358 <xTaskCreateStatic>
 8003746:	4603      	mov	r3, r0
 8003748:	4a21      	ldr	r2, [pc, #132]	@ (80037d0 <vTaskStartScheduler+0xc0>)
 800374a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800374c:	4b20      	ldr	r3, [pc, #128]	@ (80037d0 <vTaskStartScheduler+0xc0>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003754:	2301      	movs	r3, #1
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	e001      	b.n	800375e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d102      	bne.n	800376a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003764:	f000 fd04 	bl	8004170 <xTimerCreateTimerTask>
 8003768:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d116      	bne.n	800379e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	613b      	str	r3, [r7, #16]
}
 8003782:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003784:	4b13      	ldr	r3, [pc, #76]	@ (80037d4 <vTaskStartScheduler+0xc4>)
 8003786:	f04f 32ff 	mov.w	r2, #4294967295
 800378a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800378c:	4b12      	ldr	r3, [pc, #72]	@ (80037d8 <vTaskStartScheduler+0xc8>)
 800378e:	2201      	movs	r2, #1
 8003790:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003792:	4b12      	ldr	r3, [pc, #72]	@ (80037dc <vTaskStartScheduler+0xcc>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003798:	f001 f8d2 	bl	8004940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800379c:	e00f      	b.n	80037be <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a4:	d10b      	bne.n	80037be <vTaskStartScheduler+0xae>
	__asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	60fb      	str	r3, [r7, #12]
}
 80037b8:	bf00      	nop
 80037ba:	bf00      	nop
 80037bc:	e7fd      	b.n	80037ba <vTaskStartScheduler+0xaa>
}
 80037be:	bf00      	nop
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	0800517c 	.word	0x0800517c
 80037cc:	08003e01 	.word	0x08003e01
 80037d0:	20000c84 	.word	0x20000c84
 80037d4:	20000c80 	.word	0x20000c80
 80037d8:	20000c6c 	.word	0x20000c6c
 80037dc:	20000c64 	.word	0x20000c64

080037e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80037e4:	4b04      	ldr	r3, [pc, #16]	@ (80037f8 <vTaskSuspendAll+0x18>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3301      	adds	r3, #1
 80037ea:	4a03      	ldr	r2, [pc, #12]	@ (80037f8 <vTaskSuspendAll+0x18>)
 80037ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80037ee:	bf00      	nop
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	20000c88 	.word	0x20000c88

080037fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003802:	2300      	movs	r3, #0
 8003804:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003806:	2300      	movs	r3, #0
 8003808:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800380a:	4b42      	ldr	r3, [pc, #264]	@ (8003914 <xTaskResumeAll+0x118>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10b      	bne.n	800382a <xTaskResumeAll+0x2e>
	__asm volatile
 8003812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	603b      	str	r3, [r7, #0]
}
 8003824:	bf00      	nop
 8003826:	bf00      	nop
 8003828:	e7fd      	b.n	8003826 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800382a:	f001 f92d 	bl	8004a88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800382e:	4b39      	ldr	r3, [pc, #228]	@ (8003914 <xTaskResumeAll+0x118>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	3b01      	subs	r3, #1
 8003834:	4a37      	ldr	r2, [pc, #220]	@ (8003914 <xTaskResumeAll+0x118>)
 8003836:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003838:	4b36      	ldr	r3, [pc, #216]	@ (8003914 <xTaskResumeAll+0x118>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d162      	bne.n	8003906 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003840:	4b35      	ldr	r3, [pc, #212]	@ (8003918 <xTaskResumeAll+0x11c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d05e      	beq.n	8003906 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003848:	e02f      	b.n	80038aa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800384a:	4b34      	ldr	r3, [pc, #208]	@ (800391c <xTaskResumeAll+0x120>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3318      	adds	r3, #24
 8003856:	4618      	mov	r0, r3
 8003858:	f7fe ff9c 	bl	8002794 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	3304      	adds	r3, #4
 8003860:	4618      	mov	r0, r3
 8003862:	f7fe ff97 	bl	8002794 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800386a:	4b2d      	ldr	r3, [pc, #180]	@ (8003920 <xTaskResumeAll+0x124>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d903      	bls.n	800387a <xTaskResumeAll+0x7e>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003876:	4a2a      	ldr	r2, [pc, #168]	@ (8003920 <xTaskResumeAll+0x124>)
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800387e:	4613      	mov	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4a27      	ldr	r2, [pc, #156]	@ (8003924 <xTaskResumeAll+0x128>)
 8003888:	441a      	add	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3304      	adds	r3, #4
 800388e:	4619      	mov	r1, r3
 8003890:	4610      	mov	r0, r2
 8003892:	f7fe ff22 	bl	80026da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800389a:	4b23      	ldr	r3, [pc, #140]	@ (8003928 <xTaskResumeAll+0x12c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d302      	bcc.n	80038aa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80038a4:	4b21      	ldr	r3, [pc, #132]	@ (800392c <xTaskResumeAll+0x130>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038aa:	4b1c      	ldr	r3, [pc, #112]	@ (800391c <xTaskResumeAll+0x120>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1cb      	bne.n	800384a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80038b8:	f000 fb58 	bl	8003f6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80038bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003930 <xTaskResumeAll+0x134>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d010      	beq.n	80038ea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80038c8:	f000 f846 	bl	8003958 <xTaskIncrementTick>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80038d2:	4b16      	ldr	r3, [pc, #88]	@ (800392c <xTaskResumeAll+0x130>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3b01      	subs	r3, #1
 80038dc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f1      	bne.n	80038c8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80038e4:	4b12      	ldr	r3, [pc, #72]	@ (8003930 <xTaskResumeAll+0x134>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80038ea:	4b10      	ldr	r3, [pc, #64]	@ (800392c <xTaskResumeAll+0x130>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d009      	beq.n	8003906 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80038f2:	2301      	movs	r3, #1
 80038f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80038f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003934 <xTaskResumeAll+0x138>)
 80038f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003906:	f001 f8f1 	bl	8004aec <vPortExitCritical>

	return xAlreadyYielded;
 800390a:	68bb      	ldr	r3, [r7, #8]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	20000c88 	.word	0x20000c88
 8003918:	20000c60 	.word	0x20000c60
 800391c:	20000c20 	.word	0x20000c20
 8003920:	20000c68 	.word	0x20000c68
 8003924:	20000790 	.word	0x20000790
 8003928:	2000078c 	.word	0x2000078c
 800392c:	20000c74 	.word	0x20000c74
 8003930:	20000c70 	.word	0x20000c70
 8003934:	e000ed04 	.word	0xe000ed04

08003938 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800393e:	4b05      	ldr	r3, [pc, #20]	@ (8003954 <xTaskGetTickCount+0x1c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003944:	687b      	ldr	r3, [r7, #4]
}
 8003946:	4618      	mov	r0, r3
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20000c64 	.word	0x20000c64

08003958 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003962:	4b4f      	ldr	r3, [pc, #316]	@ (8003aa0 <xTaskIncrementTick+0x148>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	f040 8090 	bne.w	8003a8c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800396c:	4b4d      	ldr	r3, [pc, #308]	@ (8003aa4 <xTaskIncrementTick+0x14c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3301      	adds	r3, #1
 8003972:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003974:	4a4b      	ldr	r2, [pc, #300]	@ (8003aa4 <xTaskIncrementTick+0x14c>)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d121      	bne.n	80039c4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003980:	4b49      	ldr	r3, [pc, #292]	@ (8003aa8 <xTaskIncrementTick+0x150>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00b      	beq.n	80039a2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800398a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	603b      	str	r3, [r7, #0]
}
 800399c:	bf00      	nop
 800399e:	bf00      	nop
 80039a0:	e7fd      	b.n	800399e <xTaskIncrementTick+0x46>
 80039a2:	4b41      	ldr	r3, [pc, #260]	@ (8003aa8 <xTaskIncrementTick+0x150>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	4b40      	ldr	r3, [pc, #256]	@ (8003aac <xTaskIncrementTick+0x154>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a3e      	ldr	r2, [pc, #248]	@ (8003aa8 <xTaskIncrementTick+0x150>)
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	4a3e      	ldr	r2, [pc, #248]	@ (8003aac <xTaskIncrementTick+0x154>)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ab0 <xTaskIncrementTick+0x158>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3301      	adds	r3, #1
 80039bc:	4a3c      	ldr	r2, [pc, #240]	@ (8003ab0 <xTaskIncrementTick+0x158>)
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	f000 fad4 	bl	8003f6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80039c4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab4 <xTaskIncrementTick+0x15c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d349      	bcc.n	8003a62 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039ce:	4b36      	ldr	r3, [pc, #216]	@ (8003aa8 <xTaskIncrementTick+0x150>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d104      	bne.n	80039e2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039d8:	4b36      	ldr	r3, [pc, #216]	@ (8003ab4 <xTaskIncrementTick+0x15c>)
 80039da:	f04f 32ff 	mov.w	r2, #4294967295
 80039de:	601a      	str	r2, [r3, #0]
					break;
 80039e0:	e03f      	b.n	8003a62 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039e2:	4b31      	ldr	r3, [pc, #196]	@ (8003aa8 <xTaskIncrementTick+0x150>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d203      	bcs.n	8003a02 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80039fa:	4a2e      	ldr	r2, [pc, #184]	@ (8003ab4 <xTaskIncrementTick+0x15c>)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003a00:	e02f      	b.n	8003a62 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	3304      	adds	r3, #4
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe fec4 	bl	8002794 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d004      	beq.n	8003a1e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	3318      	adds	r3, #24
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fe febb 	bl	8002794 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a22:	4b25      	ldr	r3, [pc, #148]	@ (8003ab8 <xTaskIncrementTick+0x160>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d903      	bls.n	8003a32 <xTaskIncrementTick+0xda>
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2e:	4a22      	ldr	r2, [pc, #136]	@ (8003ab8 <xTaskIncrementTick+0x160>)
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8003abc <xTaskIncrementTick+0x164>)
 8003a40:	441a      	add	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	3304      	adds	r3, #4
 8003a46:	4619      	mov	r1, r3
 8003a48:	4610      	mov	r0, r2
 8003a4a:	f7fe fe46 	bl	80026da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a52:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac0 <xTaskIncrementTick+0x168>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d3b8      	bcc.n	80039ce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a60:	e7b5      	b.n	80039ce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a62:	4b17      	ldr	r3, [pc, #92]	@ (8003ac0 <xTaskIncrementTick+0x168>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a68:	4914      	ldr	r1, [pc, #80]	@ (8003abc <xTaskIncrementTick+0x164>)
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d901      	bls.n	8003a7e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a7e:	4b11      	ldr	r3, [pc, #68]	@ (8003ac4 <xTaskIncrementTick+0x16c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d007      	beq.n	8003a96 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003a86:	2301      	movs	r3, #1
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	e004      	b.n	8003a96 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ac8 <xTaskIncrementTick+0x170>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3301      	adds	r3, #1
 8003a92:	4a0d      	ldr	r2, [pc, #52]	@ (8003ac8 <xTaskIncrementTick+0x170>)
 8003a94:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a96:	697b      	ldr	r3, [r7, #20]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	20000c88 	.word	0x20000c88
 8003aa4:	20000c64 	.word	0x20000c64
 8003aa8:	20000c18 	.word	0x20000c18
 8003aac:	20000c1c 	.word	0x20000c1c
 8003ab0:	20000c78 	.word	0x20000c78
 8003ab4:	20000c80 	.word	0x20000c80
 8003ab8:	20000c68 	.word	0x20000c68
 8003abc:	20000790 	.word	0x20000790
 8003ac0:	2000078c 	.word	0x2000078c
 8003ac4:	20000c74 	.word	0x20000c74
 8003ac8:	20000c70 	.word	0x20000c70

08003acc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ad2:	4b28      	ldr	r3, [pc, #160]	@ (8003b74 <vTaskSwitchContext+0xa8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ada:	4b27      	ldr	r3, [pc, #156]	@ (8003b78 <vTaskSwitchContext+0xac>)
 8003adc:	2201      	movs	r2, #1
 8003ade:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ae0:	e042      	b.n	8003b68 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003ae2:	4b25      	ldr	r3, [pc, #148]	@ (8003b78 <vTaskSwitchContext+0xac>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ae8:	4b24      	ldr	r3, [pc, #144]	@ (8003b7c <vTaskSwitchContext+0xb0>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	e011      	b.n	8003b14 <vTaskSwitchContext+0x48>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10b      	bne.n	8003b0e <vTaskSwitchContext+0x42>
	__asm volatile
 8003af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003afa:	f383 8811 	msr	BASEPRI, r3
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f3bf 8f4f 	dsb	sy
 8003b06:	607b      	str	r3, [r7, #4]
}
 8003b08:	bf00      	nop
 8003b0a:	bf00      	nop
 8003b0c:	e7fd      	b.n	8003b0a <vTaskSwitchContext+0x3e>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	3b01      	subs	r3, #1
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	491a      	ldr	r1, [pc, #104]	@ (8003b80 <vTaskSwitchContext+0xb4>)
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0e3      	beq.n	8003af0 <vTaskSwitchContext+0x24>
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4a13      	ldr	r2, [pc, #76]	@ (8003b80 <vTaskSwitchContext+0xb4>)
 8003b34:	4413      	add	r3, r2
 8003b36:	60bb      	str	r3, [r7, #8]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	3308      	adds	r3, #8
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d104      	bne.n	8003b58 <vTaskSwitchContext+0x8c>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	605a      	str	r2, [r3, #4]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	4a09      	ldr	r2, [pc, #36]	@ (8003b84 <vTaskSwitchContext+0xb8>)
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	4a06      	ldr	r2, [pc, #24]	@ (8003b7c <vTaskSwitchContext+0xb0>)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6013      	str	r3, [r2, #0]
}
 8003b68:	bf00      	nop
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	20000c88 	.word	0x20000c88
 8003b78:	20000c74 	.word	0x20000c74
 8003b7c:	20000c68 	.word	0x20000c68
 8003b80:	20000790 	.word	0x20000790
 8003b84:	2000078c 	.word	0x2000078c

08003b88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10b      	bne.n	8003bb0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	60fb      	str	r3, [r7, #12]
}
 8003baa:	bf00      	nop
 8003bac:	bf00      	nop
 8003bae:	e7fd      	b.n	8003bac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bb0:	4b07      	ldr	r3, [pc, #28]	@ (8003bd0 <vTaskPlaceOnEventList+0x48>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3318      	adds	r3, #24
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7fe fdb2 	bl	8002722 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	6838      	ldr	r0, [r7, #0]
 8003bc2:	f000 fa81 	bl	80040c8 <prvAddCurrentTaskToDelayedList>
}
 8003bc6:	bf00      	nop
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	2000078c 	.word	0x2000078c

08003bd4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10b      	bne.n	8003bfe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bea:	f383 8811 	msr	BASEPRI, r3
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	617b      	str	r3, [r7, #20]
}
 8003bf8:	bf00      	nop
 8003bfa:	bf00      	nop
 8003bfc:	e7fd      	b.n	8003bfa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8003c28 <vTaskPlaceOnEventListRestricted+0x54>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3318      	adds	r3, #24
 8003c04:	4619      	mov	r1, r3
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f7fe fd67 	bl	80026da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003c12:	f04f 33ff 	mov.w	r3, #4294967295
 8003c16:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	68b8      	ldr	r0, [r7, #8]
 8003c1c:	f000 fa54 	bl	80040c8 <prvAddCurrentTaskToDelayedList>
	}
 8003c20:	bf00      	nop
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	2000078c 	.word	0x2000078c

08003c2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10b      	bne.n	8003c5a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c46:	f383 8811 	msr	BASEPRI, r3
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	60fb      	str	r3, [r7, #12]
}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	e7fd      	b.n	8003c56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	3318      	adds	r3, #24
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fe fd98 	bl	8002794 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c64:	4b1d      	ldr	r3, [pc, #116]	@ (8003cdc <xTaskRemoveFromEventList+0xb0>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d11d      	bne.n	8003ca8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	3304      	adds	r3, #4
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fe fd8f 	bl	8002794 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c7a:	4b19      	ldr	r3, [pc, #100]	@ (8003ce0 <xTaskRemoveFromEventList+0xb4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d903      	bls.n	8003c8a <xTaskRemoveFromEventList+0x5e>
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c86:	4a16      	ldr	r2, [pc, #88]	@ (8003ce0 <xTaskRemoveFromEventList+0xb4>)
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4a13      	ldr	r2, [pc, #76]	@ (8003ce4 <xTaskRemoveFromEventList+0xb8>)
 8003c98:	441a      	add	r2, r3
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f7fe fd1a 	bl	80026da <vListInsertEnd>
 8003ca6:	e005      	b.n	8003cb4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	3318      	adds	r3, #24
 8003cac:	4619      	mov	r1, r3
 8003cae:	480e      	ldr	r0, [pc, #56]	@ (8003ce8 <xTaskRemoveFromEventList+0xbc>)
 8003cb0:	f7fe fd13 	bl	80026da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003cec <xTaskRemoveFromEventList+0xc0>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d905      	bls.n	8003cce <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf0 <xTaskRemoveFromEventList+0xc4>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	e001      	b.n	8003cd2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003cd2:	697b      	ldr	r3, [r7, #20]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20000c88 	.word	0x20000c88
 8003ce0:	20000c68 	.word	0x20000c68
 8003ce4:	20000790 	.word	0x20000790
 8003ce8:	20000c20 	.word	0x20000c20
 8003cec:	2000078c 	.word	0x2000078c
 8003cf0:	20000c74 	.word	0x20000c74

08003cf4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003cfc:	4b06      	ldr	r3, [pc, #24]	@ (8003d18 <vTaskInternalSetTimeOutState+0x24>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d04:	4b05      	ldr	r3, [pc, #20]	@ (8003d1c <vTaskInternalSetTimeOutState+0x28>)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	605a      	str	r2, [r3, #4]
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	20000c78 	.word	0x20000c78
 8003d1c:	20000c64 	.word	0x20000c64

08003d20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10b      	bne.n	8003d48 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d34:	f383 8811 	msr	BASEPRI, r3
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	613b      	str	r3, [r7, #16]
}
 8003d42:	bf00      	nop
 8003d44:	bf00      	nop
 8003d46:	e7fd      	b.n	8003d44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10b      	bne.n	8003d66 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	60fb      	str	r3, [r7, #12]
}
 8003d60:	bf00      	nop
 8003d62:	bf00      	nop
 8003d64:	e7fd      	b.n	8003d62 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003d66:	f000 fe8f 	bl	8004a88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8003de0 <xTaskCheckForTimeOut+0xc0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d82:	d102      	bne.n	8003d8a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003d84:	2300      	movs	r3, #0
 8003d86:	61fb      	str	r3, [r7, #28]
 8003d88:	e023      	b.n	8003dd2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4b15      	ldr	r3, [pc, #84]	@ (8003de4 <xTaskCheckForTimeOut+0xc4>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d007      	beq.n	8003da6 <xTaskCheckForTimeOut+0x86>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d302      	bcc.n	8003da6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003da0:	2301      	movs	r3, #1
 8003da2:	61fb      	str	r3, [r7, #28]
 8003da4:	e015      	b.n	8003dd2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d20b      	bcs.n	8003dc8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	1ad2      	subs	r2, r2, r3
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff ff99 	bl	8003cf4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	e004      	b.n	8003dd2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003dd2:	f000 fe8b 	bl	8004aec <vPortExitCritical>

	return xReturn;
 8003dd6:	69fb      	ldr	r3, [r7, #28]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3720      	adds	r7, #32
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	20000c64 	.word	0x20000c64
 8003de4:	20000c78 	.word	0x20000c78

08003de8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003dec:	4b03      	ldr	r3, [pc, #12]	@ (8003dfc <vTaskMissedYield+0x14>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
}
 8003df2:	bf00      	nop
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	20000c74 	.word	0x20000c74

08003e00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e08:	f000 f852 	bl	8003eb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e0c:	4b06      	ldr	r3, [pc, #24]	@ (8003e28 <prvIdleTask+0x28>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d9f9      	bls.n	8003e08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e14:	4b05      	ldr	r3, [pc, #20]	@ (8003e2c <prvIdleTask+0x2c>)
 8003e16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e24:	e7f0      	b.n	8003e08 <prvIdleTask+0x8>
 8003e26:	bf00      	nop
 8003e28:	20000790 	.word	0x20000790
 8003e2c:	e000ed04 	.word	0xe000ed04

08003e30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e36:	2300      	movs	r3, #0
 8003e38:	607b      	str	r3, [r7, #4]
 8003e3a:	e00c      	b.n	8003e56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4a12      	ldr	r2, [pc, #72]	@ (8003e90 <prvInitialiseTaskLists+0x60>)
 8003e48:	4413      	add	r3, r2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe fc18 	bl	8002680 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3301      	adds	r3, #1
 8003e54:	607b      	str	r3, [r7, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b37      	cmp	r3, #55	@ 0x37
 8003e5a:	d9ef      	bls.n	8003e3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e5c:	480d      	ldr	r0, [pc, #52]	@ (8003e94 <prvInitialiseTaskLists+0x64>)
 8003e5e:	f7fe fc0f 	bl	8002680 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e62:	480d      	ldr	r0, [pc, #52]	@ (8003e98 <prvInitialiseTaskLists+0x68>)
 8003e64:	f7fe fc0c 	bl	8002680 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e68:	480c      	ldr	r0, [pc, #48]	@ (8003e9c <prvInitialiseTaskLists+0x6c>)
 8003e6a:	f7fe fc09 	bl	8002680 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e6e:	480c      	ldr	r0, [pc, #48]	@ (8003ea0 <prvInitialiseTaskLists+0x70>)
 8003e70:	f7fe fc06 	bl	8002680 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e74:	480b      	ldr	r0, [pc, #44]	@ (8003ea4 <prvInitialiseTaskLists+0x74>)
 8003e76:	f7fe fc03 	bl	8002680 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea8 <prvInitialiseTaskLists+0x78>)
 8003e7c:	4a05      	ldr	r2, [pc, #20]	@ (8003e94 <prvInitialiseTaskLists+0x64>)
 8003e7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e80:	4b0a      	ldr	r3, [pc, #40]	@ (8003eac <prvInitialiseTaskLists+0x7c>)
 8003e82:	4a05      	ldr	r2, [pc, #20]	@ (8003e98 <prvInitialiseTaskLists+0x68>)
 8003e84:	601a      	str	r2, [r3, #0]
}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20000790 	.word	0x20000790
 8003e94:	20000bf0 	.word	0x20000bf0
 8003e98:	20000c04 	.word	0x20000c04
 8003e9c:	20000c20 	.word	0x20000c20
 8003ea0:	20000c34 	.word	0x20000c34
 8003ea4:	20000c4c 	.word	0x20000c4c
 8003ea8:	20000c18 	.word	0x20000c18
 8003eac:	20000c1c 	.word	0x20000c1c

08003eb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003eb6:	e019      	b.n	8003eec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003eb8:	f000 fde6 	bl	8004a88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ebc:	4b10      	ldr	r3, [pc, #64]	@ (8003f00 <prvCheckTasksWaitingTermination+0x50>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fe fc63 	bl	8002794 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ece:	4b0d      	ldr	r3, [pc, #52]	@ (8003f04 <prvCheckTasksWaitingTermination+0x54>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8003f04 <prvCheckTasksWaitingTermination+0x54>)
 8003ed6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f08 <prvCheckTasksWaitingTermination+0x58>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3b01      	subs	r3, #1
 8003ede:	4a0a      	ldr	r2, [pc, #40]	@ (8003f08 <prvCheckTasksWaitingTermination+0x58>)
 8003ee0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ee2:	f000 fe03 	bl	8004aec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f810 	bl	8003f0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003eec:	4b06      	ldr	r3, [pc, #24]	@ (8003f08 <prvCheckTasksWaitingTermination+0x58>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1e1      	bne.n	8003eb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ef4:	bf00      	nop
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000c34 	.word	0x20000c34
 8003f04:	20000c60 	.word	0x20000c60
 8003f08:	20000c48 	.word	0x20000c48

08003f0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d108      	bne.n	8003f30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 ffa0 	bl	8004e68 <vPortFree>
				vPortFree( pxTCB );
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 ff9d 	bl	8004e68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f2e:	e019      	b.n	8003f64 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d103      	bne.n	8003f42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 ff94 	bl	8004e68 <vPortFree>
	}
 8003f40:	e010      	b.n	8003f64 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d00b      	beq.n	8003f64 <prvDeleteTCB+0x58>
	__asm volatile
 8003f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f50:	f383 8811 	msr	BASEPRI, r3
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	60fb      	str	r3, [r7, #12]
}
 8003f5e:	bf00      	nop
 8003f60:	bf00      	nop
 8003f62:	e7fd      	b.n	8003f60 <prvDeleteTCB+0x54>
	}
 8003f64:	bf00      	nop
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f72:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa4 <prvResetNextTaskUnblockTime+0x38>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d104      	bne.n	8003f86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa8 <prvResetNextTaskUnblockTime+0x3c>)
 8003f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f84:	e008      	b.n	8003f98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f86:	4b07      	ldr	r3, [pc, #28]	@ (8003fa4 <prvResetNextTaskUnblockTime+0x38>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	4a04      	ldr	r2, [pc, #16]	@ (8003fa8 <prvResetNextTaskUnblockTime+0x3c>)
 8003f96:	6013      	str	r3, [r2, #0]
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	20000c18 	.word	0x20000c18
 8003fa8:	20000c80 	.word	0x20000c80

08003fac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe0 <xTaskGetSchedulerState+0x34>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d102      	bne.n	8003fc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	607b      	str	r3, [r7, #4]
 8003fbe:	e008      	b.n	8003fd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fc0:	4b08      	ldr	r3, [pc, #32]	@ (8003fe4 <xTaskGetSchedulerState+0x38>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d102      	bne.n	8003fce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	607b      	str	r3, [r7, #4]
 8003fcc:	e001      	b.n	8003fd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003fd2:	687b      	ldr	r3, [r7, #4]
	}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	20000c6c 	.word	0x20000c6c
 8003fe4:	20000c88 	.word	0x20000c88

08003fe8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d058      	beq.n	80040b0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003ffe:	4b2f      	ldr	r3, [pc, #188]	@ (80040bc <xTaskPriorityDisinherit+0xd4>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	429a      	cmp	r2, r3
 8004006:	d00b      	beq.n	8004020 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	60fb      	str	r3, [r7, #12]
}
 800401a:	bf00      	nop
 800401c:	bf00      	nop
 800401e:	e7fd      	b.n	800401c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10b      	bne.n	8004040 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	60bb      	str	r3, [r7, #8]
}
 800403a:	bf00      	nop
 800403c:	bf00      	nop
 800403e:	e7fd      	b.n	800403c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004044:	1e5a      	subs	r2, r3, #1
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004052:	429a      	cmp	r2, r3
 8004054:	d02c      	beq.n	80040b0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800405a:	2b00      	cmp	r3, #0
 800405c:	d128      	bne.n	80040b0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	3304      	adds	r3, #4
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe fb96 	bl	8002794 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004074:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004080:	4b0f      	ldr	r3, [pc, #60]	@ (80040c0 <xTaskPriorityDisinherit+0xd8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d903      	bls.n	8004090 <xTaskPriorityDisinherit+0xa8>
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800408c:	4a0c      	ldr	r2, [pc, #48]	@ (80040c0 <xTaskPriorityDisinherit+0xd8>)
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4a09      	ldr	r2, [pc, #36]	@ (80040c4 <xTaskPriorityDisinherit+0xdc>)
 800409e:	441a      	add	r2, r3
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	3304      	adds	r3, #4
 80040a4:	4619      	mov	r1, r3
 80040a6:	4610      	mov	r0, r2
 80040a8:	f7fe fb17 	bl	80026da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80040ac:	2301      	movs	r3, #1
 80040ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80040b0:	697b      	ldr	r3, [r7, #20]
	}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	2000078c 	.word	0x2000078c
 80040c0:	20000c68 	.word	0x20000c68
 80040c4:	20000790 	.word	0x20000790

080040c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80040d2:	4b21      	ldr	r3, [pc, #132]	@ (8004158 <prvAddCurrentTaskToDelayedList+0x90>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040d8:	4b20      	ldr	r3, [pc, #128]	@ (800415c <prvAddCurrentTaskToDelayedList+0x94>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3304      	adds	r3, #4
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fe fb58 	bl	8002794 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ea:	d10a      	bne.n	8004102 <prvAddCurrentTaskToDelayedList+0x3a>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d007      	beq.n	8004102 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040f2:	4b1a      	ldr	r3, [pc, #104]	@ (800415c <prvAddCurrentTaskToDelayedList+0x94>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3304      	adds	r3, #4
 80040f8:	4619      	mov	r1, r3
 80040fa:	4819      	ldr	r0, [pc, #100]	@ (8004160 <prvAddCurrentTaskToDelayedList+0x98>)
 80040fc:	f7fe faed 	bl	80026da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004100:	e026      	b.n	8004150 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4413      	add	r3, r2
 8004108:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800410a:	4b14      	ldr	r3, [pc, #80]	@ (800415c <prvAddCurrentTaskToDelayedList+0x94>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	429a      	cmp	r2, r3
 8004118:	d209      	bcs.n	800412e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800411a:	4b12      	ldr	r3, [pc, #72]	@ (8004164 <prvAddCurrentTaskToDelayedList+0x9c>)
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	4b0f      	ldr	r3, [pc, #60]	@ (800415c <prvAddCurrentTaskToDelayedList+0x94>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3304      	adds	r3, #4
 8004124:	4619      	mov	r1, r3
 8004126:	4610      	mov	r0, r2
 8004128:	f7fe fafb 	bl	8002722 <vListInsert>
}
 800412c:	e010      	b.n	8004150 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800412e:	4b0e      	ldr	r3, [pc, #56]	@ (8004168 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	4b0a      	ldr	r3, [pc, #40]	@ (800415c <prvAddCurrentTaskToDelayedList+0x94>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3304      	adds	r3, #4
 8004138:	4619      	mov	r1, r3
 800413a:	4610      	mov	r0, r2
 800413c:	f7fe faf1 	bl	8002722 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004140:	4b0a      	ldr	r3, [pc, #40]	@ (800416c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	429a      	cmp	r2, r3
 8004148:	d202      	bcs.n	8004150 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800414a:	4a08      	ldr	r2, [pc, #32]	@ (800416c <prvAddCurrentTaskToDelayedList+0xa4>)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	6013      	str	r3, [r2, #0]
}
 8004150:	bf00      	nop
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	20000c64 	.word	0x20000c64
 800415c:	2000078c 	.word	0x2000078c
 8004160:	20000c4c 	.word	0x20000c4c
 8004164:	20000c1c 	.word	0x20000c1c
 8004168:	20000c18 	.word	0x20000c18
 800416c:	20000c80 	.word	0x20000c80

08004170 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08a      	sub	sp, #40	@ 0x28
 8004174:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800417a:	f000 fb13 	bl	80047a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800417e:	4b1d      	ldr	r3, [pc, #116]	@ (80041f4 <xTimerCreateTimerTask+0x84>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d021      	beq.n	80041ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800418a:	2300      	movs	r3, #0
 800418c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800418e:	1d3a      	adds	r2, r7, #4
 8004190:	f107 0108 	add.w	r1, r7, #8
 8004194:	f107 030c 	add.w	r3, r7, #12
 8004198:	4618      	mov	r0, r3
 800419a:	f7fe fa57 	bl	800264c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	9202      	str	r2, [sp, #8]
 80041a6:	9301      	str	r3, [sp, #4]
 80041a8:	2302      	movs	r3, #2
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	2300      	movs	r3, #0
 80041ae:	460a      	mov	r2, r1
 80041b0:	4911      	ldr	r1, [pc, #68]	@ (80041f8 <xTimerCreateTimerTask+0x88>)
 80041b2:	4812      	ldr	r0, [pc, #72]	@ (80041fc <xTimerCreateTimerTask+0x8c>)
 80041b4:	f7ff f8d0 	bl	8003358 <xTaskCreateStatic>
 80041b8:	4603      	mov	r3, r0
 80041ba:	4a11      	ldr	r2, [pc, #68]	@ (8004200 <xTimerCreateTimerTask+0x90>)
 80041bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80041be:	4b10      	ldr	r3, [pc, #64]	@ (8004200 <xTimerCreateTimerTask+0x90>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80041c6:	2301      	movs	r3, #1
 80041c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10b      	bne.n	80041e8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80041d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	613b      	str	r3, [r7, #16]
}
 80041e2:	bf00      	nop
 80041e4:	bf00      	nop
 80041e6:	e7fd      	b.n	80041e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80041e8:	697b      	ldr	r3, [r7, #20]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000cbc 	.word	0x20000cbc
 80041f8:	08005184 	.word	0x08005184
 80041fc:	0800433d 	.word	0x0800433d
 8004200:	20000cc0 	.word	0x20000cc0

08004204 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	@ 0x28
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004212:	2300      	movs	r3, #0
 8004214:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10b      	bne.n	8004234 <xTimerGenericCommand+0x30>
	__asm volatile
 800421c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	623b      	str	r3, [r7, #32]
}
 800422e:	bf00      	nop
 8004230:	bf00      	nop
 8004232:	e7fd      	b.n	8004230 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004234:	4b19      	ldr	r3, [pc, #100]	@ (800429c <xTimerGenericCommand+0x98>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d02a      	beq.n	8004292 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b05      	cmp	r3, #5
 800424c:	dc18      	bgt.n	8004280 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800424e:	f7ff fead 	bl	8003fac <xTaskGetSchedulerState>
 8004252:	4603      	mov	r3, r0
 8004254:	2b02      	cmp	r3, #2
 8004256:	d109      	bne.n	800426c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004258:	4b10      	ldr	r3, [pc, #64]	@ (800429c <xTimerGenericCommand+0x98>)
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	f107 0110 	add.w	r1, r7, #16
 8004260:	2300      	movs	r3, #0
 8004262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004264:	f7fe fc06 	bl	8002a74 <xQueueGenericSend>
 8004268:	6278      	str	r0, [r7, #36]	@ 0x24
 800426a:	e012      	b.n	8004292 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800426c:	4b0b      	ldr	r3, [pc, #44]	@ (800429c <xTimerGenericCommand+0x98>)
 800426e:	6818      	ldr	r0, [r3, #0]
 8004270:	f107 0110 	add.w	r1, r7, #16
 8004274:	2300      	movs	r3, #0
 8004276:	2200      	movs	r2, #0
 8004278:	f7fe fbfc 	bl	8002a74 <xQueueGenericSend>
 800427c:	6278      	str	r0, [r7, #36]	@ 0x24
 800427e:	e008      	b.n	8004292 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004280:	4b06      	ldr	r3, [pc, #24]	@ (800429c <xTimerGenericCommand+0x98>)
 8004282:	6818      	ldr	r0, [r3, #0]
 8004284:	f107 0110 	add.w	r1, r7, #16
 8004288:	2300      	movs	r3, #0
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	f7fe fcf4 	bl	8002c78 <xQueueGenericSendFromISR>
 8004290:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004294:	4618      	mov	r0, r3
 8004296:	3728      	adds	r7, #40	@ 0x28
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	20000cbc 	.word	0x20000cbc

080042a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042aa:	4b23      	ldr	r3, [pc, #140]	@ (8004338 <prvProcessExpiredTimer+0x98>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	3304      	adds	r3, #4
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fe fa6b 	bl	8002794 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d023      	beq.n	8004314 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	699a      	ldr	r2, [r3, #24]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	18d1      	adds	r1, r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	6978      	ldr	r0, [r7, #20]
 80042da:	f000 f8d5 	bl	8004488 <prvInsertTimerInActiveList>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d020      	beq.n	8004326 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80042e4:	2300      	movs	r3, #0
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	2300      	movs	r3, #0
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	2100      	movs	r1, #0
 80042ee:	6978      	ldr	r0, [r7, #20]
 80042f0:	f7ff ff88 	bl	8004204 <xTimerGenericCommand>
 80042f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d114      	bne.n	8004326 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80042fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004300:	f383 8811 	msr	BASEPRI, r3
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	60fb      	str	r3, [r7, #12]
}
 800430e:	bf00      	nop
 8004310:	bf00      	nop
 8004312:	e7fd      	b.n	8004310 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800431a:	f023 0301 	bic.w	r3, r3, #1
 800431e:	b2da      	uxtb	r2, r3
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	6978      	ldr	r0, [r7, #20]
 800432c:	4798      	blx	r3
}
 800432e:	bf00      	nop
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000cb4 	.word	0x20000cb4

0800433c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004344:	f107 0308 	add.w	r3, r7, #8
 8004348:	4618      	mov	r0, r3
 800434a:	f000 f859 	bl	8004400 <prvGetNextExpireTime>
 800434e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	4619      	mov	r1, r3
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 f805 	bl	8004364 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800435a:	f000 f8d7 	bl	800450c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800435e:	bf00      	nop
 8004360:	e7f0      	b.n	8004344 <prvTimerTask+0x8>
	...

08004364 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800436e:	f7ff fa37 	bl	80037e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004372:	f107 0308 	add.w	r3, r7, #8
 8004376:	4618      	mov	r0, r3
 8004378:	f000 f866 	bl	8004448 <prvSampleTimeNow>
 800437c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d130      	bne.n	80043e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10a      	bne.n	80043a0 <prvProcessTimerOrBlockTask+0x3c>
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	429a      	cmp	r2, r3
 8004390:	d806      	bhi.n	80043a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004392:	f7ff fa33 	bl	80037fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004396:	68f9      	ldr	r1, [r7, #12]
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff ff81 	bl	80042a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800439e:	e024      	b.n	80043ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d008      	beq.n	80043b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80043a6:	4b13      	ldr	r3, [pc, #76]	@ (80043f4 <prvProcessTimerOrBlockTask+0x90>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <prvProcessTimerOrBlockTask+0x50>
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <prvProcessTimerOrBlockTask+0x52>
 80043b4:	2300      	movs	r3, #0
 80043b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80043b8:	4b0f      	ldr	r3, [pc, #60]	@ (80043f8 <prvProcessTimerOrBlockTask+0x94>)
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	4619      	mov	r1, r3
 80043c6:	f7fe ff93 	bl	80032f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80043ca:	f7ff fa17 	bl	80037fc <xTaskResumeAll>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10a      	bne.n	80043ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80043d4:	4b09      	ldr	r3, [pc, #36]	@ (80043fc <prvProcessTimerOrBlockTask+0x98>)
 80043d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	f3bf 8f6f 	isb	sy
}
 80043e4:	e001      	b.n	80043ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80043e6:	f7ff fa09 	bl	80037fc <xTaskResumeAll>
}
 80043ea:	bf00      	nop
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	20000cb8 	.word	0x20000cb8
 80043f8:	20000cbc 	.word	0x20000cbc
 80043fc:	e000ed04 	.word	0xe000ed04

08004400 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004408:	4b0e      	ldr	r3, [pc, #56]	@ (8004444 <prvGetNextExpireTime+0x44>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <prvGetNextExpireTime+0x16>
 8004412:	2201      	movs	r2, #1
 8004414:	e000      	b.n	8004418 <prvGetNextExpireTime+0x18>
 8004416:	2200      	movs	r2, #0
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d105      	bne.n	8004430 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004424:	4b07      	ldr	r3, [pc, #28]	@ (8004444 <prvGetNextExpireTime+0x44>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	e001      	b.n	8004434 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004434:	68fb      	ldr	r3, [r7, #12]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	20000cb4 	.word	0x20000cb4

08004448 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004450:	f7ff fa72 	bl	8003938 <xTaskGetTickCount>
 8004454:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004456:	4b0b      	ldr	r3, [pc, #44]	@ (8004484 <prvSampleTimeNow+0x3c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	429a      	cmp	r2, r3
 800445e:	d205      	bcs.n	800446c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004460:	f000 f93a 	bl	80046d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	e002      	b.n	8004472 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004472:	4a04      	ldr	r2, [pc, #16]	@ (8004484 <prvSampleTimeNow+0x3c>)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004478:	68fb      	ldr	r3, [r7, #12]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000cc4 	.word	0x20000cc4

08004488 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004496:	2300      	movs	r3, #0
 8004498:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d812      	bhi.n	80044d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	1ad2      	subs	r2, r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d302      	bcc.n	80044c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80044bc:	2301      	movs	r3, #1
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	e01b      	b.n	80044fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80044c2:	4b10      	ldr	r3, [pc, #64]	@ (8004504 <prvInsertTimerInActiveList+0x7c>)
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3304      	adds	r3, #4
 80044ca:	4619      	mov	r1, r3
 80044cc:	4610      	mov	r0, r2
 80044ce:	f7fe f928 	bl	8002722 <vListInsert>
 80044d2:	e012      	b.n	80044fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d206      	bcs.n	80044ea <prvInsertTimerInActiveList+0x62>
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d302      	bcc.n	80044ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80044e4:	2301      	movs	r3, #1
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	e007      	b.n	80044fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044ea:	4b07      	ldr	r3, [pc, #28]	@ (8004508 <prvInsertTimerInActiveList+0x80>)
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	3304      	adds	r3, #4
 80044f2:	4619      	mov	r1, r3
 80044f4:	4610      	mov	r0, r2
 80044f6:	f7fe f914 	bl	8002722 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80044fa:	697b      	ldr	r3, [r7, #20]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	20000cb8 	.word	0x20000cb8
 8004508:	20000cb4 	.word	0x20000cb4

0800450c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b08e      	sub	sp, #56	@ 0x38
 8004510:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004512:	e0ce      	b.n	80046b2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	da19      	bge.n	800454e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800451a:	1d3b      	adds	r3, r7, #4
 800451c:	3304      	adds	r3, #4
 800451e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10b      	bne.n	800453e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	61fb      	str	r3, [r7, #28]
}
 8004538:	bf00      	nop
 800453a:	bf00      	nop
 800453c:	e7fd      	b.n	800453a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800453e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004544:	6850      	ldr	r0, [r2, #4]
 8004546:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004548:	6892      	ldr	r2, [r2, #8]
 800454a:	4611      	mov	r1, r2
 800454c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	f2c0 80ae 	blt.w	80046b2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800455a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d004      	beq.n	800456c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004564:	3304      	adds	r3, #4
 8004566:	4618      	mov	r0, r3
 8004568:	f7fe f914 	bl	8002794 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800456c:	463b      	mov	r3, r7
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff ff6a 	bl	8004448 <prvSampleTimeNow>
 8004574:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b09      	cmp	r3, #9
 800457a:	f200 8097 	bhi.w	80046ac <prvProcessReceivedCommands+0x1a0>
 800457e:	a201      	add	r2, pc, #4	@ (adr r2, 8004584 <prvProcessReceivedCommands+0x78>)
 8004580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004584:	080045ad 	.word	0x080045ad
 8004588:	080045ad 	.word	0x080045ad
 800458c:	080045ad 	.word	0x080045ad
 8004590:	08004623 	.word	0x08004623
 8004594:	08004637 	.word	0x08004637
 8004598:	08004683 	.word	0x08004683
 800459c:	080045ad 	.word	0x080045ad
 80045a0:	080045ad 	.word	0x080045ad
 80045a4:	08004623 	.word	0x08004623
 80045a8:	08004637 	.word	0x08004637
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80045ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045b2:	f043 0301 	orr.w	r3, r3, #1
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	18d1      	adds	r1, r2, r3
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045cc:	f7ff ff5c 	bl	8004488 <prvInsertTimerInActiveList>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d06c      	beq.n	80046b0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d061      	beq.n	80046b0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	441a      	add	r2, r3
 80045f4:	2300      	movs	r3, #0
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	2300      	movs	r3, #0
 80045fa:	2100      	movs	r1, #0
 80045fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045fe:	f7ff fe01 	bl	8004204 <xTimerGenericCommand>
 8004602:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d152      	bne.n	80046b0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	61bb      	str	r3, [r7, #24]
}
 800461c:	bf00      	nop
 800461e:	bf00      	nop
 8004620:	e7fd      	b.n	800461e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004624:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004628:	f023 0301 	bic.w	r3, r3, #1
 800462c:	b2da      	uxtb	r2, r3
 800462e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004630:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004634:	e03d      	b.n	80046b2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004638:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	b2da      	uxtb	r2, r3
 8004642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004644:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800464e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10b      	bne.n	800466e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	617b      	str	r3, [r7, #20]
}
 8004668:	bf00      	nop
 800466a:	bf00      	nop
 800466c:	e7fd      	b.n	800466a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800466e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004670:	699a      	ldr	r2, [r3, #24]
 8004672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004674:	18d1      	adds	r1, r2, r3
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800467a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800467c:	f7ff ff04 	bl	8004488 <prvInsertTimerInActiveList>
					break;
 8004680:	e017      	b.n	80046b2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004684:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d103      	bne.n	8004698 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004690:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004692:	f000 fbe9 	bl	8004e68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004696:	e00c      	b.n	80046b2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800469e:	f023 0301 	bic.w	r3, r3, #1
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80046aa:	e002      	b.n	80046b2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80046ac:	bf00      	nop
 80046ae:	e000      	b.n	80046b2 <prvProcessReceivedCommands+0x1a6>
					break;
 80046b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046b2:	4b08      	ldr	r3, [pc, #32]	@ (80046d4 <prvProcessReceivedCommands+0x1c8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	1d39      	adds	r1, r7, #4
 80046b8:	2200      	movs	r2, #0
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fe fb7a 	bl	8002db4 <xQueueReceive>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f47f af26 	bne.w	8004514 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80046c8:	bf00      	nop
 80046ca:	bf00      	nop
 80046cc:	3730      	adds	r7, #48	@ 0x30
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20000cbc 	.word	0x20000cbc

080046d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b088      	sub	sp, #32
 80046dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046de:	e049      	b.n	8004774 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046e0:	4b2e      	ldr	r3, [pc, #184]	@ (800479c <prvSwitchTimerLists+0xc4>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046ea:	4b2c      	ldr	r3, [pc, #176]	@ (800479c <prvSwitchTimerLists+0xc4>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	3304      	adds	r3, #4
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fe f84b 	bl	8002794 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d02f      	beq.n	8004774 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4413      	add	r3, r2
 800471c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	429a      	cmp	r2, r3
 8004724:	d90e      	bls.n	8004744 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004732:	4b1a      	ldr	r3, [pc, #104]	@ (800479c <prvSwitchTimerLists+0xc4>)
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	3304      	adds	r3, #4
 800473a:	4619      	mov	r1, r3
 800473c:	4610      	mov	r0, r2
 800473e:	f7fd fff0 	bl	8002722 <vListInsert>
 8004742:	e017      	b.n	8004774 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004744:	2300      	movs	r3, #0
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	2300      	movs	r3, #0
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	2100      	movs	r1, #0
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f7ff fd58 	bl	8004204 <xTimerGenericCommand>
 8004754:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10b      	bne.n	8004774 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800475c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	603b      	str	r3, [r7, #0]
}
 800476e:	bf00      	nop
 8004770:	bf00      	nop
 8004772:	e7fd      	b.n	8004770 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004774:	4b09      	ldr	r3, [pc, #36]	@ (800479c <prvSwitchTimerLists+0xc4>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1b0      	bne.n	80046e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800477e:	4b07      	ldr	r3, [pc, #28]	@ (800479c <prvSwitchTimerLists+0xc4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004784:	4b06      	ldr	r3, [pc, #24]	@ (80047a0 <prvSwitchTimerLists+0xc8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a04      	ldr	r2, [pc, #16]	@ (800479c <prvSwitchTimerLists+0xc4>)
 800478a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800478c:	4a04      	ldr	r2, [pc, #16]	@ (80047a0 <prvSwitchTimerLists+0xc8>)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	6013      	str	r3, [r2, #0]
}
 8004792:	bf00      	nop
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	20000cb4 	.word	0x20000cb4
 80047a0:	20000cb8 	.word	0x20000cb8

080047a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80047aa:	f000 f96d 	bl	8004a88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80047ae:	4b15      	ldr	r3, [pc, #84]	@ (8004804 <prvCheckForValidListAndQueue+0x60>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d120      	bne.n	80047f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80047b6:	4814      	ldr	r0, [pc, #80]	@ (8004808 <prvCheckForValidListAndQueue+0x64>)
 80047b8:	f7fd ff62 	bl	8002680 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80047bc:	4813      	ldr	r0, [pc, #76]	@ (800480c <prvCheckForValidListAndQueue+0x68>)
 80047be:	f7fd ff5f 	bl	8002680 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80047c2:	4b13      	ldr	r3, [pc, #76]	@ (8004810 <prvCheckForValidListAndQueue+0x6c>)
 80047c4:	4a10      	ldr	r2, [pc, #64]	@ (8004808 <prvCheckForValidListAndQueue+0x64>)
 80047c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80047c8:	4b12      	ldr	r3, [pc, #72]	@ (8004814 <prvCheckForValidListAndQueue+0x70>)
 80047ca:	4a10      	ldr	r2, [pc, #64]	@ (800480c <prvCheckForValidListAndQueue+0x68>)
 80047cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80047ce:	2300      	movs	r3, #0
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	4b11      	ldr	r3, [pc, #68]	@ (8004818 <prvCheckForValidListAndQueue+0x74>)
 80047d4:	4a11      	ldr	r2, [pc, #68]	@ (800481c <prvCheckForValidListAndQueue+0x78>)
 80047d6:	2110      	movs	r1, #16
 80047d8:	200a      	movs	r0, #10
 80047da:	f7fe f86f 	bl	80028bc <xQueueGenericCreateStatic>
 80047de:	4603      	mov	r3, r0
 80047e0:	4a08      	ldr	r2, [pc, #32]	@ (8004804 <prvCheckForValidListAndQueue+0x60>)
 80047e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80047e4:	4b07      	ldr	r3, [pc, #28]	@ (8004804 <prvCheckForValidListAndQueue+0x60>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80047ec:	4b05      	ldr	r3, [pc, #20]	@ (8004804 <prvCheckForValidListAndQueue+0x60>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	490b      	ldr	r1, [pc, #44]	@ (8004820 <prvCheckForValidListAndQueue+0x7c>)
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fe fd52 	bl	800329c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047f8:	f000 f978 	bl	8004aec <vPortExitCritical>
}
 80047fc:	bf00      	nop
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20000cbc 	.word	0x20000cbc
 8004808:	20000c8c 	.word	0x20000c8c
 800480c:	20000ca0 	.word	0x20000ca0
 8004810:	20000cb4 	.word	0x20000cb4
 8004814:	20000cb8 	.word	0x20000cb8
 8004818:	20000d68 	.word	0x20000d68
 800481c:	20000cc8 	.word	0x20000cc8
 8004820:	0800518c 	.word	0x0800518c

08004824 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	3b04      	subs	r3, #4
 8004834:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800483c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	3b04      	subs	r3, #4
 8004842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f023 0201 	bic.w	r2, r3, #1
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3b04      	subs	r3, #4
 8004852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004854:	4a0c      	ldr	r2, [pc, #48]	@ (8004888 <pxPortInitialiseStack+0x64>)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3b14      	subs	r3, #20
 800485e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	3b04      	subs	r3, #4
 800486a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f06f 0202 	mvn.w	r2, #2
 8004872:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3b20      	subs	r3, #32
 8004878:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800487a:	68fb      	ldr	r3, [r7, #12]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	0800488d 	.word	0x0800488d

0800488c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004892:	2300      	movs	r3, #0
 8004894:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004896:	4b13      	ldr	r3, [pc, #76]	@ (80048e4 <prvTaskExitError+0x58>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489e:	d00b      	beq.n	80048b8 <prvTaskExitError+0x2c>
	__asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	60fb      	str	r3, [r7, #12]
}
 80048b2:	bf00      	nop
 80048b4:	bf00      	nop
 80048b6:	e7fd      	b.n	80048b4 <prvTaskExitError+0x28>
	__asm volatile
 80048b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	60bb      	str	r3, [r7, #8]
}
 80048ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80048cc:	bf00      	nop
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0fc      	beq.n	80048ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048d4:	bf00      	nop
 80048d6:	bf00      	nop
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	2000000c 	.word	0x2000000c
	...

080048f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80048f0:	4b07      	ldr	r3, [pc, #28]	@ (8004910 <pxCurrentTCBConst2>)
 80048f2:	6819      	ldr	r1, [r3, #0]
 80048f4:	6808      	ldr	r0, [r1, #0]
 80048f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fa:	f380 8809 	msr	PSP, r0
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f04f 0000 	mov.w	r0, #0
 8004906:	f380 8811 	msr	BASEPRI, r0
 800490a:	4770      	bx	lr
 800490c:	f3af 8000 	nop.w

08004910 <pxCurrentTCBConst2>:
 8004910:	2000078c 	.word	0x2000078c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004914:	bf00      	nop
 8004916:	bf00      	nop

08004918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004918:	4808      	ldr	r0, [pc, #32]	@ (800493c <prvPortStartFirstTask+0x24>)
 800491a:	6800      	ldr	r0, [r0, #0]
 800491c:	6800      	ldr	r0, [r0, #0]
 800491e:	f380 8808 	msr	MSP, r0
 8004922:	f04f 0000 	mov.w	r0, #0
 8004926:	f380 8814 	msr	CONTROL, r0
 800492a:	b662      	cpsie	i
 800492c:	b661      	cpsie	f
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	df00      	svc	0
 8004938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800493a:	bf00      	nop
 800493c:	e000ed08 	.word	0xe000ed08

08004940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004946:	4b47      	ldr	r3, [pc, #284]	@ (8004a64 <xPortStartScheduler+0x124>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a47      	ldr	r2, [pc, #284]	@ (8004a68 <xPortStartScheduler+0x128>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d10b      	bne.n	8004968 <xPortStartScheduler+0x28>
	__asm volatile
 8004950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	60fb      	str	r3, [r7, #12]
}
 8004962:	bf00      	nop
 8004964:	bf00      	nop
 8004966:	e7fd      	b.n	8004964 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004968:	4b3e      	ldr	r3, [pc, #248]	@ (8004a64 <xPortStartScheduler+0x124>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a3f      	ldr	r2, [pc, #252]	@ (8004a6c <xPortStartScheduler+0x12c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d10b      	bne.n	800498a <xPortStartScheduler+0x4a>
	__asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	613b      	str	r3, [r7, #16]
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop
 8004988:	e7fd      	b.n	8004986 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800498a:	4b39      	ldr	r3, [pc, #228]	@ (8004a70 <xPortStartScheduler+0x130>)
 800498c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	b2db      	uxtb	r3, r3
 8004994:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	22ff      	movs	r2, #255	@ 0xff
 800499a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	4b31      	ldr	r3, [pc, #196]	@ (8004a74 <xPortStartScheduler+0x134>)
 80049b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80049b2:	4b31      	ldr	r3, [pc, #196]	@ (8004a78 <xPortStartScheduler+0x138>)
 80049b4:	2207      	movs	r2, #7
 80049b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049b8:	e009      	b.n	80049ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80049ba:	4b2f      	ldr	r3, [pc, #188]	@ (8004a78 <xPortStartScheduler+0x138>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3b01      	subs	r3, #1
 80049c0:	4a2d      	ldr	r2, [pc, #180]	@ (8004a78 <xPortStartScheduler+0x138>)
 80049c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80049c4:	78fb      	ldrb	r3, [r7, #3]
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049ce:	78fb      	ldrb	r3, [r7, #3]
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d6:	2b80      	cmp	r3, #128	@ 0x80
 80049d8:	d0ef      	beq.n	80049ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049da:	4b27      	ldr	r3, [pc, #156]	@ (8004a78 <xPortStartScheduler+0x138>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f1c3 0307 	rsb	r3, r3, #7
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d00b      	beq.n	80049fe <xPortStartScheduler+0xbe>
	__asm volatile
 80049e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	60bb      	str	r3, [r7, #8]
}
 80049f8:	bf00      	nop
 80049fa:	bf00      	nop
 80049fc:	e7fd      	b.n	80049fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004a78 <xPortStartScheduler+0x138>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	021b      	lsls	r3, r3, #8
 8004a04:	4a1c      	ldr	r2, [pc, #112]	@ (8004a78 <xPortStartScheduler+0x138>)
 8004a06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a08:	4b1b      	ldr	r3, [pc, #108]	@ (8004a78 <xPortStartScheduler+0x138>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004a10:	4a19      	ldr	r2, [pc, #100]	@ (8004a78 <xPortStartScheduler+0x138>)
 8004a12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a1c:	4b17      	ldr	r3, [pc, #92]	@ (8004a7c <xPortStartScheduler+0x13c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a16      	ldr	r2, [pc, #88]	@ (8004a7c <xPortStartScheduler+0x13c>)
 8004a22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004a26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a28:	4b14      	ldr	r3, [pc, #80]	@ (8004a7c <xPortStartScheduler+0x13c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a13      	ldr	r2, [pc, #76]	@ (8004a7c <xPortStartScheduler+0x13c>)
 8004a2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004a32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a34:	f000 f8da 	bl	8004bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a38:	4b11      	ldr	r3, [pc, #68]	@ (8004a80 <xPortStartScheduler+0x140>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a3e:	f000 f8f9 	bl	8004c34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a42:	4b10      	ldr	r3, [pc, #64]	@ (8004a84 <xPortStartScheduler+0x144>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a0f      	ldr	r2, [pc, #60]	@ (8004a84 <xPortStartScheduler+0x144>)
 8004a48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004a4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a4e:	f7ff ff63 	bl	8004918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a52:	f7ff f83b 	bl	8003acc <vTaskSwitchContext>
	prvTaskExitError();
 8004a56:	f7ff ff19 	bl	800488c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	e000ed00 	.word	0xe000ed00
 8004a68:	410fc271 	.word	0x410fc271
 8004a6c:	410fc270 	.word	0x410fc270
 8004a70:	e000e400 	.word	0xe000e400
 8004a74:	20000db8 	.word	0x20000db8
 8004a78:	20000dbc 	.word	0x20000dbc
 8004a7c:	e000ed20 	.word	0xe000ed20
 8004a80:	2000000c 	.word	0x2000000c
 8004a84:	e000ef34 	.word	0xe000ef34

08004a88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	607b      	str	r3, [r7, #4]
}
 8004aa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004aa2:	4b10      	ldr	r3, [pc, #64]	@ (8004ae4 <vPortEnterCritical+0x5c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	4a0e      	ldr	r2, [pc, #56]	@ (8004ae4 <vPortEnterCritical+0x5c>)
 8004aaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004aac:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae4 <vPortEnterCritical+0x5c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d110      	bne.n	8004ad6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae8 <vPortEnterCritical+0x60>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00b      	beq.n	8004ad6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	603b      	str	r3, [r7, #0]
}
 8004ad0:	bf00      	nop
 8004ad2:	bf00      	nop
 8004ad4:	e7fd      	b.n	8004ad2 <vPortEnterCritical+0x4a>
	}
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	2000000c 	.word	0x2000000c
 8004ae8:	e000ed04 	.word	0xe000ed04

08004aec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004af2:	4b12      	ldr	r3, [pc, #72]	@ (8004b3c <vPortExitCritical+0x50>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10b      	bne.n	8004b12 <vPortExitCritical+0x26>
	__asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	607b      	str	r3, [r7, #4]
}
 8004b0c:	bf00      	nop
 8004b0e:	bf00      	nop
 8004b10:	e7fd      	b.n	8004b0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b12:	4b0a      	ldr	r3, [pc, #40]	@ (8004b3c <vPortExitCritical+0x50>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	4a08      	ldr	r2, [pc, #32]	@ (8004b3c <vPortExitCritical+0x50>)
 8004b1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b1c:	4b07      	ldr	r3, [pc, #28]	@ (8004b3c <vPortExitCritical+0x50>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d105      	bne.n	8004b30 <vPortExitCritical+0x44>
 8004b24:	2300      	movs	r3, #0
 8004b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	f383 8811 	msr	BASEPRI, r3
}
 8004b2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	2000000c 	.word	0x2000000c

08004b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b40:	f3ef 8009 	mrs	r0, PSP
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	4b15      	ldr	r3, [pc, #84]	@ (8004ba0 <pxCurrentTCBConst>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	f01e 0f10 	tst.w	lr, #16
 8004b50:	bf08      	it	eq
 8004b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b5a:	6010      	str	r0, [r2, #0]
 8004b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004b64:	f380 8811 	msr	BASEPRI, r0
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f7fe ffac 	bl	8003acc <vTaskSwitchContext>
 8004b74:	f04f 0000 	mov.w	r0, #0
 8004b78:	f380 8811 	msr	BASEPRI, r0
 8004b7c:	bc09      	pop	{r0, r3}
 8004b7e:	6819      	ldr	r1, [r3, #0]
 8004b80:	6808      	ldr	r0, [r1, #0]
 8004b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b86:	f01e 0f10 	tst.w	lr, #16
 8004b8a:	bf08      	it	eq
 8004b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b90:	f380 8809 	msr	PSP, r0
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	f3af 8000 	nop.w

08004ba0 <pxCurrentTCBConst>:
 8004ba0:	2000078c 	.word	0x2000078c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop

08004ba8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	607b      	str	r3, [r7, #4]
}
 8004bc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004bc2:	f7fe fec9 	bl	8003958 <xTaskIncrementTick>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004bcc:	4b06      	ldr	r3, [pc, #24]	@ (8004be8 <xPortSysTickHandler+0x40>)
 8004bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	f383 8811 	msr	BASEPRI, r3
}
 8004bde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004be0:	bf00      	nop
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	e000ed04 	.word	0xe000ed04

08004bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c20 <vPortSetupTimerInterrupt+0x34>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c24 <vPortSetupTimerInterrupt+0x38>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8004c28 <vPortSetupTimerInterrupt+0x3c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a0a      	ldr	r2, [pc, #40]	@ (8004c2c <vPortSetupTimerInterrupt+0x40>)
 8004c02:	fba2 2303 	umull	r2, r3, r2, r3
 8004c06:	099b      	lsrs	r3, r3, #6
 8004c08:	4a09      	ldr	r2, [pc, #36]	@ (8004c30 <vPortSetupTimerInterrupt+0x44>)
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c0e:	4b04      	ldr	r3, [pc, #16]	@ (8004c20 <vPortSetupTimerInterrupt+0x34>)
 8004c10:	2207      	movs	r2, #7
 8004c12:	601a      	str	r2, [r3, #0]
}
 8004c14:	bf00      	nop
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	e000e010 	.word	0xe000e010
 8004c24:	e000e018 	.word	0xe000e018
 8004c28:	20000000 	.word	0x20000000
 8004c2c:	10624dd3 	.word	0x10624dd3
 8004c30:	e000e014 	.word	0xe000e014

08004c34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004c44 <vPortEnableVFP+0x10>
 8004c38:	6801      	ldr	r1, [r0, #0]
 8004c3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004c3e:	6001      	str	r1, [r0, #0]
 8004c40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c42:	bf00      	nop
 8004c44:	e000ed88 	.word	0xe000ed88

08004c48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c4e:	f3ef 8305 	mrs	r3, IPSR
 8004c52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b0f      	cmp	r3, #15
 8004c58:	d915      	bls.n	8004c86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c5a:	4a18      	ldr	r2, [pc, #96]	@ (8004cbc <vPortValidateInterruptPriority+0x74>)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4413      	add	r3, r2
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c64:	4b16      	ldr	r3, [pc, #88]	@ (8004cc0 <vPortValidateInterruptPriority+0x78>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	7afa      	ldrb	r2, [r7, #11]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d20b      	bcs.n	8004c86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	607b      	str	r3, [r7, #4]
}
 8004c80:	bf00      	nop
 8004c82:	bf00      	nop
 8004c84:	e7fd      	b.n	8004c82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c86:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc4 <vPortValidateInterruptPriority+0x7c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004cc8 <vPortValidateInterruptPriority+0x80>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d90b      	bls.n	8004cae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9a:	f383 8811 	msr	BASEPRI, r3
 8004c9e:	f3bf 8f6f 	isb	sy
 8004ca2:	f3bf 8f4f 	dsb	sy
 8004ca6:	603b      	str	r3, [r7, #0]
}
 8004ca8:	bf00      	nop
 8004caa:	bf00      	nop
 8004cac:	e7fd      	b.n	8004caa <vPortValidateInterruptPriority+0x62>
	}
 8004cae:	bf00      	nop
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	e000e3f0 	.word	0xe000e3f0
 8004cc0:	20000db8 	.word	0x20000db8
 8004cc4:	e000ed0c 	.word	0xe000ed0c
 8004cc8:	20000dbc 	.word	0x20000dbc

08004ccc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	@ 0x28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004cd8:	f7fe fd82 	bl	80037e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004cdc:	4b5c      	ldr	r3, [pc, #368]	@ (8004e50 <pvPortMalloc+0x184>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ce4:	f000 f924 	bl	8004f30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ce8:	4b5a      	ldr	r3, [pc, #360]	@ (8004e54 <pvPortMalloc+0x188>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f040 8095 	bne.w	8004e20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d01e      	beq.n	8004d3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004cfc:	2208      	movs	r2, #8
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4413      	add	r3, r2
 8004d02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f003 0307 	and.w	r3, r3, #7
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d015      	beq.n	8004d3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f023 0307 	bic.w	r3, r3, #7
 8004d14:	3308      	adds	r3, #8
 8004d16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00b      	beq.n	8004d3a <pvPortMalloc+0x6e>
	__asm volatile
 8004d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	617b      	str	r3, [r7, #20]
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop
 8004d38:	e7fd      	b.n	8004d36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d06f      	beq.n	8004e20 <pvPortMalloc+0x154>
 8004d40:	4b45      	ldr	r3, [pc, #276]	@ (8004e58 <pvPortMalloc+0x18c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d86a      	bhi.n	8004e20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d4a:	4b44      	ldr	r3, [pc, #272]	@ (8004e5c <pvPortMalloc+0x190>)
 8004d4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d4e:	4b43      	ldr	r3, [pc, #268]	@ (8004e5c <pvPortMalloc+0x190>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d54:	e004      	b.n	8004d60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d903      	bls.n	8004d72 <pvPortMalloc+0xa6>
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f1      	bne.n	8004d56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d72:	4b37      	ldr	r3, [pc, #220]	@ (8004e50 <pvPortMalloc+0x184>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d051      	beq.n	8004e20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2208      	movs	r2, #8
 8004d82:	4413      	add	r3, r2
 8004d84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	1ad2      	subs	r2, r2, r3
 8004d96:	2308      	movs	r3, #8
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d920      	bls.n	8004de0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4413      	add	r3, r2
 8004da4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00b      	beq.n	8004dc8 <pvPortMalloc+0xfc>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	613b      	str	r3, [r7, #16]
}
 8004dc2:	bf00      	nop
 8004dc4:	bf00      	nop
 8004dc6:	e7fd      	b.n	8004dc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	1ad2      	subs	r2, r2, r3
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004dda:	69b8      	ldr	r0, [r7, #24]
 8004ddc:	f000 f90a 	bl	8004ff4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004de0:	4b1d      	ldr	r3, [pc, #116]	@ (8004e58 <pvPortMalloc+0x18c>)
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	4a1b      	ldr	r2, [pc, #108]	@ (8004e58 <pvPortMalloc+0x18c>)
 8004dec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dee:	4b1a      	ldr	r3, [pc, #104]	@ (8004e58 <pvPortMalloc+0x18c>)
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	4b1b      	ldr	r3, [pc, #108]	@ (8004e60 <pvPortMalloc+0x194>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d203      	bcs.n	8004e02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004dfa:	4b17      	ldr	r3, [pc, #92]	@ (8004e58 <pvPortMalloc+0x18c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a18      	ldr	r2, [pc, #96]	@ (8004e60 <pvPortMalloc+0x194>)
 8004e00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	4b13      	ldr	r3, [pc, #76]	@ (8004e54 <pvPortMalloc+0x188>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004e16:	4b13      	ldr	r3, [pc, #76]	@ (8004e64 <pvPortMalloc+0x198>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	4a11      	ldr	r2, [pc, #68]	@ (8004e64 <pvPortMalloc+0x198>)
 8004e1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e20:	f7fe fcec 	bl	80037fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00b      	beq.n	8004e46 <pvPortMalloc+0x17a>
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	60fb      	str	r3, [r7, #12]
}
 8004e40:	bf00      	nop
 8004e42:	bf00      	nop
 8004e44:	e7fd      	b.n	8004e42 <pvPortMalloc+0x176>
	return pvReturn;
 8004e46:	69fb      	ldr	r3, [r7, #28]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3728      	adds	r7, #40	@ 0x28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	200049c8 	.word	0x200049c8
 8004e54:	200049dc 	.word	0x200049dc
 8004e58:	200049cc 	.word	0x200049cc
 8004e5c:	200049c0 	.word	0x200049c0
 8004e60:	200049d0 	.word	0x200049d0
 8004e64:	200049d4 	.word	0x200049d4

08004e68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d04f      	beq.n	8004f1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e7a:	2308      	movs	r3, #8
 8004e7c:	425b      	negs	r3, r3
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4413      	add	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	4b25      	ldr	r3, [pc, #148]	@ (8004f24 <vPortFree+0xbc>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4013      	ands	r3, r2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10b      	bne.n	8004eae <vPortFree+0x46>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	60fb      	str	r3, [r7, #12]
}
 8004ea8:	bf00      	nop
 8004eaa:	bf00      	nop
 8004eac:	e7fd      	b.n	8004eaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00b      	beq.n	8004ece <vPortFree+0x66>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	60bb      	str	r3, [r7, #8]
}
 8004ec8:	bf00      	nop
 8004eca:	bf00      	nop
 8004ecc:	e7fd      	b.n	8004eca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	4b14      	ldr	r3, [pc, #80]	@ (8004f24 <vPortFree+0xbc>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d01e      	beq.n	8004f1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d11a      	bne.n	8004f1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8004f24 <vPortFree+0xbc>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	43db      	mvns	r3, r3
 8004eee:	401a      	ands	r2, r3
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ef4:	f7fe fc74 	bl	80037e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	4b0a      	ldr	r3, [pc, #40]	@ (8004f28 <vPortFree+0xc0>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4413      	add	r3, r2
 8004f02:	4a09      	ldr	r2, [pc, #36]	@ (8004f28 <vPortFree+0xc0>)
 8004f04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f06:	6938      	ldr	r0, [r7, #16]
 8004f08:	f000 f874 	bl	8004ff4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004f0c:	4b07      	ldr	r3, [pc, #28]	@ (8004f2c <vPortFree+0xc4>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3301      	adds	r3, #1
 8004f12:	4a06      	ldr	r2, [pc, #24]	@ (8004f2c <vPortFree+0xc4>)
 8004f14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004f16:	f7fe fc71 	bl	80037fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f1a:	bf00      	nop
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	200049dc 	.word	0x200049dc
 8004f28:	200049cc 	.word	0x200049cc
 8004f2c:	200049d8 	.word	0x200049d8

08004f30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f36:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004f3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f3c:	4b27      	ldr	r3, [pc, #156]	@ (8004fdc <prvHeapInit+0xac>)
 8004f3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00c      	beq.n	8004f64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3307      	adds	r3, #7
 8004f4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0307 	bic.w	r3, r3, #7
 8004f56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fdc <prvHeapInit+0xac>)
 8004f60:	4413      	add	r3, r2
 8004f62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f68:	4a1d      	ldr	r2, [pc, #116]	@ (8004fe0 <prvHeapInit+0xb0>)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8004fe0 <prvHeapInit+0xb0>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	4413      	add	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f7c:	2208      	movs	r2, #8
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	1a9b      	subs	r3, r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0307 	bic.w	r3, r3, #7
 8004f8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4a15      	ldr	r2, [pc, #84]	@ (8004fe4 <prvHeapInit+0xb4>)
 8004f90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f92:	4b14      	ldr	r3, [pc, #80]	@ (8004fe4 <prvHeapInit+0xb4>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2200      	movs	r2, #0
 8004f98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f9a:	4b12      	ldr	r3, [pc, #72]	@ (8004fe4 <prvHeapInit+0xb4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	1ad2      	subs	r2, r2, r3
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe4 <prvHeapInit+0xb4>)
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8004fe8 <prvHeapInit+0xb8>)
 8004fbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	4a09      	ldr	r2, [pc, #36]	@ (8004fec <prvHeapInit+0xbc>)
 8004fc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fc8:	4b09      	ldr	r3, [pc, #36]	@ (8004ff0 <prvHeapInit+0xc0>)
 8004fca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004fce:	601a      	str	r2, [r3, #0]
}
 8004fd0:	bf00      	nop
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	20000dc0 	.word	0x20000dc0
 8004fe0:	200049c0 	.word	0x200049c0
 8004fe4:	200049c8 	.word	0x200049c8
 8004fe8:	200049d0 	.word	0x200049d0
 8004fec:	200049cc 	.word	0x200049cc
 8004ff0:	200049dc 	.word	0x200049dc

08004ff4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ffc:	4b28      	ldr	r3, [pc, #160]	@ (80050a0 <prvInsertBlockIntoFreeList+0xac>)
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	e002      	b.n	8005008 <prvInsertBlockIntoFreeList+0x14>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	429a      	cmp	r2, r3
 8005010:	d8f7      	bhi.n	8005002 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	4413      	add	r3, r2
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	429a      	cmp	r2, r3
 8005022:	d108      	bne.n	8005036 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	441a      	add	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	441a      	add	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	429a      	cmp	r2, r3
 8005048:	d118      	bne.n	800507c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	4b15      	ldr	r3, [pc, #84]	@ (80050a4 <prvInsertBlockIntoFreeList+0xb0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d00d      	beq.n	8005072 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	441a      	add	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	e008      	b.n	8005084 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005072:	4b0c      	ldr	r3, [pc, #48]	@ (80050a4 <prvInsertBlockIntoFreeList+0xb0>)
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	e003      	b.n	8005084 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	429a      	cmp	r2, r3
 800508a:	d002      	beq.n	8005092 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005092:	bf00      	nop
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	200049c0 	.word	0x200049c0
 80050a4:	200049c8 	.word	0x200049c8

080050a8 <memset>:
 80050a8:	4402      	add	r2, r0
 80050aa:	4603      	mov	r3, r0
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d100      	bne.n	80050b2 <memset+0xa>
 80050b0:	4770      	bx	lr
 80050b2:	f803 1b01 	strb.w	r1, [r3], #1
 80050b6:	e7f9      	b.n	80050ac <memset+0x4>

080050b8 <__libc_init_array>:
 80050b8:	b570      	push	{r4, r5, r6, lr}
 80050ba:	4d0d      	ldr	r5, [pc, #52]	@ (80050f0 <__libc_init_array+0x38>)
 80050bc:	4c0d      	ldr	r4, [pc, #52]	@ (80050f4 <__libc_init_array+0x3c>)
 80050be:	1b64      	subs	r4, r4, r5
 80050c0:	10a4      	asrs	r4, r4, #2
 80050c2:	2600      	movs	r6, #0
 80050c4:	42a6      	cmp	r6, r4
 80050c6:	d109      	bne.n	80050dc <__libc_init_array+0x24>
 80050c8:	4d0b      	ldr	r5, [pc, #44]	@ (80050f8 <__libc_init_array+0x40>)
 80050ca:	4c0c      	ldr	r4, [pc, #48]	@ (80050fc <__libc_init_array+0x44>)
 80050cc:	f000 f826 	bl	800511c <_init>
 80050d0:	1b64      	subs	r4, r4, r5
 80050d2:	10a4      	asrs	r4, r4, #2
 80050d4:	2600      	movs	r6, #0
 80050d6:	42a6      	cmp	r6, r4
 80050d8:	d105      	bne.n	80050e6 <__libc_init_array+0x2e>
 80050da:	bd70      	pop	{r4, r5, r6, pc}
 80050dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e0:	4798      	blx	r3
 80050e2:	3601      	adds	r6, #1
 80050e4:	e7ee      	b.n	80050c4 <__libc_init_array+0xc>
 80050e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ea:	4798      	blx	r3
 80050ec:	3601      	adds	r6, #1
 80050ee:	e7f2      	b.n	80050d6 <__libc_init_array+0x1e>
 80050f0:	08005280 	.word	0x08005280
 80050f4:	08005280 	.word	0x08005280
 80050f8:	08005280 	.word	0x08005280
 80050fc:	08005284 	.word	0x08005284

08005100 <memcpy>:
 8005100:	440a      	add	r2, r1
 8005102:	4291      	cmp	r1, r2
 8005104:	f100 33ff 	add.w	r3, r0, #4294967295
 8005108:	d100      	bne.n	800510c <memcpy+0xc>
 800510a:	4770      	bx	lr
 800510c:	b510      	push	{r4, lr}
 800510e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005112:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005116:	4291      	cmp	r1, r2
 8005118:	d1f9      	bne.n	800510e <memcpy+0xe>
 800511a:	bd10      	pop	{r4, pc}

0800511c <_init>:
 800511c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511e:	bf00      	nop
 8005120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005122:	bc08      	pop	{r3}
 8005124:	469e      	mov	lr, r3
 8005126:	4770      	bx	lr

08005128 <_fini>:
 8005128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512a:	bf00      	nop
 800512c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512e:	bc08      	pop	{r3}
 8005130:	469e      	mov	lr, r3
 8005132:	4770      	bx	lr
