
App2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001590  08008198  08008198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08009728  08009728  00002728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009738  08009738  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009738  08009738  00002738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009740  08009740  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009740  08009740  00002740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009744  08009744  00002744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08009748  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08009754  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08009754  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000035ba  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000eab  00000000  00000000  000065f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000408  00000000  00000000  000074a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002e4  00000000  00000000  000078b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000143ad  00000000  00000000  00007b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004df9  00000000  00000000  0001bf41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f559  00000000  00000000  00020d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a0293  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e90  00000000  00000000  000a02d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000a1168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008198 <__do_global_dtors_aux>:
 8008198:	b510      	push	{r4, lr}
 800819a:	4c05      	ldr	r4, [pc, #20]	@ (80081b0 <__do_global_dtors_aux+0x18>)
 800819c:	7823      	ldrb	r3, [r4, #0]
 800819e:	b933      	cbnz	r3, 80081ae <__do_global_dtors_aux+0x16>
 80081a0:	4b04      	ldr	r3, [pc, #16]	@ (80081b4 <__do_global_dtors_aux+0x1c>)
 80081a2:	b113      	cbz	r3, 80081aa <__do_global_dtors_aux+0x12>
 80081a4:	4804      	ldr	r0, [pc, #16]	@ (80081b8 <__do_global_dtors_aux+0x20>)
 80081a6:	f3af 8000 	nop.w
 80081aa:	2301      	movs	r3, #1
 80081ac:	7023      	strb	r3, [r4, #0]
 80081ae:	bd10      	pop	{r4, pc}
 80081b0:	2000000c 	.word	0x2000000c
 80081b4:	00000000 	.word	0x00000000
 80081b8:	08009710 	.word	0x08009710

080081bc <frame_dummy>:
 80081bc:	b508      	push	{r3, lr}
 80081be:	4b03      	ldr	r3, [pc, #12]	@ (80081cc <frame_dummy+0x10>)
 80081c0:	b11b      	cbz	r3, 80081ca <frame_dummy+0xe>
 80081c2:	4903      	ldr	r1, [pc, #12]	@ (80081d0 <frame_dummy+0x14>)
 80081c4:	4803      	ldr	r0, [pc, #12]	@ (80081d4 <frame_dummy+0x18>)
 80081c6:	f3af 8000 	nop.w
 80081ca:	bd08      	pop	{r3, pc}
 80081cc:	00000000 	.word	0x00000000
 80081d0:	20000010 	.word	0x20000010
 80081d4:	08009710 	.word	0x08009710

080081d8 <__aeabi_uldivmod>:
 80081d8:	b953      	cbnz	r3, 80081f0 <__aeabi_uldivmod+0x18>
 80081da:	b94a      	cbnz	r2, 80081f0 <__aeabi_uldivmod+0x18>
 80081dc:	2900      	cmp	r1, #0
 80081de:	bf08      	it	eq
 80081e0:	2800      	cmpeq	r0, #0
 80081e2:	bf1c      	itt	ne
 80081e4:	f04f 31ff 	movne.w	r1, #4294967295
 80081e8:	f04f 30ff 	movne.w	r0, #4294967295
 80081ec:	f000 b988 	b.w	8008500 <__aeabi_idiv0>
 80081f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80081f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80081f8:	f000 f806 	bl	8008208 <__udivmoddi4>
 80081fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008204:	b004      	add	sp, #16
 8008206:	4770      	bx	lr

08008208 <__udivmoddi4>:
 8008208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800820c:	9d08      	ldr	r5, [sp, #32]
 800820e:	468e      	mov	lr, r1
 8008210:	4604      	mov	r4, r0
 8008212:	4688      	mov	r8, r1
 8008214:	2b00      	cmp	r3, #0
 8008216:	d14a      	bne.n	80082ae <__udivmoddi4+0xa6>
 8008218:	428a      	cmp	r2, r1
 800821a:	4617      	mov	r7, r2
 800821c:	d962      	bls.n	80082e4 <__udivmoddi4+0xdc>
 800821e:	fab2 f682 	clz	r6, r2
 8008222:	b14e      	cbz	r6, 8008238 <__udivmoddi4+0x30>
 8008224:	f1c6 0320 	rsb	r3, r6, #32
 8008228:	fa01 f806 	lsl.w	r8, r1, r6
 800822c:	fa20 f303 	lsr.w	r3, r0, r3
 8008230:	40b7      	lsls	r7, r6
 8008232:	ea43 0808 	orr.w	r8, r3, r8
 8008236:	40b4      	lsls	r4, r6
 8008238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800823c:	fa1f fc87 	uxth.w	ip, r7
 8008240:	fbb8 f1fe 	udiv	r1, r8, lr
 8008244:	0c23      	lsrs	r3, r4, #16
 8008246:	fb0e 8811 	mls	r8, lr, r1, r8
 800824a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800824e:	fb01 f20c 	mul.w	r2, r1, ip
 8008252:	429a      	cmp	r2, r3
 8008254:	d909      	bls.n	800826a <__udivmoddi4+0x62>
 8008256:	18fb      	adds	r3, r7, r3
 8008258:	f101 30ff 	add.w	r0, r1, #4294967295
 800825c:	f080 80ea 	bcs.w	8008434 <__udivmoddi4+0x22c>
 8008260:	429a      	cmp	r2, r3
 8008262:	f240 80e7 	bls.w	8008434 <__udivmoddi4+0x22c>
 8008266:	3902      	subs	r1, #2
 8008268:	443b      	add	r3, r7
 800826a:	1a9a      	subs	r2, r3, r2
 800826c:	b2a3      	uxth	r3, r4
 800826e:	fbb2 f0fe 	udiv	r0, r2, lr
 8008272:	fb0e 2210 	mls	r2, lr, r0, r2
 8008276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800827a:	fb00 fc0c 	mul.w	ip, r0, ip
 800827e:	459c      	cmp	ip, r3
 8008280:	d909      	bls.n	8008296 <__udivmoddi4+0x8e>
 8008282:	18fb      	adds	r3, r7, r3
 8008284:	f100 32ff 	add.w	r2, r0, #4294967295
 8008288:	f080 80d6 	bcs.w	8008438 <__udivmoddi4+0x230>
 800828c:	459c      	cmp	ip, r3
 800828e:	f240 80d3 	bls.w	8008438 <__udivmoddi4+0x230>
 8008292:	443b      	add	r3, r7
 8008294:	3802      	subs	r0, #2
 8008296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800829a:	eba3 030c 	sub.w	r3, r3, ip
 800829e:	2100      	movs	r1, #0
 80082a0:	b11d      	cbz	r5, 80082aa <__udivmoddi4+0xa2>
 80082a2:	40f3      	lsrs	r3, r6
 80082a4:	2200      	movs	r2, #0
 80082a6:	e9c5 3200 	strd	r3, r2, [r5]
 80082aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ae:	428b      	cmp	r3, r1
 80082b0:	d905      	bls.n	80082be <__udivmoddi4+0xb6>
 80082b2:	b10d      	cbz	r5, 80082b8 <__udivmoddi4+0xb0>
 80082b4:	e9c5 0100 	strd	r0, r1, [r5]
 80082b8:	2100      	movs	r1, #0
 80082ba:	4608      	mov	r0, r1
 80082bc:	e7f5      	b.n	80082aa <__udivmoddi4+0xa2>
 80082be:	fab3 f183 	clz	r1, r3
 80082c2:	2900      	cmp	r1, #0
 80082c4:	d146      	bne.n	8008354 <__udivmoddi4+0x14c>
 80082c6:	4573      	cmp	r3, lr
 80082c8:	d302      	bcc.n	80082d0 <__udivmoddi4+0xc8>
 80082ca:	4282      	cmp	r2, r0
 80082cc:	f200 8105 	bhi.w	80084da <__udivmoddi4+0x2d2>
 80082d0:	1a84      	subs	r4, r0, r2
 80082d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80082d6:	2001      	movs	r0, #1
 80082d8:	4690      	mov	r8, r2
 80082da:	2d00      	cmp	r5, #0
 80082dc:	d0e5      	beq.n	80082aa <__udivmoddi4+0xa2>
 80082de:	e9c5 4800 	strd	r4, r8, [r5]
 80082e2:	e7e2      	b.n	80082aa <__udivmoddi4+0xa2>
 80082e4:	2a00      	cmp	r2, #0
 80082e6:	f000 8090 	beq.w	800840a <__udivmoddi4+0x202>
 80082ea:	fab2 f682 	clz	r6, r2
 80082ee:	2e00      	cmp	r6, #0
 80082f0:	f040 80a4 	bne.w	800843c <__udivmoddi4+0x234>
 80082f4:	1a8a      	subs	r2, r1, r2
 80082f6:	0c03      	lsrs	r3, r0, #16
 80082f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80082fc:	b280      	uxth	r0, r0
 80082fe:	b2bc      	uxth	r4, r7
 8008300:	2101      	movs	r1, #1
 8008302:	fbb2 fcfe 	udiv	ip, r2, lr
 8008306:	fb0e 221c 	mls	r2, lr, ip, r2
 800830a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800830e:	fb04 f20c 	mul.w	r2, r4, ip
 8008312:	429a      	cmp	r2, r3
 8008314:	d907      	bls.n	8008326 <__udivmoddi4+0x11e>
 8008316:	18fb      	adds	r3, r7, r3
 8008318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800831c:	d202      	bcs.n	8008324 <__udivmoddi4+0x11c>
 800831e:	429a      	cmp	r2, r3
 8008320:	f200 80e0 	bhi.w	80084e4 <__udivmoddi4+0x2dc>
 8008324:	46c4      	mov	ip, r8
 8008326:	1a9b      	subs	r3, r3, r2
 8008328:	fbb3 f2fe 	udiv	r2, r3, lr
 800832c:	fb0e 3312 	mls	r3, lr, r2, r3
 8008330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8008334:	fb02 f404 	mul.w	r4, r2, r4
 8008338:	429c      	cmp	r4, r3
 800833a:	d907      	bls.n	800834c <__udivmoddi4+0x144>
 800833c:	18fb      	adds	r3, r7, r3
 800833e:	f102 30ff 	add.w	r0, r2, #4294967295
 8008342:	d202      	bcs.n	800834a <__udivmoddi4+0x142>
 8008344:	429c      	cmp	r4, r3
 8008346:	f200 80ca 	bhi.w	80084de <__udivmoddi4+0x2d6>
 800834a:	4602      	mov	r2, r0
 800834c:	1b1b      	subs	r3, r3, r4
 800834e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8008352:	e7a5      	b.n	80082a0 <__udivmoddi4+0x98>
 8008354:	f1c1 0620 	rsb	r6, r1, #32
 8008358:	408b      	lsls	r3, r1
 800835a:	fa22 f706 	lsr.w	r7, r2, r6
 800835e:	431f      	orrs	r7, r3
 8008360:	fa0e f401 	lsl.w	r4, lr, r1
 8008364:	fa20 f306 	lsr.w	r3, r0, r6
 8008368:	fa2e fe06 	lsr.w	lr, lr, r6
 800836c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8008370:	4323      	orrs	r3, r4
 8008372:	fa00 f801 	lsl.w	r8, r0, r1
 8008376:	fa1f fc87 	uxth.w	ip, r7
 800837a:	fbbe f0f9 	udiv	r0, lr, r9
 800837e:	0c1c      	lsrs	r4, r3, #16
 8008380:	fb09 ee10 	mls	lr, r9, r0, lr
 8008384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8008388:	fb00 fe0c 	mul.w	lr, r0, ip
 800838c:	45a6      	cmp	lr, r4
 800838e:	fa02 f201 	lsl.w	r2, r2, r1
 8008392:	d909      	bls.n	80083a8 <__udivmoddi4+0x1a0>
 8008394:	193c      	adds	r4, r7, r4
 8008396:	f100 3aff 	add.w	sl, r0, #4294967295
 800839a:	f080 809c 	bcs.w	80084d6 <__udivmoddi4+0x2ce>
 800839e:	45a6      	cmp	lr, r4
 80083a0:	f240 8099 	bls.w	80084d6 <__udivmoddi4+0x2ce>
 80083a4:	3802      	subs	r0, #2
 80083a6:	443c      	add	r4, r7
 80083a8:	eba4 040e 	sub.w	r4, r4, lr
 80083ac:	fa1f fe83 	uxth.w	lr, r3
 80083b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80083b4:	fb09 4413 	mls	r4, r9, r3, r4
 80083b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80083bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80083c0:	45a4      	cmp	ip, r4
 80083c2:	d908      	bls.n	80083d6 <__udivmoddi4+0x1ce>
 80083c4:	193c      	adds	r4, r7, r4
 80083c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80083ca:	f080 8082 	bcs.w	80084d2 <__udivmoddi4+0x2ca>
 80083ce:	45a4      	cmp	ip, r4
 80083d0:	d97f      	bls.n	80084d2 <__udivmoddi4+0x2ca>
 80083d2:	3b02      	subs	r3, #2
 80083d4:	443c      	add	r4, r7
 80083d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80083da:	eba4 040c 	sub.w	r4, r4, ip
 80083de:	fba0 ec02 	umull	lr, ip, r0, r2
 80083e2:	4564      	cmp	r4, ip
 80083e4:	4673      	mov	r3, lr
 80083e6:	46e1      	mov	r9, ip
 80083e8:	d362      	bcc.n	80084b0 <__udivmoddi4+0x2a8>
 80083ea:	d05f      	beq.n	80084ac <__udivmoddi4+0x2a4>
 80083ec:	b15d      	cbz	r5, 8008406 <__udivmoddi4+0x1fe>
 80083ee:	ebb8 0203 	subs.w	r2, r8, r3
 80083f2:	eb64 0409 	sbc.w	r4, r4, r9
 80083f6:	fa04 f606 	lsl.w	r6, r4, r6
 80083fa:	fa22 f301 	lsr.w	r3, r2, r1
 80083fe:	431e      	orrs	r6, r3
 8008400:	40cc      	lsrs	r4, r1
 8008402:	e9c5 6400 	strd	r6, r4, [r5]
 8008406:	2100      	movs	r1, #0
 8008408:	e74f      	b.n	80082aa <__udivmoddi4+0xa2>
 800840a:	fbb1 fcf2 	udiv	ip, r1, r2
 800840e:	0c01      	lsrs	r1, r0, #16
 8008410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8008414:	b280      	uxth	r0, r0
 8008416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800841a:	463b      	mov	r3, r7
 800841c:	4638      	mov	r0, r7
 800841e:	463c      	mov	r4, r7
 8008420:	46b8      	mov	r8, r7
 8008422:	46be      	mov	lr, r7
 8008424:	2620      	movs	r6, #32
 8008426:	fbb1 f1f7 	udiv	r1, r1, r7
 800842a:	eba2 0208 	sub.w	r2, r2, r8
 800842e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8008432:	e766      	b.n	8008302 <__udivmoddi4+0xfa>
 8008434:	4601      	mov	r1, r0
 8008436:	e718      	b.n	800826a <__udivmoddi4+0x62>
 8008438:	4610      	mov	r0, r2
 800843a:	e72c      	b.n	8008296 <__udivmoddi4+0x8e>
 800843c:	f1c6 0220 	rsb	r2, r6, #32
 8008440:	fa2e f302 	lsr.w	r3, lr, r2
 8008444:	40b7      	lsls	r7, r6
 8008446:	40b1      	lsls	r1, r6
 8008448:	fa20 f202 	lsr.w	r2, r0, r2
 800844c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008450:	430a      	orrs	r2, r1
 8008452:	fbb3 f8fe 	udiv	r8, r3, lr
 8008456:	b2bc      	uxth	r4, r7
 8008458:	fb0e 3318 	mls	r3, lr, r8, r3
 800845c:	0c11      	lsrs	r1, r2, #16
 800845e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008462:	fb08 f904 	mul.w	r9, r8, r4
 8008466:	40b0      	lsls	r0, r6
 8008468:	4589      	cmp	r9, r1
 800846a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800846e:	b280      	uxth	r0, r0
 8008470:	d93e      	bls.n	80084f0 <__udivmoddi4+0x2e8>
 8008472:	1879      	adds	r1, r7, r1
 8008474:	f108 3cff 	add.w	ip, r8, #4294967295
 8008478:	d201      	bcs.n	800847e <__udivmoddi4+0x276>
 800847a:	4589      	cmp	r9, r1
 800847c:	d81f      	bhi.n	80084be <__udivmoddi4+0x2b6>
 800847e:	eba1 0109 	sub.w	r1, r1, r9
 8008482:	fbb1 f9fe 	udiv	r9, r1, lr
 8008486:	fb09 f804 	mul.w	r8, r9, r4
 800848a:	fb0e 1119 	mls	r1, lr, r9, r1
 800848e:	b292      	uxth	r2, r2
 8008490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008494:	4542      	cmp	r2, r8
 8008496:	d229      	bcs.n	80084ec <__udivmoddi4+0x2e4>
 8008498:	18ba      	adds	r2, r7, r2
 800849a:	f109 31ff 	add.w	r1, r9, #4294967295
 800849e:	d2c4      	bcs.n	800842a <__udivmoddi4+0x222>
 80084a0:	4542      	cmp	r2, r8
 80084a2:	d2c2      	bcs.n	800842a <__udivmoddi4+0x222>
 80084a4:	f1a9 0102 	sub.w	r1, r9, #2
 80084a8:	443a      	add	r2, r7
 80084aa:	e7be      	b.n	800842a <__udivmoddi4+0x222>
 80084ac:	45f0      	cmp	r8, lr
 80084ae:	d29d      	bcs.n	80083ec <__udivmoddi4+0x1e4>
 80084b0:	ebbe 0302 	subs.w	r3, lr, r2
 80084b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80084b8:	3801      	subs	r0, #1
 80084ba:	46e1      	mov	r9, ip
 80084bc:	e796      	b.n	80083ec <__udivmoddi4+0x1e4>
 80084be:	eba7 0909 	sub.w	r9, r7, r9
 80084c2:	4449      	add	r1, r9
 80084c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80084c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80084cc:	fb09 f804 	mul.w	r8, r9, r4
 80084d0:	e7db      	b.n	800848a <__udivmoddi4+0x282>
 80084d2:	4673      	mov	r3, lr
 80084d4:	e77f      	b.n	80083d6 <__udivmoddi4+0x1ce>
 80084d6:	4650      	mov	r0, sl
 80084d8:	e766      	b.n	80083a8 <__udivmoddi4+0x1a0>
 80084da:	4608      	mov	r0, r1
 80084dc:	e6fd      	b.n	80082da <__udivmoddi4+0xd2>
 80084de:	443b      	add	r3, r7
 80084e0:	3a02      	subs	r2, #2
 80084e2:	e733      	b.n	800834c <__udivmoddi4+0x144>
 80084e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80084e8:	443b      	add	r3, r7
 80084ea:	e71c      	b.n	8008326 <__udivmoddi4+0x11e>
 80084ec:	4649      	mov	r1, r9
 80084ee:	e79c      	b.n	800842a <__udivmoddi4+0x222>
 80084f0:	eba1 0109 	sub.w	r1, r1, r9
 80084f4:	46c4      	mov	ip, r8
 80084f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80084fa:	fb09 f804 	mul.w	r8, r9, r4
 80084fe:	e7c4      	b.n	800848a <__udivmoddi4+0x282>

08008500 <__aeabi_idiv0>:
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop

08008504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800850a:	f000 f97f 	bl	800880c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800850e:	f000 f833 	bl	8008578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008512:	f000 f88f 	bl	8008634 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8008516:	2201      	movs	r2, #1
 8008518:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800851c:	4813      	ldr	r0, [pc, #76]	@ (800856c <main+0x68>)
 800851e:	f000 fc8d 	bl	8008e3c <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1)
 8008522:	2101      	movs	r1, #1
 8008524:	4812      	ldr	r0, [pc, #72]	@ (8008570 <main+0x6c>)
 8008526:	f000 fc71 	bl	8008e0c <HAL_GPIO_ReadPin>
 800852a:	4603      	mov	r3, r0
 800852c:	2b01      	cmp	r3, #1
 800852e:	d1f8      	bne.n	8008522 <main+0x1e>
	  {
		  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1);
 8008530:	bf00      	nop
 8008532:	2101      	movs	r1, #1
 8008534:	480e      	ldr	r0, [pc, #56]	@ (8008570 <main+0x6c>)
 8008536:	f000 fc69 	bl	8008e0c <HAL_GPIO_ReadPin>
 800853a:	4603      	mov	r3, r0
 800853c:	2b01      	cmp	r3, #1
 800853e:	d0f8      	beq.n	8008532 <main+0x2e>
		  HAL_Delay(100);
 8008540:	2064      	movs	r0, #100	@ 0x64
 8008542:	f000 f9d5 	bl	80088f0 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8008546:	2200      	movs	r2, #0
 8008548:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800854c:	4807      	ldr	r0, [pc, #28]	@ (800856c <main+0x68>)
 800854e:	f000 fc75 	bl	8008e3c <HAL_GPIO_WritePin>
		  ptr = (uint32_t*) 0x08000004;
 8008552:	4b08      	ldr	r3, [pc, #32]	@ (8008574 <main+0x70>)
 8008554:	607b      	str	r3, [r7, #4]
		  break;
 8008556:	bf00      	nop
	  }
    /* USER CODE BEGIN 3 */
  }
  void (*fptr)() = (void (*)()) *ptr;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	603b      	str	r3, [r7, #0]
  fptr();
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	4798      	blx	r3
 8008562:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008564:	4618      	mov	r0, r3
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	40020c00 	.word	0x40020c00
 8008570:	40020000 	.word	0x40020000
 8008574:	08000004 	.word	0x08000004

08008578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b094      	sub	sp, #80	@ 0x50
 800857c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800857e:	f107 0320 	add.w	r3, r7, #32
 8008582:	2230      	movs	r2, #48	@ 0x30
 8008584:	2100      	movs	r1, #0
 8008586:	4618      	mov	r0, r3
 8008588:	f001 f896 	bl	80096b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800858c:	f107 030c 	add.w	r3, r7, #12
 8008590:	2200      	movs	r2, #0
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	605a      	str	r2, [r3, #4]
 8008596:	609a      	str	r2, [r3, #8]
 8008598:	60da      	str	r2, [r3, #12]
 800859a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800859c:	2300      	movs	r3, #0
 800859e:	60bb      	str	r3, [r7, #8]
 80085a0:	4b22      	ldr	r3, [pc, #136]	@ (800862c <SystemClock_Config+0xb4>)
 80085a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085a4:	4a21      	ldr	r2, [pc, #132]	@ (800862c <SystemClock_Config+0xb4>)
 80085a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80085ac:	4b1f      	ldr	r3, [pc, #124]	@ (800862c <SystemClock_Config+0xb4>)
 80085ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085b4:	60bb      	str	r3, [r7, #8]
 80085b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80085b8:	2300      	movs	r3, #0
 80085ba:	607b      	str	r3, [r7, #4]
 80085bc:	4b1c      	ldr	r3, [pc, #112]	@ (8008630 <SystemClock_Config+0xb8>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a1b      	ldr	r2, [pc, #108]	@ (8008630 <SystemClock_Config+0xb8>)
 80085c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80085c6:	6013      	str	r3, [r2, #0]
 80085c8:	4b19      	ldr	r3, [pc, #100]	@ (8008630 <SystemClock_Config+0xb8>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80085d0:	607b      	str	r3, [r7, #4]
 80085d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80085d4:	2302      	movs	r3, #2
 80085d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80085d8:	2301      	movs	r3, #1
 80085da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80085dc:	2310      	movs	r3, #16
 80085de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80085e0:	2300      	movs	r3, #0
 80085e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80085e4:	f107 0320 	add.w	r3, r7, #32
 80085e8:	4618      	mov	r0, r3
 80085ea:	f000 fc41 	bl	8008e70 <HAL_RCC_OscConfig>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80085f4:	f000 f870 	bl	80086d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80085f8:	230f      	movs	r3, #15
 80085fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80085fc:	2300      	movs	r3, #0
 80085fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008600:	2300      	movs	r3, #0
 8008602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008604:	2300      	movs	r3, #0
 8008606:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008608:	2300      	movs	r3, #0
 800860a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800860c:	f107 030c 	add.w	r3, r7, #12
 8008610:	2100      	movs	r1, #0
 8008612:	4618      	mov	r0, r3
 8008614:	f000 fea4 	bl	8009360 <HAL_RCC_ClockConfig>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800861e:	f000 f85b 	bl	80086d8 <Error_Handler>
  }
}
 8008622:	bf00      	nop
 8008624:	3750      	adds	r7, #80	@ 0x50
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	40023800 	.word	0x40023800
 8008630:	40007000 	.word	0x40007000

08008634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b088      	sub	sp, #32
 8008638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800863a:	f107 030c 	add.w	r3, r7, #12
 800863e:	2200      	movs	r2, #0
 8008640:	601a      	str	r2, [r3, #0]
 8008642:	605a      	str	r2, [r3, #4]
 8008644:	609a      	str	r2, [r3, #8]
 8008646:	60da      	str	r2, [r3, #12]
 8008648:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800864a:	2300      	movs	r3, #0
 800864c:	60bb      	str	r3, [r7, #8]
 800864e:	4b1f      	ldr	r3, [pc, #124]	@ (80086cc <MX_GPIO_Init+0x98>)
 8008650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008652:	4a1e      	ldr	r2, [pc, #120]	@ (80086cc <MX_GPIO_Init+0x98>)
 8008654:	f043 0301 	orr.w	r3, r3, #1
 8008658:	6313      	str	r3, [r2, #48]	@ 0x30
 800865a:	4b1c      	ldr	r3, [pc, #112]	@ (80086cc <MX_GPIO_Init+0x98>)
 800865c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800865e:	f003 0301 	and.w	r3, r3, #1
 8008662:	60bb      	str	r3, [r7, #8]
 8008664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008666:	2300      	movs	r3, #0
 8008668:	607b      	str	r3, [r7, #4]
 800866a:	4b18      	ldr	r3, [pc, #96]	@ (80086cc <MX_GPIO_Init+0x98>)
 800866c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800866e:	4a17      	ldr	r2, [pc, #92]	@ (80086cc <MX_GPIO_Init+0x98>)
 8008670:	f043 0308 	orr.w	r3, r3, #8
 8008674:	6313      	str	r3, [r2, #48]	@ 0x30
 8008676:	4b15      	ldr	r3, [pc, #84]	@ (80086cc <MX_GPIO_Init+0x98>)
 8008678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800867a:	f003 0308 	and.w	r3, r3, #8
 800867e:	607b      	str	r3, [r7, #4]
 8008680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8008682:	2200      	movs	r2, #0
 8008684:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008688:	4811      	ldr	r0, [pc, #68]	@ (80086d0 <MX_GPIO_Init+0x9c>)
 800868a:	f000 fbd7 	bl	8008e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800868e:	2301      	movs	r3, #1
 8008690:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008692:	2300      	movs	r3, #0
 8008694:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008696:	2300      	movs	r3, #0
 8008698:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800869a:	f107 030c 	add.w	r3, r7, #12
 800869e:	4619      	mov	r1, r3
 80086a0:	480c      	ldr	r0, [pc, #48]	@ (80086d4 <MX_GPIO_Init+0xa0>)
 80086a2:	f000 fa2f 	bl	8008b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80086a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80086aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086ac:	2301      	movs	r3, #1
 80086ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086b0:	2300      	movs	r3, #0
 80086b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086b4:	2300      	movs	r3, #0
 80086b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80086b8:	f107 030c 	add.w	r3, r7, #12
 80086bc:	4619      	mov	r1, r3
 80086be:	4804      	ldr	r0, [pc, #16]	@ (80086d0 <MX_GPIO_Init+0x9c>)
 80086c0:	f000 fa20 	bl	8008b04 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80086c4:	bf00      	nop
 80086c6:	3720      	adds	r7, #32
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	40023800 	.word	0x40023800
 80086d0:	40020c00 	.word	0x40020c00
 80086d4:	40020000 	.word	0x40020000

080086d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80086d8:	b480      	push	{r7}
 80086da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80086dc:	b672      	cpsid	i
}
 80086de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80086e0:	bf00      	nop
 80086e2:	e7fd      	b.n	80086e0 <Error_Handler+0x8>

080086e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086ea:	2300      	movs	r3, #0
 80086ec:	607b      	str	r3, [r7, #4]
 80086ee:	4b10      	ldr	r3, [pc, #64]	@ (8008730 <HAL_MspInit+0x4c>)
 80086f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086f2:	4a0f      	ldr	r2, [pc, #60]	@ (8008730 <HAL_MspInit+0x4c>)
 80086f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80086f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80086fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008730 <HAL_MspInit+0x4c>)
 80086fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008702:	607b      	str	r3, [r7, #4]
 8008704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008706:	2300      	movs	r3, #0
 8008708:	603b      	str	r3, [r7, #0]
 800870a:	4b09      	ldr	r3, [pc, #36]	@ (8008730 <HAL_MspInit+0x4c>)
 800870c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800870e:	4a08      	ldr	r2, [pc, #32]	@ (8008730 <HAL_MspInit+0x4c>)
 8008710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008714:	6413      	str	r3, [r2, #64]	@ 0x40
 8008716:	4b06      	ldr	r3, [pc, #24]	@ (8008730 <HAL_MspInit+0x4c>)
 8008718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800871a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800871e:	603b      	str	r3, [r7, #0]
 8008720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008722:	bf00      	nop
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	40023800 	.word	0x40023800

08008734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008734:	b480      	push	{r7}
 8008736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008738:	bf00      	nop
 800873a:	e7fd      	b.n	8008738 <NMI_Handler+0x4>

0800873c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800873c:	b480      	push	{r7}
 800873e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008740:	bf00      	nop
 8008742:	e7fd      	b.n	8008740 <HardFault_Handler+0x4>

08008744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008744:	b480      	push	{r7}
 8008746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008748:	bf00      	nop
 800874a:	e7fd      	b.n	8008748 <MemManage_Handler+0x4>

0800874c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800874c:	b480      	push	{r7}
 800874e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008750:	bf00      	nop
 8008752:	e7fd      	b.n	8008750 <BusFault_Handler+0x4>

08008754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008754:	b480      	push	{r7}
 8008756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008758:	bf00      	nop
 800875a:	e7fd      	b.n	8008758 <UsageFault_Handler+0x4>

0800875c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800875c:	b480      	push	{r7}
 800875e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008760:	bf00      	nop
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800876a:	b480      	push	{r7}
 800876c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800876e:	bf00      	nop
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008778:	b480      	push	{r7}
 800877a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800877c:	bf00      	nop
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800878a:	f000 f891 	bl	80088b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800878e:	bf00      	nop
 8008790:	bd80      	pop	{r7, pc}
	...

08008794 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008794:	b480      	push	{r7}
 8008796:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008798:	4b06      	ldr	r3, [pc, #24]	@ (80087b4 <SystemInit+0x20>)
 800879a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800879e:	4a05      	ldr	r2, [pc, #20]	@ (80087b4 <SystemInit+0x20>)
 80087a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80087a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80087a8:	bf00      	nop
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	e000ed00 	.word	0xe000ed00

080087b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80087b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80087f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80087bc:	f7ff ffea 	bl	8008794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80087c0:	480c      	ldr	r0, [pc, #48]	@ (80087f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80087c2:	490d      	ldr	r1, [pc, #52]	@ (80087f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80087c4:	4a0d      	ldr	r2, [pc, #52]	@ (80087fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80087c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80087c8:	e002      	b.n	80087d0 <LoopCopyDataInit>

080087ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80087ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80087cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80087ce:	3304      	adds	r3, #4

080087d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80087d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80087d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80087d4:	d3f9      	bcc.n	80087ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80087d6:	4a0a      	ldr	r2, [pc, #40]	@ (8008800 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80087d8:	4c0a      	ldr	r4, [pc, #40]	@ (8008804 <LoopFillZerobss+0x22>)
  movs r3, #0
 80087da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80087dc:	e001      	b.n	80087e2 <LoopFillZerobss>

080087de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80087de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80087e0:	3204      	adds	r2, #4

080087e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80087e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80087e4:	d3fb      	bcc.n	80087de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80087e6:	f000 ff6f 	bl	80096c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80087ea:	f7ff fe8b 	bl	8008504 <main>
  bx  lr    
 80087ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80087f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80087f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80087f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80087fc:	08009748 	.word	0x08009748
  ldr r2, =_sbss
 8008800:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8008804:	2000002c 	.word	0x2000002c

08008808 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008808:	e7fe      	b.n	8008808 <ADC_IRQHandler>
	...

0800880c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008810:	4b0e      	ldr	r3, [pc, #56]	@ (800884c <HAL_Init+0x40>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a0d      	ldr	r2, [pc, #52]	@ (800884c <HAL_Init+0x40>)
 8008816:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800881a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800881c:	4b0b      	ldr	r3, [pc, #44]	@ (800884c <HAL_Init+0x40>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a0a      	ldr	r2, [pc, #40]	@ (800884c <HAL_Init+0x40>)
 8008822:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008826:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008828:	4b08      	ldr	r3, [pc, #32]	@ (800884c <HAL_Init+0x40>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a07      	ldr	r2, [pc, #28]	@ (800884c <HAL_Init+0x40>)
 800882e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008832:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008834:	2003      	movs	r0, #3
 8008836:	f000 f931 	bl	8008a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800883a:	200f      	movs	r0, #15
 800883c:	f000 f808 	bl	8008850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008840:	f7ff ff50 	bl	80086e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	40023c00 	.word	0x40023c00

08008850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008858:	4b12      	ldr	r3, [pc, #72]	@ (80088a4 <HAL_InitTick+0x54>)
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	4b12      	ldr	r3, [pc, #72]	@ (80088a8 <HAL_InitTick+0x58>)
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	4619      	mov	r1, r3
 8008862:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008866:	fbb3 f3f1 	udiv	r3, r3, r1
 800886a:	fbb2 f3f3 	udiv	r3, r2, r3
 800886e:	4618      	mov	r0, r3
 8008870:	f000 f93b 	bl	8008aea <HAL_SYSTICK_Config>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e00e      	b.n	800889c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b0f      	cmp	r3, #15
 8008882:	d80a      	bhi.n	800889a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008884:	2200      	movs	r2, #0
 8008886:	6879      	ldr	r1, [r7, #4]
 8008888:	f04f 30ff 	mov.w	r0, #4294967295
 800888c:	f000 f911 	bl	8008ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008890:	4a06      	ldr	r2, [pc, #24]	@ (80088ac <HAL_InitTick+0x5c>)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	e000      	b.n	800889c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
}
 800889c:	4618      	mov	r0, r3
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	20000000 	.word	0x20000000
 80088a8:	20000008 	.word	0x20000008
 80088ac:	20000004 	.word	0x20000004

080088b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80088b0:	b480      	push	{r7}
 80088b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80088b4:	4b06      	ldr	r3, [pc, #24]	@ (80088d0 <HAL_IncTick+0x20>)
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	461a      	mov	r2, r3
 80088ba:	4b06      	ldr	r3, [pc, #24]	@ (80088d4 <HAL_IncTick+0x24>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4413      	add	r3, r2
 80088c0:	4a04      	ldr	r2, [pc, #16]	@ (80088d4 <HAL_IncTick+0x24>)
 80088c2:	6013      	str	r3, [r2, #0]
}
 80088c4:	bf00      	nop
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	20000008 	.word	0x20000008
 80088d4:	20000028 	.word	0x20000028

080088d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80088d8:	b480      	push	{r7}
 80088da:	af00      	add	r7, sp, #0
  return uwTick;
 80088dc:	4b03      	ldr	r3, [pc, #12]	@ (80088ec <HAL_GetTick+0x14>)
 80088de:	681b      	ldr	r3, [r3, #0]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	20000028 	.word	0x20000028

080088f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80088f8:	f7ff ffee 	bl	80088d8 <HAL_GetTick>
 80088fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008908:	d005      	beq.n	8008916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800890a:	4b0a      	ldr	r3, [pc, #40]	@ (8008934 <HAL_Delay+0x44>)
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	461a      	mov	r2, r3
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	4413      	add	r3, r2
 8008914:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008916:	bf00      	nop
 8008918:	f7ff ffde 	bl	80088d8 <HAL_GetTick>
 800891c:	4602      	mov	r2, r0
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	429a      	cmp	r2, r3
 8008926:	d8f7      	bhi.n	8008918 <HAL_Delay+0x28>
  {
  }
}
 8008928:	bf00      	nop
 800892a:	bf00      	nop
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	20000008 	.word	0x20000008

08008938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f003 0307 	and.w	r3, r3, #7
 8008946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008948:	4b0c      	ldr	r3, [pc, #48]	@ (800897c <__NVIC_SetPriorityGrouping+0x44>)
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008954:	4013      	ands	r3, r2
 8008956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008960:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800896a:	4a04      	ldr	r2, [pc, #16]	@ (800897c <__NVIC_SetPriorityGrouping+0x44>)
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	60d3      	str	r3, [r2, #12]
}
 8008970:	bf00      	nop
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr
 800897c:	e000ed00 	.word	0xe000ed00

08008980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008980:	b480      	push	{r7}
 8008982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008984:	4b04      	ldr	r3, [pc, #16]	@ (8008998 <__NVIC_GetPriorityGrouping+0x18>)
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	0a1b      	lsrs	r3, r3, #8
 800898a:	f003 0307 	and.w	r3, r3, #7
}
 800898e:	4618      	mov	r0, r3
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	e000ed00 	.word	0xe000ed00

0800899c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	4603      	mov	r3, r0
 80089a4:	6039      	str	r1, [r7, #0]
 80089a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	db0a      	blt.n	80089c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	b2da      	uxtb	r2, r3
 80089b4:	490c      	ldr	r1, [pc, #48]	@ (80089e8 <__NVIC_SetPriority+0x4c>)
 80089b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089ba:	0112      	lsls	r2, r2, #4
 80089bc:	b2d2      	uxtb	r2, r2
 80089be:	440b      	add	r3, r1
 80089c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80089c4:	e00a      	b.n	80089dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	4908      	ldr	r1, [pc, #32]	@ (80089ec <__NVIC_SetPriority+0x50>)
 80089cc:	79fb      	ldrb	r3, [r7, #7]
 80089ce:	f003 030f 	and.w	r3, r3, #15
 80089d2:	3b04      	subs	r3, #4
 80089d4:	0112      	lsls	r2, r2, #4
 80089d6:	b2d2      	uxtb	r2, r2
 80089d8:	440b      	add	r3, r1
 80089da:	761a      	strb	r2, [r3, #24]
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr
 80089e8:	e000e100 	.word	0xe000e100
 80089ec:	e000ed00 	.word	0xe000ed00

080089f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b089      	sub	sp, #36	@ 0x24
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f003 0307 	and.w	r3, r3, #7
 8008a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	f1c3 0307 	rsb	r3, r3, #7
 8008a0a:	2b04      	cmp	r3, #4
 8008a0c:	bf28      	it	cs
 8008a0e:	2304      	movcs	r3, #4
 8008a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	3304      	adds	r3, #4
 8008a16:	2b06      	cmp	r3, #6
 8008a18:	d902      	bls.n	8008a20 <NVIC_EncodePriority+0x30>
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	3b03      	subs	r3, #3
 8008a1e:	e000      	b.n	8008a22 <NVIC_EncodePriority+0x32>
 8008a20:	2300      	movs	r3, #0
 8008a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a24:	f04f 32ff 	mov.w	r2, #4294967295
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a2e:	43da      	mvns	r2, r3
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	401a      	ands	r2, r3
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a38:	f04f 31ff 	mov.w	r1, #4294967295
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a42:	43d9      	mvns	r1, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a48:	4313      	orrs	r3, r2
         );
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3724      	adds	r7, #36	@ 0x24
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
	...

08008a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	3b01      	subs	r3, #1
 8008a64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a68:	d301      	bcc.n	8008a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e00f      	b.n	8008a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8008a98 <SysTick_Config+0x40>)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	3b01      	subs	r3, #1
 8008a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008a76:	210f      	movs	r1, #15
 8008a78:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7c:	f7ff ff8e 	bl	800899c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008a80:	4b05      	ldr	r3, [pc, #20]	@ (8008a98 <SysTick_Config+0x40>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008a86:	4b04      	ldr	r3, [pc, #16]	@ (8008a98 <SysTick_Config+0x40>)
 8008a88:	2207      	movs	r2, #7
 8008a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	e000e010 	.word	0xe000e010

08008a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f7ff ff47 	bl	8008938 <__NVIC_SetPriorityGrouping>
}
 8008aaa:	bf00      	nop
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b086      	sub	sp, #24
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	4603      	mov	r3, r0
 8008aba:	60b9      	str	r1, [r7, #8]
 8008abc:	607a      	str	r2, [r7, #4]
 8008abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008ac4:	f7ff ff5c 	bl	8008980 <__NVIC_GetPriorityGrouping>
 8008ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	68b9      	ldr	r1, [r7, #8]
 8008ace:	6978      	ldr	r0, [r7, #20]
 8008ad0:	f7ff ff8e 	bl	80089f0 <NVIC_EncodePriority>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ada:	4611      	mov	r1, r2
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7ff ff5d 	bl	800899c <__NVIC_SetPriority>
}
 8008ae2:	bf00      	nop
 8008ae4:	3718      	adds	r7, #24
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b082      	sub	sp, #8
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f7ff ffb0 	bl	8008a58 <SysTick_Config>
 8008af8:	4603      	mov	r3, r0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
	...

08008b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b089      	sub	sp, #36	@ 0x24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008b12:	2300      	movs	r3, #0
 8008b14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008b16:	2300      	movs	r3, #0
 8008b18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	61fb      	str	r3, [r7, #28]
 8008b1e:	e159      	b.n	8008dd4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008b20:	2201      	movs	r2, #1
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	fa02 f303 	lsl.w	r3, r2, r3
 8008b28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	4013      	ands	r3, r2
 8008b32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	f040 8148 	bne.w	8008dce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	f003 0303 	and.w	r3, r3, #3
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d005      	beq.n	8008b56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d130      	bne.n	8008bb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	005b      	lsls	r3, r3, #1
 8008b60:	2203      	movs	r2, #3
 8008b62:	fa02 f303 	lsl.w	r3, r2, r3
 8008b66:	43db      	mvns	r3, r3
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	68da      	ldr	r2, [r3, #12]
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	005b      	lsls	r3, r3, #1
 8008b76:	fa02 f303 	lsl.w	r3, r2, r3
 8008b7a:	69ba      	ldr	r2, [r7, #24]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	69ba      	ldr	r2, [r7, #24]
 8008b84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	fa02 f303 	lsl.w	r3, r2, r3
 8008b94:	43db      	mvns	r3, r3
 8008b96:	69ba      	ldr	r2, [r7, #24]
 8008b98:	4013      	ands	r3, r2
 8008b9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	091b      	lsrs	r3, r3, #4
 8008ba2:	f003 0201 	and.w	r2, r3, #1
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bac:	69ba      	ldr	r2, [r7, #24]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	69ba      	ldr	r2, [r7, #24]
 8008bb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	f003 0303 	and.w	r3, r3, #3
 8008bc0:	2b03      	cmp	r3, #3
 8008bc2:	d017      	beq.n	8008bf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	005b      	lsls	r3, r3, #1
 8008bce:	2203      	movs	r2, #3
 8008bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd4:	43db      	mvns	r3, r3
 8008bd6:	69ba      	ldr	r2, [r7, #24]
 8008bd8:	4013      	ands	r3, r2
 8008bda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	689a      	ldr	r2, [r3, #8]
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	005b      	lsls	r3, r3, #1
 8008be4:	fa02 f303 	lsl.w	r3, r2, r3
 8008be8:	69ba      	ldr	r2, [r7, #24]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	69ba      	ldr	r2, [r7, #24]
 8008bf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	f003 0303 	and.w	r3, r3, #3
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d123      	bne.n	8008c48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	08da      	lsrs	r2, r3, #3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	3208      	adds	r2, #8
 8008c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	f003 0307 	and.w	r3, r3, #7
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	220f      	movs	r2, #15
 8008c18:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1c:	43db      	mvns	r3, r3
 8008c1e:	69ba      	ldr	r2, [r7, #24]
 8008c20:	4013      	ands	r3, r2
 8008c22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	691a      	ldr	r2, [r3, #16]
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	f003 0307 	and.w	r3, r3, #7
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	fa02 f303 	lsl.w	r3, r2, r3
 8008c34:	69ba      	ldr	r2, [r7, #24]
 8008c36:	4313      	orrs	r3, r2
 8008c38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	08da      	lsrs	r2, r3, #3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	3208      	adds	r2, #8
 8008c42:	69b9      	ldr	r1, [r7, #24]
 8008c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	005b      	lsls	r3, r3, #1
 8008c52:	2203      	movs	r2, #3
 8008c54:	fa02 f303 	lsl.w	r3, r2, r3
 8008c58:	43db      	mvns	r3, r3
 8008c5a:	69ba      	ldr	r2, [r7, #24]
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	f003 0203 	and.w	r2, r3, #3
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	69ba      	ldr	r2, [r7, #24]
 8008c7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f000 80a2 	beq.w	8008dce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	60fb      	str	r3, [r7, #12]
 8008c8e:	4b57      	ldr	r3, [pc, #348]	@ (8008dec <HAL_GPIO_Init+0x2e8>)
 8008c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c92:	4a56      	ldr	r2, [pc, #344]	@ (8008dec <HAL_GPIO_Init+0x2e8>)
 8008c94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008c98:	6453      	str	r3, [r2, #68]	@ 0x44
 8008c9a:	4b54      	ldr	r3, [pc, #336]	@ (8008dec <HAL_GPIO_Init+0x2e8>)
 8008c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ca2:	60fb      	str	r3, [r7, #12]
 8008ca4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008ca6:	4a52      	ldr	r2, [pc, #328]	@ (8008df0 <HAL_GPIO_Init+0x2ec>)
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	089b      	lsrs	r3, r3, #2
 8008cac:	3302      	adds	r3, #2
 8008cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	f003 0303 	and.w	r3, r3, #3
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	220f      	movs	r2, #15
 8008cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc2:	43db      	mvns	r3, r3
 8008cc4:	69ba      	ldr	r2, [r7, #24]
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a49      	ldr	r2, [pc, #292]	@ (8008df4 <HAL_GPIO_Init+0x2f0>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d019      	beq.n	8008d06 <HAL_GPIO_Init+0x202>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a48      	ldr	r2, [pc, #288]	@ (8008df8 <HAL_GPIO_Init+0x2f4>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d013      	beq.n	8008d02 <HAL_GPIO_Init+0x1fe>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a47      	ldr	r2, [pc, #284]	@ (8008dfc <HAL_GPIO_Init+0x2f8>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d00d      	beq.n	8008cfe <HAL_GPIO_Init+0x1fa>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a46      	ldr	r2, [pc, #280]	@ (8008e00 <HAL_GPIO_Init+0x2fc>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d007      	beq.n	8008cfa <HAL_GPIO_Init+0x1f6>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a45      	ldr	r2, [pc, #276]	@ (8008e04 <HAL_GPIO_Init+0x300>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d101      	bne.n	8008cf6 <HAL_GPIO_Init+0x1f2>
 8008cf2:	2304      	movs	r3, #4
 8008cf4:	e008      	b.n	8008d08 <HAL_GPIO_Init+0x204>
 8008cf6:	2307      	movs	r3, #7
 8008cf8:	e006      	b.n	8008d08 <HAL_GPIO_Init+0x204>
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	e004      	b.n	8008d08 <HAL_GPIO_Init+0x204>
 8008cfe:	2302      	movs	r3, #2
 8008d00:	e002      	b.n	8008d08 <HAL_GPIO_Init+0x204>
 8008d02:	2301      	movs	r3, #1
 8008d04:	e000      	b.n	8008d08 <HAL_GPIO_Init+0x204>
 8008d06:	2300      	movs	r3, #0
 8008d08:	69fa      	ldr	r2, [r7, #28]
 8008d0a:	f002 0203 	and.w	r2, r2, #3
 8008d0e:	0092      	lsls	r2, r2, #2
 8008d10:	4093      	lsls	r3, r2
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008d18:	4935      	ldr	r1, [pc, #212]	@ (8008df0 <HAL_GPIO_Init+0x2ec>)
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	089b      	lsrs	r3, r3, #2
 8008d1e:	3302      	adds	r3, #2
 8008d20:	69ba      	ldr	r2, [r7, #24]
 8008d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008d26:	4b38      	ldr	r3, [pc, #224]	@ (8008e08 <HAL_GPIO_Init+0x304>)
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	43db      	mvns	r3, r3
 8008d30:	69ba      	ldr	r2, [r7, #24]
 8008d32:	4013      	ands	r3, r2
 8008d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d003      	beq.n	8008d4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8008d42:	69ba      	ldr	r2, [r7, #24]
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008d4a:	4a2f      	ldr	r2, [pc, #188]	@ (8008e08 <HAL_GPIO_Init+0x304>)
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008d50:	4b2d      	ldr	r3, [pc, #180]	@ (8008e08 <HAL_GPIO_Init+0x304>)
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	43db      	mvns	r3, r3
 8008d5a:	69ba      	ldr	r2, [r7, #24]
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d003      	beq.n	8008d74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008d74:	4a24      	ldr	r2, [pc, #144]	@ (8008e08 <HAL_GPIO_Init+0x304>)
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008d7a:	4b23      	ldr	r3, [pc, #140]	@ (8008e08 <HAL_GPIO_Init+0x304>)
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	43db      	mvns	r3, r3
 8008d84:	69ba      	ldr	r2, [r7, #24]
 8008d86:	4013      	ands	r3, r2
 8008d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d003      	beq.n	8008d9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8008d96:	69ba      	ldr	r2, [r7, #24]
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008d9e:	4a1a      	ldr	r2, [pc, #104]	@ (8008e08 <HAL_GPIO_Init+0x304>)
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008da4:	4b18      	ldr	r3, [pc, #96]	@ (8008e08 <HAL_GPIO_Init+0x304>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	43db      	mvns	r3, r3
 8008dae:	69ba      	ldr	r2, [r7, #24]
 8008db0:	4013      	ands	r3, r2
 8008db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d003      	beq.n	8008dc8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008dc0:	69ba      	ldr	r2, [r7, #24]
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8008e08 <HAL_GPIO_Init+0x304>)
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	61fb      	str	r3, [r7, #28]
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	2b0f      	cmp	r3, #15
 8008dd8:	f67f aea2 	bls.w	8008b20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008ddc:	bf00      	nop
 8008dde:	bf00      	nop
 8008de0:	3724      	adds	r7, #36	@ 0x24
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	40023800 	.word	0x40023800
 8008df0:	40013800 	.word	0x40013800
 8008df4:	40020000 	.word	0x40020000
 8008df8:	40020400 	.word	0x40020400
 8008dfc:	40020800 	.word	0x40020800
 8008e00:	40020c00 	.word	0x40020c00
 8008e04:	40021000 	.word	0x40021000
 8008e08:	40013c00 	.word	0x40013c00

08008e0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	460b      	mov	r3, r1
 8008e16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	691a      	ldr	r2, [r3, #16]
 8008e1c:	887b      	ldrh	r3, [r7, #2]
 8008e1e:	4013      	ands	r3, r2
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008e24:	2301      	movs	r3, #1
 8008e26:	73fb      	strb	r3, [r7, #15]
 8008e28:	e001      	b.n	8008e2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	460b      	mov	r3, r1
 8008e46:	807b      	strh	r3, [r7, #2]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008e4c:	787b      	ldrb	r3, [r7, #1]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d003      	beq.n	8008e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008e52:	887a      	ldrh	r2, [r7, #2]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008e58:	e003      	b.n	8008e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008e5a:	887b      	ldrh	r3, [r7, #2]
 8008e5c:	041a      	lsls	r2, r3, #16
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	619a      	str	r2, [r3, #24]
}
 8008e62:	bf00      	nop
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
	...

08008e70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d101      	bne.n	8008e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e267      	b.n	8009352 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 0301 	and.w	r3, r3, #1
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d075      	beq.n	8008f7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008e8e:	4b88      	ldr	r3, [pc, #544]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	f003 030c 	and.w	r3, r3, #12
 8008e96:	2b04      	cmp	r3, #4
 8008e98:	d00c      	beq.n	8008eb4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e9a:	4b85      	ldr	r3, [pc, #532]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008ea2:	2b08      	cmp	r3, #8
 8008ea4:	d112      	bne.n	8008ecc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ea6:	4b82      	ldr	r3, [pc, #520]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008eae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008eb2:	d10b      	bne.n	8008ecc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008eb4:	4b7e      	ldr	r3, [pc, #504]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d05b      	beq.n	8008f78 <HAL_RCC_OscConfig+0x108>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d157      	bne.n	8008f78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e242      	b.n	8009352 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ed4:	d106      	bne.n	8008ee4 <HAL_RCC_OscConfig+0x74>
 8008ed6:	4b76      	ldr	r3, [pc, #472]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a75      	ldr	r2, [pc, #468]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8008edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ee0:	6013      	str	r3, [r2, #0]
 8008ee2:	e01d      	b.n	8008f20 <HAL_RCC_OscConfig+0xb0>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008eec:	d10c      	bne.n	8008f08 <HAL_RCC_OscConfig+0x98>
 8008eee:	4b70      	ldr	r3, [pc, #448]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a6f      	ldr	r2, [pc, #444]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8008ef4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008ef8:	6013      	str	r3, [r2, #0]
 8008efa:	4b6d      	ldr	r3, [pc, #436]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a6c      	ldr	r2, [pc, #432]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8008f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f04:	6013      	str	r3, [r2, #0]
 8008f06:	e00b      	b.n	8008f20 <HAL_RCC_OscConfig+0xb0>
 8008f08:	4b69      	ldr	r3, [pc, #420]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a68      	ldr	r2, [pc, #416]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8008f0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f12:	6013      	str	r3, [r2, #0]
 8008f14:	4b66      	ldr	r3, [pc, #408]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a65      	ldr	r2, [pc, #404]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8008f1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d013      	beq.n	8008f50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f28:	f7ff fcd6 	bl	80088d8 <HAL_GetTick>
 8008f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f2e:	e008      	b.n	8008f42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f30:	f7ff fcd2 	bl	80088d8 <HAL_GetTick>
 8008f34:	4602      	mov	r2, r0
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	2b64      	cmp	r3, #100	@ 0x64
 8008f3c:	d901      	bls.n	8008f42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	e207      	b.n	8009352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f42:	4b5b      	ldr	r3, [pc, #364]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d0f0      	beq.n	8008f30 <HAL_RCC_OscConfig+0xc0>
 8008f4e:	e014      	b.n	8008f7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f50:	f7ff fcc2 	bl	80088d8 <HAL_GetTick>
 8008f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f56:	e008      	b.n	8008f6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f58:	f7ff fcbe 	bl	80088d8 <HAL_GetTick>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	2b64      	cmp	r3, #100	@ 0x64
 8008f64:	d901      	bls.n	8008f6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e1f3      	b.n	8009352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f6a:	4b51      	ldr	r3, [pc, #324]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1f0      	bne.n	8008f58 <HAL_RCC_OscConfig+0xe8>
 8008f76:	e000      	b.n	8008f7a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f003 0302 	and.w	r3, r3, #2
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d063      	beq.n	800904e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008f86:	4b4a      	ldr	r3, [pc, #296]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	f003 030c 	and.w	r3, r3, #12
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00b      	beq.n	8008faa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f92:	4b47      	ldr	r3, [pc, #284]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008f9a:	2b08      	cmp	r3, #8
 8008f9c:	d11c      	bne.n	8008fd8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f9e:	4b44      	ldr	r3, [pc, #272]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d116      	bne.n	8008fd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008faa:	4b41      	ldr	r3, [pc, #260]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 0302 	and.w	r3, r3, #2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d005      	beq.n	8008fc2 <HAL_RCC_OscConfig+0x152>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d001      	beq.n	8008fc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e1c7      	b.n	8009352 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	00db      	lsls	r3, r3, #3
 8008fd0:	4937      	ldr	r1, [pc, #220]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008fd6:	e03a      	b.n	800904e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d020      	beq.n	8009022 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008fe0:	4b34      	ldr	r3, [pc, #208]	@ (80090b4 <HAL_RCC_OscConfig+0x244>)
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fe6:	f7ff fc77 	bl	80088d8 <HAL_GetTick>
 8008fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fec:	e008      	b.n	8009000 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fee:	f7ff fc73 	bl	80088d8 <HAL_GetTick>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	d901      	bls.n	8009000 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	e1a8      	b.n	8009352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009000:	4b2b      	ldr	r3, [pc, #172]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 0302 	and.w	r3, r3, #2
 8009008:	2b00      	cmp	r3, #0
 800900a:	d0f0      	beq.n	8008fee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800900c:	4b28      	ldr	r3, [pc, #160]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	00db      	lsls	r3, r3, #3
 800901a:	4925      	ldr	r1, [pc, #148]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 800901c:	4313      	orrs	r3, r2
 800901e:	600b      	str	r3, [r1, #0]
 8009020:	e015      	b.n	800904e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009022:	4b24      	ldr	r3, [pc, #144]	@ (80090b4 <HAL_RCC_OscConfig+0x244>)
 8009024:	2200      	movs	r2, #0
 8009026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009028:	f7ff fc56 	bl	80088d8 <HAL_GetTick>
 800902c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800902e:	e008      	b.n	8009042 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009030:	f7ff fc52 	bl	80088d8 <HAL_GetTick>
 8009034:	4602      	mov	r2, r0
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	2b02      	cmp	r3, #2
 800903c:	d901      	bls.n	8009042 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800903e:	2303      	movs	r3, #3
 8009040:	e187      	b.n	8009352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009042:	4b1b      	ldr	r3, [pc, #108]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 0302 	and.w	r3, r3, #2
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1f0      	bne.n	8009030 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f003 0308 	and.w	r3, r3, #8
 8009056:	2b00      	cmp	r3, #0
 8009058:	d036      	beq.n	80090c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d016      	beq.n	8009090 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009062:	4b15      	ldr	r3, [pc, #84]	@ (80090b8 <HAL_RCC_OscConfig+0x248>)
 8009064:	2201      	movs	r2, #1
 8009066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009068:	f7ff fc36 	bl	80088d8 <HAL_GetTick>
 800906c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800906e:	e008      	b.n	8009082 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009070:	f7ff fc32 	bl	80088d8 <HAL_GetTick>
 8009074:	4602      	mov	r2, r0
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	1ad3      	subs	r3, r2, r3
 800907a:	2b02      	cmp	r3, #2
 800907c:	d901      	bls.n	8009082 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800907e:	2303      	movs	r3, #3
 8009080:	e167      	b.n	8009352 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009082:	4b0b      	ldr	r3, [pc, #44]	@ (80090b0 <HAL_RCC_OscConfig+0x240>)
 8009084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009086:	f003 0302 	and.w	r3, r3, #2
 800908a:	2b00      	cmp	r3, #0
 800908c:	d0f0      	beq.n	8009070 <HAL_RCC_OscConfig+0x200>
 800908e:	e01b      	b.n	80090c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009090:	4b09      	ldr	r3, [pc, #36]	@ (80090b8 <HAL_RCC_OscConfig+0x248>)
 8009092:	2200      	movs	r2, #0
 8009094:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009096:	f7ff fc1f 	bl	80088d8 <HAL_GetTick>
 800909a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800909c:	e00e      	b.n	80090bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800909e:	f7ff fc1b 	bl	80088d8 <HAL_GetTick>
 80090a2:	4602      	mov	r2, r0
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	1ad3      	subs	r3, r2, r3
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d907      	bls.n	80090bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80090ac:	2303      	movs	r3, #3
 80090ae:	e150      	b.n	8009352 <HAL_RCC_OscConfig+0x4e2>
 80090b0:	40023800 	.word	0x40023800
 80090b4:	42470000 	.word	0x42470000
 80090b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80090bc:	4b88      	ldr	r3, [pc, #544]	@ (80092e0 <HAL_RCC_OscConfig+0x470>)
 80090be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090c0:	f003 0302 	and.w	r3, r3, #2
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d1ea      	bne.n	800909e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 0304 	and.w	r3, r3, #4
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f000 8097 	beq.w	8009204 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80090d6:	2300      	movs	r3, #0
 80090d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80090da:	4b81      	ldr	r3, [pc, #516]	@ (80092e0 <HAL_RCC_OscConfig+0x470>)
 80090dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10f      	bne.n	8009106 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80090e6:	2300      	movs	r3, #0
 80090e8:	60bb      	str	r3, [r7, #8]
 80090ea:	4b7d      	ldr	r3, [pc, #500]	@ (80092e0 <HAL_RCC_OscConfig+0x470>)
 80090ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ee:	4a7c      	ldr	r2, [pc, #496]	@ (80092e0 <HAL_RCC_OscConfig+0x470>)
 80090f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80090f6:	4b7a      	ldr	r3, [pc, #488]	@ (80092e0 <HAL_RCC_OscConfig+0x470>)
 80090f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090fe:	60bb      	str	r3, [r7, #8]
 8009100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009102:	2301      	movs	r3, #1
 8009104:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009106:	4b77      	ldr	r3, [pc, #476]	@ (80092e4 <HAL_RCC_OscConfig+0x474>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800910e:	2b00      	cmp	r3, #0
 8009110:	d118      	bne.n	8009144 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009112:	4b74      	ldr	r3, [pc, #464]	@ (80092e4 <HAL_RCC_OscConfig+0x474>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a73      	ldr	r2, [pc, #460]	@ (80092e4 <HAL_RCC_OscConfig+0x474>)
 8009118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800911c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800911e:	f7ff fbdb 	bl	80088d8 <HAL_GetTick>
 8009122:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009124:	e008      	b.n	8009138 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009126:	f7ff fbd7 	bl	80088d8 <HAL_GetTick>
 800912a:	4602      	mov	r2, r0
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	1ad3      	subs	r3, r2, r3
 8009130:	2b02      	cmp	r3, #2
 8009132:	d901      	bls.n	8009138 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009134:	2303      	movs	r3, #3
 8009136:	e10c      	b.n	8009352 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009138:	4b6a      	ldr	r3, [pc, #424]	@ (80092e4 <HAL_RCC_OscConfig+0x474>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009140:	2b00      	cmp	r3, #0
 8009142:	d0f0      	beq.n	8009126 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d106      	bne.n	800915a <HAL_RCC_OscConfig+0x2ea>
 800914c:	4b64      	ldr	r3, [pc, #400]	@ (80092e0 <HAL_RCC_OscConfig+0x470>)
 800914e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009150:	4a63      	ldr	r2, [pc, #396]	@ (80092e0 <HAL_RCC_OscConfig+0x470>)
 8009152:	f043 0301 	orr.w	r3, r3, #1
 8009156:	6713      	str	r3, [r2, #112]	@ 0x70
 8009158:	e01c      	b.n	8009194 <HAL_RCC_OscConfig+0x324>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	2b05      	cmp	r3, #5
 8009160:	d10c      	bne.n	800917c <HAL_RCC_OscConfig+0x30c>
 8009162:	4b5f      	ldr	r3, [pc, #380]	@ (80092e0 <HAL_RCC_OscConfig+0x470>)
 8009164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009166:	4a5e      	ldr	r2, [pc, #376]	@ (80092e0 <HAL_RCC_OscConfig+0x470>)
 8009168:	f043 0304 	orr.w	r3, r3, #4
 800916c:	6713      	str	r3, [r2, #112]	@ 0x70
 800916e:	4b5c      	ldr	r3, [pc, #368]	@ (80092e0 <HAL_RCC_OscConfig+0x470>)
 8009170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009172:	4a5b      	ldr	r2, [pc, #364]	@ (80092e0 <HAL_RCC_OscConfig+0x470>)
 8009174:	f043 0301 	orr.w	r3, r3, #1
 8009178:	6713      	str	r3, [r2, #112]	@ 0x70
 800917a:	e00b      	b.n	8009194 <HAL_RCC_OscConfig+0x324>
 800917c:	4b58      	ldr	r3, [pc, #352]	@ (80092e0 <HAL_RCC_OscConfig+0x470>)
 800917e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009180:	4a57      	ldr	r2, [pc, #348]	@ (80092e0 <HAL_RCC_OscConfig+0x470>)
 8009182:	f023 0301 	bic.w	r3, r3, #1
 8009186:	6713      	str	r3, [r2, #112]	@ 0x70
 8009188:	4b55      	ldr	r3, [pc, #340]	@ (80092e0 <HAL_RCC_OscConfig+0x470>)
 800918a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800918c:	4a54      	ldr	r2, [pc, #336]	@ (80092e0 <HAL_RCC_OscConfig+0x470>)
 800918e:	f023 0304 	bic.w	r3, r3, #4
 8009192:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d015      	beq.n	80091c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800919c:	f7ff fb9c 	bl	80088d8 <HAL_GetTick>
 80091a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091a2:	e00a      	b.n	80091ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091a4:	f7ff fb98 	bl	80088d8 <HAL_GetTick>
 80091a8:	4602      	mov	r2, r0
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	1ad3      	subs	r3, r2, r3
 80091ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d901      	bls.n	80091ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80091b6:	2303      	movs	r3, #3
 80091b8:	e0cb      	b.n	8009352 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091ba:	4b49      	ldr	r3, [pc, #292]	@ (80092e0 <HAL_RCC_OscConfig+0x470>)
 80091bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091be:	f003 0302 	and.w	r3, r3, #2
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d0ee      	beq.n	80091a4 <HAL_RCC_OscConfig+0x334>
 80091c6:	e014      	b.n	80091f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091c8:	f7ff fb86 	bl	80088d8 <HAL_GetTick>
 80091cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80091ce:	e00a      	b.n	80091e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091d0:	f7ff fb82 	bl	80088d8 <HAL_GetTick>
 80091d4:	4602      	mov	r2, r0
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091de:	4293      	cmp	r3, r2
 80091e0:	d901      	bls.n	80091e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80091e2:	2303      	movs	r3, #3
 80091e4:	e0b5      	b.n	8009352 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80091e6:	4b3e      	ldr	r3, [pc, #248]	@ (80092e0 <HAL_RCC_OscConfig+0x470>)
 80091e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091ea:	f003 0302 	and.w	r3, r3, #2
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1ee      	bne.n	80091d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80091f2:	7dfb      	ldrb	r3, [r7, #23]
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d105      	bne.n	8009204 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80091f8:	4b39      	ldr	r3, [pc, #228]	@ (80092e0 <HAL_RCC_OscConfig+0x470>)
 80091fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091fc:	4a38      	ldr	r2, [pc, #224]	@ (80092e0 <HAL_RCC_OscConfig+0x470>)
 80091fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009202:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	2b00      	cmp	r3, #0
 800920a:	f000 80a1 	beq.w	8009350 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800920e:	4b34      	ldr	r3, [pc, #208]	@ (80092e0 <HAL_RCC_OscConfig+0x470>)
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	f003 030c 	and.w	r3, r3, #12
 8009216:	2b08      	cmp	r3, #8
 8009218:	d05c      	beq.n	80092d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	2b02      	cmp	r3, #2
 8009220:	d141      	bne.n	80092a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009222:	4b31      	ldr	r3, [pc, #196]	@ (80092e8 <HAL_RCC_OscConfig+0x478>)
 8009224:	2200      	movs	r2, #0
 8009226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009228:	f7ff fb56 	bl	80088d8 <HAL_GetTick>
 800922c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800922e:	e008      	b.n	8009242 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009230:	f7ff fb52 	bl	80088d8 <HAL_GetTick>
 8009234:	4602      	mov	r2, r0
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	2b02      	cmp	r3, #2
 800923c:	d901      	bls.n	8009242 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800923e:	2303      	movs	r3, #3
 8009240:	e087      	b.n	8009352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009242:	4b27      	ldr	r3, [pc, #156]	@ (80092e0 <HAL_RCC_OscConfig+0x470>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1f0      	bne.n	8009230 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	69da      	ldr	r2, [r3, #28]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a1b      	ldr	r3, [r3, #32]
 8009256:	431a      	orrs	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800925c:	019b      	lsls	r3, r3, #6
 800925e:	431a      	orrs	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009264:	085b      	lsrs	r3, r3, #1
 8009266:	3b01      	subs	r3, #1
 8009268:	041b      	lsls	r3, r3, #16
 800926a:	431a      	orrs	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009270:	061b      	lsls	r3, r3, #24
 8009272:	491b      	ldr	r1, [pc, #108]	@ (80092e0 <HAL_RCC_OscConfig+0x470>)
 8009274:	4313      	orrs	r3, r2
 8009276:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009278:	4b1b      	ldr	r3, [pc, #108]	@ (80092e8 <HAL_RCC_OscConfig+0x478>)
 800927a:	2201      	movs	r2, #1
 800927c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800927e:	f7ff fb2b 	bl	80088d8 <HAL_GetTick>
 8009282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009284:	e008      	b.n	8009298 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009286:	f7ff fb27 	bl	80088d8 <HAL_GetTick>
 800928a:	4602      	mov	r2, r0
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	2b02      	cmp	r3, #2
 8009292:	d901      	bls.n	8009298 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009294:	2303      	movs	r3, #3
 8009296:	e05c      	b.n	8009352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009298:	4b11      	ldr	r3, [pc, #68]	@ (80092e0 <HAL_RCC_OscConfig+0x470>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d0f0      	beq.n	8009286 <HAL_RCC_OscConfig+0x416>
 80092a4:	e054      	b.n	8009350 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092a6:	4b10      	ldr	r3, [pc, #64]	@ (80092e8 <HAL_RCC_OscConfig+0x478>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092ac:	f7ff fb14 	bl	80088d8 <HAL_GetTick>
 80092b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092b2:	e008      	b.n	80092c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092b4:	f7ff fb10 	bl	80088d8 <HAL_GetTick>
 80092b8:	4602      	mov	r2, r0
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d901      	bls.n	80092c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80092c2:	2303      	movs	r3, #3
 80092c4:	e045      	b.n	8009352 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092c6:	4b06      	ldr	r3, [pc, #24]	@ (80092e0 <HAL_RCC_OscConfig+0x470>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1f0      	bne.n	80092b4 <HAL_RCC_OscConfig+0x444>
 80092d2:	e03d      	b.n	8009350 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d107      	bne.n	80092ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	e038      	b.n	8009352 <HAL_RCC_OscConfig+0x4e2>
 80092e0:	40023800 	.word	0x40023800
 80092e4:	40007000 	.word	0x40007000
 80092e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80092ec:	4b1b      	ldr	r3, [pc, #108]	@ (800935c <HAL_RCC_OscConfig+0x4ec>)
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d028      	beq.n	800934c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009304:	429a      	cmp	r2, r3
 8009306:	d121      	bne.n	800934c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009312:	429a      	cmp	r2, r3
 8009314:	d11a      	bne.n	800934c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800931c:	4013      	ands	r3, r2
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009322:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009324:	4293      	cmp	r3, r2
 8009326:	d111      	bne.n	800934c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009332:	085b      	lsrs	r3, r3, #1
 8009334:	3b01      	subs	r3, #1
 8009336:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009338:	429a      	cmp	r2, r3
 800933a:	d107      	bne.n	800934c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009346:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009348:	429a      	cmp	r2, r3
 800934a:	d001      	beq.n	8009350 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	e000      	b.n	8009352 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3718      	adds	r7, #24
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	40023800 	.word	0x40023800

08009360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d101      	bne.n	8009374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	e0cc      	b.n	800950e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009374:	4b68      	ldr	r3, [pc, #416]	@ (8009518 <HAL_RCC_ClockConfig+0x1b8>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 0307 	and.w	r3, r3, #7
 800937c:	683a      	ldr	r2, [r7, #0]
 800937e:	429a      	cmp	r2, r3
 8009380:	d90c      	bls.n	800939c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009382:	4b65      	ldr	r3, [pc, #404]	@ (8009518 <HAL_RCC_ClockConfig+0x1b8>)
 8009384:	683a      	ldr	r2, [r7, #0]
 8009386:	b2d2      	uxtb	r2, r2
 8009388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800938a:	4b63      	ldr	r3, [pc, #396]	@ (8009518 <HAL_RCC_ClockConfig+0x1b8>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 0307 	and.w	r3, r3, #7
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	429a      	cmp	r2, r3
 8009396:	d001      	beq.n	800939c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009398:	2301      	movs	r3, #1
 800939a:	e0b8      	b.n	800950e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f003 0302 	and.w	r3, r3, #2
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d020      	beq.n	80093ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 0304 	and.w	r3, r3, #4
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d005      	beq.n	80093c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80093b4:	4b59      	ldr	r3, [pc, #356]	@ (800951c <HAL_RCC_ClockConfig+0x1bc>)
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	4a58      	ldr	r2, [pc, #352]	@ (800951c <HAL_RCC_ClockConfig+0x1bc>)
 80093ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80093be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f003 0308 	and.w	r3, r3, #8
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d005      	beq.n	80093d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80093cc:	4b53      	ldr	r3, [pc, #332]	@ (800951c <HAL_RCC_ClockConfig+0x1bc>)
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	4a52      	ldr	r2, [pc, #328]	@ (800951c <HAL_RCC_ClockConfig+0x1bc>)
 80093d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80093d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80093d8:	4b50      	ldr	r3, [pc, #320]	@ (800951c <HAL_RCC_ClockConfig+0x1bc>)
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	494d      	ldr	r1, [pc, #308]	@ (800951c <HAL_RCC_ClockConfig+0x1bc>)
 80093e6:	4313      	orrs	r3, r2
 80093e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 0301 	and.w	r3, r3, #1
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d044      	beq.n	8009480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d107      	bne.n	800940e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093fe:	4b47      	ldr	r3, [pc, #284]	@ (800951c <HAL_RCC_ClockConfig+0x1bc>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009406:	2b00      	cmp	r3, #0
 8009408:	d119      	bne.n	800943e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	e07f      	b.n	800950e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	2b02      	cmp	r3, #2
 8009414:	d003      	beq.n	800941e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800941a:	2b03      	cmp	r3, #3
 800941c:	d107      	bne.n	800942e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800941e:	4b3f      	ldr	r3, [pc, #252]	@ (800951c <HAL_RCC_ClockConfig+0x1bc>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009426:	2b00      	cmp	r3, #0
 8009428:	d109      	bne.n	800943e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e06f      	b.n	800950e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800942e:	4b3b      	ldr	r3, [pc, #236]	@ (800951c <HAL_RCC_ClockConfig+0x1bc>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 0302 	and.w	r3, r3, #2
 8009436:	2b00      	cmp	r3, #0
 8009438:	d101      	bne.n	800943e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	e067      	b.n	800950e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800943e:	4b37      	ldr	r3, [pc, #220]	@ (800951c <HAL_RCC_ClockConfig+0x1bc>)
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	f023 0203 	bic.w	r2, r3, #3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	4934      	ldr	r1, [pc, #208]	@ (800951c <HAL_RCC_ClockConfig+0x1bc>)
 800944c:	4313      	orrs	r3, r2
 800944e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009450:	f7ff fa42 	bl	80088d8 <HAL_GetTick>
 8009454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009456:	e00a      	b.n	800946e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009458:	f7ff fa3e 	bl	80088d8 <HAL_GetTick>
 800945c:	4602      	mov	r2, r0
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009466:	4293      	cmp	r3, r2
 8009468:	d901      	bls.n	800946e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800946a:	2303      	movs	r3, #3
 800946c:	e04f      	b.n	800950e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800946e:	4b2b      	ldr	r3, [pc, #172]	@ (800951c <HAL_RCC_ClockConfig+0x1bc>)
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	f003 020c 	and.w	r2, r3, #12
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	429a      	cmp	r2, r3
 800947e:	d1eb      	bne.n	8009458 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009480:	4b25      	ldr	r3, [pc, #148]	@ (8009518 <HAL_RCC_ClockConfig+0x1b8>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f003 0307 	and.w	r3, r3, #7
 8009488:	683a      	ldr	r2, [r7, #0]
 800948a:	429a      	cmp	r2, r3
 800948c:	d20c      	bcs.n	80094a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800948e:	4b22      	ldr	r3, [pc, #136]	@ (8009518 <HAL_RCC_ClockConfig+0x1b8>)
 8009490:	683a      	ldr	r2, [r7, #0]
 8009492:	b2d2      	uxtb	r2, r2
 8009494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009496:	4b20      	ldr	r3, [pc, #128]	@ (8009518 <HAL_RCC_ClockConfig+0x1b8>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f003 0307 	and.w	r3, r3, #7
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d001      	beq.n	80094a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	e032      	b.n	800950e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 0304 	and.w	r3, r3, #4
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d008      	beq.n	80094c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80094b4:	4b19      	ldr	r3, [pc, #100]	@ (800951c <HAL_RCC_ClockConfig+0x1bc>)
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	4916      	ldr	r1, [pc, #88]	@ (800951c <HAL_RCC_ClockConfig+0x1bc>)
 80094c2:	4313      	orrs	r3, r2
 80094c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 0308 	and.w	r3, r3, #8
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d009      	beq.n	80094e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80094d2:	4b12      	ldr	r3, [pc, #72]	@ (800951c <HAL_RCC_ClockConfig+0x1bc>)
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	00db      	lsls	r3, r3, #3
 80094e0:	490e      	ldr	r1, [pc, #56]	@ (800951c <HAL_RCC_ClockConfig+0x1bc>)
 80094e2:	4313      	orrs	r3, r2
 80094e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80094e6:	f000 f821 	bl	800952c <HAL_RCC_GetSysClockFreq>
 80094ea:	4602      	mov	r2, r0
 80094ec:	4b0b      	ldr	r3, [pc, #44]	@ (800951c <HAL_RCC_ClockConfig+0x1bc>)
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	091b      	lsrs	r3, r3, #4
 80094f2:	f003 030f 	and.w	r3, r3, #15
 80094f6:	490a      	ldr	r1, [pc, #40]	@ (8009520 <HAL_RCC_ClockConfig+0x1c0>)
 80094f8:	5ccb      	ldrb	r3, [r1, r3]
 80094fa:	fa22 f303 	lsr.w	r3, r2, r3
 80094fe:	4a09      	ldr	r2, [pc, #36]	@ (8009524 <HAL_RCC_ClockConfig+0x1c4>)
 8009500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009502:	4b09      	ldr	r3, [pc, #36]	@ (8009528 <HAL_RCC_ClockConfig+0x1c8>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4618      	mov	r0, r3
 8009508:	f7ff f9a2 	bl	8008850 <HAL_InitTick>

  return HAL_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	40023c00 	.word	0x40023c00
 800951c:	40023800 	.word	0x40023800
 8009520:	08009728 	.word	0x08009728
 8009524:	20000000 	.word	0x20000000
 8009528:	20000004 	.word	0x20000004

0800952c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800952c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009530:	b090      	sub	sp, #64	@ 0x40
 8009532:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009534:	2300      	movs	r3, #0
 8009536:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8009538:	2300      	movs	r3, #0
 800953a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800953c:	2300      	movs	r3, #0
 800953e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8009540:	2300      	movs	r3, #0
 8009542:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009544:	4b59      	ldr	r3, [pc, #356]	@ (80096ac <HAL_RCC_GetSysClockFreq+0x180>)
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	f003 030c 	and.w	r3, r3, #12
 800954c:	2b08      	cmp	r3, #8
 800954e:	d00d      	beq.n	800956c <HAL_RCC_GetSysClockFreq+0x40>
 8009550:	2b08      	cmp	r3, #8
 8009552:	f200 80a1 	bhi.w	8009698 <HAL_RCC_GetSysClockFreq+0x16c>
 8009556:	2b00      	cmp	r3, #0
 8009558:	d002      	beq.n	8009560 <HAL_RCC_GetSysClockFreq+0x34>
 800955a:	2b04      	cmp	r3, #4
 800955c:	d003      	beq.n	8009566 <HAL_RCC_GetSysClockFreq+0x3a>
 800955e:	e09b      	b.n	8009698 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009560:	4b53      	ldr	r3, [pc, #332]	@ (80096b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8009562:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009564:	e09b      	b.n	800969e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009566:	4b53      	ldr	r3, [pc, #332]	@ (80096b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8009568:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800956a:	e098      	b.n	800969e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800956c:	4b4f      	ldr	r3, [pc, #316]	@ (80096ac <HAL_RCC_GetSysClockFreq+0x180>)
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009574:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009576:	4b4d      	ldr	r3, [pc, #308]	@ (80096ac <HAL_RCC_GetSysClockFreq+0x180>)
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800957e:	2b00      	cmp	r3, #0
 8009580:	d028      	beq.n	80095d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009582:	4b4a      	ldr	r3, [pc, #296]	@ (80096ac <HAL_RCC_GetSysClockFreq+0x180>)
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	099b      	lsrs	r3, r3, #6
 8009588:	2200      	movs	r2, #0
 800958a:	623b      	str	r3, [r7, #32]
 800958c:	627a      	str	r2, [r7, #36]	@ 0x24
 800958e:	6a3b      	ldr	r3, [r7, #32]
 8009590:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009594:	2100      	movs	r1, #0
 8009596:	4b47      	ldr	r3, [pc, #284]	@ (80096b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8009598:	fb03 f201 	mul.w	r2, r3, r1
 800959c:	2300      	movs	r3, #0
 800959e:	fb00 f303 	mul.w	r3, r0, r3
 80095a2:	4413      	add	r3, r2
 80095a4:	4a43      	ldr	r2, [pc, #268]	@ (80096b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80095a6:	fba0 1202 	umull	r1, r2, r0, r2
 80095aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80095ac:	460a      	mov	r2, r1
 80095ae:	62ba      	str	r2, [r7, #40]	@ 0x28
 80095b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095b2:	4413      	add	r3, r2
 80095b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095b8:	2200      	movs	r2, #0
 80095ba:	61bb      	str	r3, [r7, #24]
 80095bc:	61fa      	str	r2, [r7, #28]
 80095be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80095c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80095c6:	f7fe fe07 	bl	80081d8 <__aeabi_uldivmod>
 80095ca:	4602      	mov	r2, r0
 80095cc:	460b      	mov	r3, r1
 80095ce:	4613      	mov	r3, r2
 80095d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095d2:	e053      	b.n	800967c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80095d4:	4b35      	ldr	r3, [pc, #212]	@ (80096ac <HAL_RCC_GetSysClockFreq+0x180>)
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	099b      	lsrs	r3, r3, #6
 80095da:	2200      	movs	r2, #0
 80095dc:	613b      	str	r3, [r7, #16]
 80095de:	617a      	str	r2, [r7, #20]
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80095e6:	f04f 0b00 	mov.w	fp, #0
 80095ea:	4652      	mov	r2, sl
 80095ec:	465b      	mov	r3, fp
 80095ee:	f04f 0000 	mov.w	r0, #0
 80095f2:	f04f 0100 	mov.w	r1, #0
 80095f6:	0159      	lsls	r1, r3, #5
 80095f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80095fc:	0150      	lsls	r0, r2, #5
 80095fe:	4602      	mov	r2, r0
 8009600:	460b      	mov	r3, r1
 8009602:	ebb2 080a 	subs.w	r8, r2, sl
 8009606:	eb63 090b 	sbc.w	r9, r3, fp
 800960a:	f04f 0200 	mov.w	r2, #0
 800960e:	f04f 0300 	mov.w	r3, #0
 8009612:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009616:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800961a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800961e:	ebb2 0408 	subs.w	r4, r2, r8
 8009622:	eb63 0509 	sbc.w	r5, r3, r9
 8009626:	f04f 0200 	mov.w	r2, #0
 800962a:	f04f 0300 	mov.w	r3, #0
 800962e:	00eb      	lsls	r3, r5, #3
 8009630:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009634:	00e2      	lsls	r2, r4, #3
 8009636:	4614      	mov	r4, r2
 8009638:	461d      	mov	r5, r3
 800963a:	eb14 030a 	adds.w	r3, r4, sl
 800963e:	603b      	str	r3, [r7, #0]
 8009640:	eb45 030b 	adc.w	r3, r5, fp
 8009644:	607b      	str	r3, [r7, #4]
 8009646:	f04f 0200 	mov.w	r2, #0
 800964a:	f04f 0300 	mov.w	r3, #0
 800964e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009652:	4629      	mov	r1, r5
 8009654:	028b      	lsls	r3, r1, #10
 8009656:	4621      	mov	r1, r4
 8009658:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800965c:	4621      	mov	r1, r4
 800965e:	028a      	lsls	r2, r1, #10
 8009660:	4610      	mov	r0, r2
 8009662:	4619      	mov	r1, r3
 8009664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009666:	2200      	movs	r2, #0
 8009668:	60bb      	str	r3, [r7, #8]
 800966a:	60fa      	str	r2, [r7, #12]
 800966c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009670:	f7fe fdb2 	bl	80081d8 <__aeabi_uldivmod>
 8009674:	4602      	mov	r2, r0
 8009676:	460b      	mov	r3, r1
 8009678:	4613      	mov	r3, r2
 800967a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800967c:	4b0b      	ldr	r3, [pc, #44]	@ (80096ac <HAL_RCC_GetSysClockFreq+0x180>)
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	0c1b      	lsrs	r3, r3, #16
 8009682:	f003 0303 	and.w	r3, r3, #3
 8009686:	3301      	adds	r3, #1
 8009688:	005b      	lsls	r3, r3, #1
 800968a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800968c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800968e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009690:	fbb2 f3f3 	udiv	r3, r2, r3
 8009694:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009696:	e002      	b.n	800969e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009698:	4b05      	ldr	r3, [pc, #20]	@ (80096b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800969a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800969c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800969e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3740      	adds	r7, #64	@ 0x40
 80096a4:	46bd      	mov	sp, r7
 80096a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096aa:	bf00      	nop
 80096ac:	40023800 	.word	0x40023800
 80096b0:	00f42400 	.word	0x00f42400
 80096b4:	017d7840 	.word	0x017d7840

080096b8 <memset>:
 80096b8:	4402      	add	r2, r0
 80096ba:	4603      	mov	r3, r0
 80096bc:	4293      	cmp	r3, r2
 80096be:	d100      	bne.n	80096c2 <memset+0xa>
 80096c0:	4770      	bx	lr
 80096c2:	f803 1b01 	strb.w	r1, [r3], #1
 80096c6:	e7f9      	b.n	80096bc <memset+0x4>

080096c8 <__libc_init_array>:
 80096c8:	b570      	push	{r4, r5, r6, lr}
 80096ca:	4d0d      	ldr	r5, [pc, #52]	@ (8009700 <__libc_init_array+0x38>)
 80096cc:	4c0d      	ldr	r4, [pc, #52]	@ (8009704 <__libc_init_array+0x3c>)
 80096ce:	1b64      	subs	r4, r4, r5
 80096d0:	10a4      	asrs	r4, r4, #2
 80096d2:	2600      	movs	r6, #0
 80096d4:	42a6      	cmp	r6, r4
 80096d6:	d109      	bne.n	80096ec <__libc_init_array+0x24>
 80096d8:	4d0b      	ldr	r5, [pc, #44]	@ (8009708 <__libc_init_array+0x40>)
 80096da:	4c0c      	ldr	r4, [pc, #48]	@ (800970c <__libc_init_array+0x44>)
 80096dc:	f000 f818 	bl	8009710 <_init>
 80096e0:	1b64      	subs	r4, r4, r5
 80096e2:	10a4      	asrs	r4, r4, #2
 80096e4:	2600      	movs	r6, #0
 80096e6:	42a6      	cmp	r6, r4
 80096e8:	d105      	bne.n	80096f6 <__libc_init_array+0x2e>
 80096ea:	bd70      	pop	{r4, r5, r6, pc}
 80096ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80096f0:	4798      	blx	r3
 80096f2:	3601      	adds	r6, #1
 80096f4:	e7ee      	b.n	80096d4 <__libc_init_array+0xc>
 80096f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80096fa:	4798      	blx	r3
 80096fc:	3601      	adds	r6, #1
 80096fe:	e7f2      	b.n	80096e6 <__libc_init_array+0x1e>
 8009700:	08009740 	.word	0x08009740
 8009704:	08009740 	.word	0x08009740
 8009708:	08009740 	.word	0x08009740
 800970c:	08009744 	.word	0x08009744

08009710 <_init>:
 8009710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009712:	bf00      	nop
 8009714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009716:	bc08      	pop	{r3}
 8009718:	469e      	mov	lr, r3
 800971a:	4770      	bx	lr

0800971c <_fini>:
 800971c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971e:	bf00      	nop
 8009720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009722:	bc08      	pop	{r3}
 8009724:	469e      	mov	lr, r3
 8009726:	4770      	bx	lr
