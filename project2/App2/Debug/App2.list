
App2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000658  08008198  08008198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080087f0  080087f0  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080087f0  080087f0  0000200c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080087f0  080087f0  0000200c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080087f0  080087f0  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087f0  080087f0  000017f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080087f4  080087f4  000017f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080087f8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08008804  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08008804  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000022d9  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009b2  00000000  00000000  00004315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000330  00000000  00000000  00004cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000244  00000000  00000000  00004ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014035  00000000  00000000  0000523c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000034e2  00000000  00000000  00019271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f09c  00000000  00000000  0001c753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009b7ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b04  00000000  00000000  0009b834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0009c338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008198 <__do_global_dtors_aux>:
 8008198:	b510      	push	{r4, lr}
 800819a:	4c05      	ldr	r4, [pc, #20]	@ (80081b0 <__do_global_dtors_aux+0x18>)
 800819c:	7823      	ldrb	r3, [r4, #0]
 800819e:	b933      	cbnz	r3, 80081ae <__do_global_dtors_aux+0x16>
 80081a0:	4b04      	ldr	r3, [pc, #16]	@ (80081b4 <__do_global_dtors_aux+0x1c>)
 80081a2:	b113      	cbz	r3, 80081aa <__do_global_dtors_aux+0x12>
 80081a4:	4804      	ldr	r0, [pc, #16]	@ (80081b8 <__do_global_dtors_aux+0x20>)
 80081a6:	f3af 8000 	nop.w
 80081aa:	2301      	movs	r3, #1
 80081ac:	7023      	strb	r3, [r4, #0]
 80081ae:	bd10      	pop	{r4, pc}
 80081b0:	2000000c 	.word	0x2000000c
 80081b4:	00000000 	.word	0x00000000
 80081b8:	080087d8 	.word	0x080087d8

080081bc <frame_dummy>:
 80081bc:	b508      	push	{r3, lr}
 80081be:	4b03      	ldr	r3, [pc, #12]	@ (80081cc <frame_dummy+0x10>)
 80081c0:	b11b      	cbz	r3, 80081ca <frame_dummy+0xe>
 80081c2:	4903      	ldr	r1, [pc, #12]	@ (80081d0 <frame_dummy+0x14>)
 80081c4:	4803      	ldr	r0, [pc, #12]	@ (80081d4 <frame_dummy+0x18>)
 80081c6:	f3af 8000 	nop.w
 80081ca:	bd08      	pop	{r3, pc}
 80081cc:	00000000 	.word	0x00000000
 80081d0:	20000010 	.word	0x20000010
 80081d4:	080087d8 	.word	0x080087d8

080081d8 <LED_Init>:
typedef enum{
	OFF, ON
} LED_state;

void LED_Init()
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80081de:	2300      	movs	r3, #0
 80081e0:	603b      	str	r3, [r7, #0]
 80081e2:	4b10      	ldr	r3, [pc, #64]	@ (8008224 <LED_Init+0x4c>)
 80081e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081e6:	4a0f      	ldr	r2, [pc, #60]	@ (8008224 <LED_Init+0x4c>)
 80081e8:	f043 0308 	orr.w	r3, r3, #8
 80081ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80081ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008224 <LED_Init+0x4c>)
 80081f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081f2:	f003 0308 	and.w	r3, r3, #8
 80081f6:	603b      	str	r3, [r7, #0]
 80081f8:	683b      	ldr	r3, [r7, #0]
	// Declare GPIOD's MODER Register
	uint32_t* GPIOD_MODER = GPIOD_BASE_ADDR + 0x00;
 80081fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008228 <LED_Init+0x50>)
 80081fc:	607b      	str	r3, [r7, #4]
	// Clear pin PD12
	*GPIOD_MODER &= ~(0b11 << 24);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	601a      	str	r2, [r3, #0]
	// Set pin PD12 as OUTPUT
	*GPIOD_MODER |= (0b01 << 24);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	601a      	str	r2, [r3, #0]
}
 8008216:	bf00      	nop
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	40023800 	.word	0x40023800
 8008228:	40020c00 	.word	0x40020c00

0800822c <LED_ctrl>:

void LED_ctrl(LED_state state)
{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	4603      	mov	r3, r0
 8008234:	71fb      	strb	r3, [r7, #7]
	// Declare GPIOD's ODR Register
	uint32_t* GPIOD_ODR = GPIOD_BASE_ADDR + 0x14;
 8008236:	4b0d      	ldr	r3, [pc, #52]	@ (800826c <LED_ctrl+0x40>)
 8008238:	60fb      	str	r3, [r7, #12]
	// Set output state for pin PD12
	if (state == ON)
 800823a:	79fb      	ldrb	r3, [r7, #7]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d106      	bne.n	800824e <LED_ctrl+0x22>
	{
		*GPIOD_ODR |= (0b1 << 12);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	601a      	str	r2, [r3, #0]
	}
	else if (state == OFF)
	{
		*GPIOD_ODR &= ~(0b1 << 12);
	}
}
 800824c:	e008      	b.n	8008260 <LED_ctrl+0x34>
	else if (state == OFF)
 800824e:	79fb      	ldrb	r3, [r7, #7]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d105      	bne.n	8008260 <LED_ctrl+0x34>
		*GPIOD_ODR &= ~(0b1 << 12);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	601a      	str	r2, [r3, #0]
}
 8008260:	bf00      	nop
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr
 800826c:	40020c14 	.word	0x40020c14

08008270 <EXTI_Init>:

void EXTI_Init()
{
 8008270:	b480      	push	{r7}
 8008272:	b087      	sub	sp, #28
 8008274:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8008276:	2300      	movs	r3, #0
 8008278:	607b      	str	r3, [r7, #4]
 800827a:	4b19      	ldr	r3, [pc, #100]	@ (80082e0 <EXTI_Init+0x70>)
 800827c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800827e:	4a18      	ldr	r2, [pc, #96]	@ (80082e0 <EXTI_Init+0x70>)
 8008280:	f043 0301 	orr.w	r3, r3, #1
 8008284:	6313      	str	r3, [r2, #48]	@ 0x30
 8008286:	4b16      	ldr	r3, [pc, #88]	@ (80082e0 <EXTI_Init+0x70>)
 8008288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	607b      	str	r3, [r7, #4]
 8008290:	687b      	ldr	r3, [r7, #4]
	// Declare GPIOA's MODER Register
	uint32_t* GPIOA_MODER = (uint32_t*) (GPIOA_BASE_ADDR + 0x00);
 8008292:	4b14      	ldr	r3, [pc, #80]	@ (80082e4 <EXTI_Init+0x74>)
 8008294:	617b      	str	r3, [r7, #20]

	// Set pin PA0 as INPUT
	*GPIOA_MODER &= ~(0b11 << 0);
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f023 0203 	bic.w	r2, r3, #3
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	601a      	str	r2, [r3, #0]

	// Declare EXTI line 0's FTSR Register and set to HIGH
	uint32_t* EXTI_FTSR = (uint32_t*) (EXTI_BASE_ADDR + 0x0C);
 80082a2:	4b11      	ldr	r3, [pc, #68]	@ (80082e8 <EXTI_Init+0x78>)
 80082a4:	613b      	str	r3, [r7, #16]
	*EXTI_FTSR |= (0b1 << 0);
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f043 0201 	orr.w	r2, r3, #1
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	601a      	str	r2, [r3, #0]

	// Declare EXTI line 0's Interrupt Mask Register and set to HIGH
	uint32_t* EXTI_IMR = (uint32_t*) (EXTI_BASE_ADDR + 0x00);
 80082b2:	4b0e      	ldr	r3, [pc, #56]	@ (80082ec <EXTI_Init+0x7c>)
 80082b4:	60fb      	str	r3, [r7, #12]
	*EXTI_IMR |= (0b1 << 0);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f043 0201 	orr.w	r2, r3, #1
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	601a      	str	r2, [r3, #0]

	// Set the NVIC ISER0 at position 6 to HIGH
	uint32_t* NVIC_ISER0 = (uint32_t*) 0xE000E100;
 80082c2:	4b0b      	ldr	r3, [pc, #44]	@ (80082f0 <EXTI_Init+0x80>)
 80082c4:	60bb      	str	r3, [r7, #8]
	*NVIC_ISER0 |= (0b1 << 6);
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	601a      	str	r2, [r3, #0]
}
 80082d2:	bf00      	nop
 80082d4:	371c      	adds	r7, #28
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	40023800 	.word	0x40023800
 80082e4:	40020000 	.word	0x40020000
 80082e8:	40013c0c 	.word	0x40013c0c
 80082ec:	40013c00 	.word	0x40013c00
 80082f0:	e000e100 	.word	0xe000e100

080082f4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
	// Reset the PR Register to turn off the interrupt flag
	uint32_t* EXTI_PR = (uint32_t*) (EXTI_BASE_ADDR + 0x14);
 80082fa:	4b0e      	ldr	r3, [pc, #56]	@ (8008334 <EXTI0_IRQHandler+0x40>)
 80082fc:	60fb      	str	r3, [r7, #12]
	*EXTI_PR |= (0b1 << 0);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f043 0201 	orr.w	r2, r3, #1
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	601a      	str	r2, [r3, #0]

	// Turn off Green LED before jump
	LED_ctrl(OFF);
 800830a:	2000      	movs	r0, #0
 800830c:	f7ff ff8e 	bl	800822c <LED_ctrl>

	// Let ARM know that the vector table has been moved to 0x0800 0000 (beginning off BootLoader firmware)
	uint32_t* VTOR = (uint32_t*) 0xE000ED08;
 8008310:	4b09      	ldr	r3, [pc, #36]	@ (8008338 <EXTI0_IRQHandler+0x44>)
 8008312:	60bb      	str	r3, [r7, #8]
	*VTOR = 0x08000000;
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800831a:	601a      	str	r2, [r3, #0]

	// Jump to Reset Handler function of App1
	uint32_t* ptr = (uint32_t*) 0x08000004;
 800831c:	4b07      	ldr	r3, [pc, #28]	@ (800833c <EXTI0_IRQHandler+0x48>)
 800831e:	607b      	str	r3, [r7, #4]
	void (*pf)() = (void (*)()) *ptr;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	603b      	str	r3, [r7, #0]

	pf();
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	4798      	blx	r3
}
 800832a:	bf00      	nop
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	40013c14 	.word	0x40013c14
 8008338:	e000ed08 	.word	0xe000ed08
 800833c:	08000004 	.word	0x08000004

08008340 <main>:

int main()
{
 8008340:	b580      	push	{r7, lr}
 8008342:	af00      	add	r7, sp, #0
	HAL_Init();
 8008344:	f000 f8a8 	bl	8008498 <HAL_Init>
	LED_Init();
 8008348:	f7ff ff46 	bl	80081d8 <LED_Init>
	EXTI_Init();
 800834c:	f7ff ff90 	bl	8008270 <EXTI_Init>

	while (1)
	{
		LED_ctrl(ON);
 8008350:	2001      	movs	r0, #1
 8008352:	f7ff ff6b 	bl	800822c <LED_ctrl>
		HAL_Delay(1000);
 8008356:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800835a:	f000 f90f 	bl	800857c <HAL_Delay>
		LED_ctrl(OFF);
 800835e:	2000      	movs	r0, #0
 8008360:	f7ff ff64 	bl	800822c <LED_ctrl>
		HAL_Delay(1000);
 8008364:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008368:	f000 f908 	bl	800857c <HAL_Delay>
		LED_ctrl(ON);
 800836c:	bf00      	nop
 800836e:	e7ef      	b.n	8008350 <main+0x10>

08008370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008376:	2300      	movs	r3, #0
 8008378:	607b      	str	r3, [r7, #4]
 800837a:	4b10      	ldr	r3, [pc, #64]	@ (80083bc <HAL_MspInit+0x4c>)
 800837c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800837e:	4a0f      	ldr	r2, [pc, #60]	@ (80083bc <HAL_MspInit+0x4c>)
 8008380:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008384:	6453      	str	r3, [r2, #68]	@ 0x44
 8008386:	4b0d      	ldr	r3, [pc, #52]	@ (80083bc <HAL_MspInit+0x4c>)
 8008388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800838a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800838e:	607b      	str	r3, [r7, #4]
 8008390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008392:	2300      	movs	r3, #0
 8008394:	603b      	str	r3, [r7, #0]
 8008396:	4b09      	ldr	r3, [pc, #36]	@ (80083bc <HAL_MspInit+0x4c>)
 8008398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800839a:	4a08      	ldr	r2, [pc, #32]	@ (80083bc <HAL_MspInit+0x4c>)
 800839c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80083a2:	4b06      	ldr	r3, [pc, #24]	@ (80083bc <HAL_MspInit+0x4c>)
 80083a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083aa:	603b      	str	r3, [r7, #0]
 80083ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80083ae:	bf00      	nop
 80083b0:	370c      	adds	r7, #12
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	40023800 	.word	0x40023800

080083c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80083c0:	b480      	push	{r7}
 80083c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80083c4:	bf00      	nop
 80083c6:	e7fd      	b.n	80083c4 <NMI_Handler+0x4>

080083c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80083c8:	b480      	push	{r7}
 80083ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80083cc:	bf00      	nop
 80083ce:	e7fd      	b.n	80083cc <HardFault_Handler+0x4>

080083d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80083d0:	b480      	push	{r7}
 80083d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80083d4:	bf00      	nop
 80083d6:	e7fd      	b.n	80083d4 <MemManage_Handler+0x4>

080083d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80083d8:	b480      	push	{r7}
 80083da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80083dc:	bf00      	nop
 80083de:	e7fd      	b.n	80083dc <BusFault_Handler+0x4>

080083e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80083e0:	b480      	push	{r7}
 80083e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80083e4:	bf00      	nop
 80083e6:	e7fd      	b.n	80083e4 <UsageFault_Handler+0x4>

080083e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80083e8:	b480      	push	{r7}
 80083ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80083ec:	bf00      	nop
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80083f6:	b480      	push	{r7}
 80083f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80083fa:	bf00      	nop
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008404:	b480      	push	{r7}
 8008406:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008408:	bf00      	nop
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr

08008412 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008416:	f000 f891 	bl	800853c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800841a:	bf00      	nop
 800841c:	bd80      	pop	{r7, pc}
	...

08008420 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008420:	b480      	push	{r7}
 8008422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008424:	4b06      	ldr	r3, [pc, #24]	@ (8008440 <SystemInit+0x20>)
 8008426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800842a:	4a05      	ldr	r2, [pc, #20]	@ (8008440 <SystemInit+0x20>)
 800842c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008430:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008434:	bf00      	nop
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	e000ed00 	.word	0xe000ed00

08008444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8008444:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800847c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008448:	f7ff ffea 	bl	8008420 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800844c:	480c      	ldr	r0, [pc, #48]	@ (8008480 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800844e:	490d      	ldr	r1, [pc, #52]	@ (8008484 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008450:	4a0d      	ldr	r2, [pc, #52]	@ (8008488 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008454:	e002      	b.n	800845c <LoopCopyDataInit>

08008456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800845a:	3304      	adds	r3, #4

0800845c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800845c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800845e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008460:	d3f9      	bcc.n	8008456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008462:	4a0a      	ldr	r2, [pc, #40]	@ (800848c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008464:	4c0a      	ldr	r4, [pc, #40]	@ (8008490 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008468:	e001      	b.n	800846e <LoopFillZerobss>

0800846a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800846a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800846c:	3204      	adds	r2, #4

0800846e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800846e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008470:	d3fb      	bcc.n	800846a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008472:	f000 f98d 	bl	8008790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008476:	f7ff ff63 	bl	8008340 <main>
  bx  lr    
 800847a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800847c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008484:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8008488:	080087f8 	.word	0x080087f8
  ldr r2, =_sbss
 800848c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8008490:	2000002c 	.word	0x2000002c

08008494 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008494:	e7fe      	b.n	8008494 <ADC_IRQHandler>
	...

08008498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800849c:	4b0e      	ldr	r3, [pc, #56]	@ (80084d8 <HAL_Init+0x40>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a0d      	ldr	r2, [pc, #52]	@ (80084d8 <HAL_Init+0x40>)
 80084a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80084a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80084a8:	4b0b      	ldr	r3, [pc, #44]	@ (80084d8 <HAL_Init+0x40>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a0a      	ldr	r2, [pc, #40]	@ (80084d8 <HAL_Init+0x40>)
 80084ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80084b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80084b4:	4b08      	ldr	r3, [pc, #32]	@ (80084d8 <HAL_Init+0x40>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a07      	ldr	r2, [pc, #28]	@ (80084d8 <HAL_Init+0x40>)
 80084ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80084c0:	2003      	movs	r0, #3
 80084c2:	f000 f931 	bl	8008728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80084c6:	200f      	movs	r0, #15
 80084c8:	f000 f808 	bl	80084dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80084cc:	f7ff ff50 	bl	8008370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	40023c00 	.word	0x40023c00

080084dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80084e4:	4b12      	ldr	r3, [pc, #72]	@ (8008530 <HAL_InitTick+0x54>)
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	4b12      	ldr	r3, [pc, #72]	@ (8008534 <HAL_InitTick+0x58>)
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	4619      	mov	r1, r3
 80084ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80084f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80084f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 f93b 	bl	8008776 <HAL_SYSTICK_Config>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e00e      	b.n	8008528 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b0f      	cmp	r3, #15
 800850e:	d80a      	bhi.n	8008526 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008510:	2200      	movs	r2, #0
 8008512:	6879      	ldr	r1, [r7, #4]
 8008514:	f04f 30ff 	mov.w	r0, #4294967295
 8008518:	f000 f911 	bl	800873e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800851c:	4a06      	ldr	r2, [pc, #24]	@ (8008538 <HAL_InitTick+0x5c>)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	e000      	b.n	8008528 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
}
 8008528:	4618      	mov	r0, r3
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	20000000 	.word	0x20000000
 8008534:	20000008 	.word	0x20000008
 8008538:	20000004 	.word	0x20000004

0800853c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800853c:	b480      	push	{r7}
 800853e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008540:	4b06      	ldr	r3, [pc, #24]	@ (800855c <HAL_IncTick+0x20>)
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	461a      	mov	r2, r3
 8008546:	4b06      	ldr	r3, [pc, #24]	@ (8008560 <HAL_IncTick+0x24>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4413      	add	r3, r2
 800854c:	4a04      	ldr	r2, [pc, #16]	@ (8008560 <HAL_IncTick+0x24>)
 800854e:	6013      	str	r3, [r2, #0]
}
 8008550:	bf00      	nop
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	20000008 	.word	0x20000008
 8008560:	20000028 	.word	0x20000028

08008564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008564:	b480      	push	{r7}
 8008566:	af00      	add	r7, sp, #0
  return uwTick;
 8008568:	4b03      	ldr	r3, [pc, #12]	@ (8008578 <HAL_GetTick+0x14>)
 800856a:	681b      	ldr	r3, [r3, #0]
}
 800856c:	4618      	mov	r0, r3
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	20000028 	.word	0x20000028

0800857c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008584:	f7ff ffee 	bl	8008564 <HAL_GetTick>
 8008588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008594:	d005      	beq.n	80085a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008596:	4b0a      	ldr	r3, [pc, #40]	@ (80085c0 <HAL_Delay+0x44>)
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	4413      	add	r3, r2
 80085a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80085a2:	bf00      	nop
 80085a4:	f7ff ffde 	bl	8008564 <HAL_GetTick>
 80085a8:	4602      	mov	r2, r0
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d8f7      	bhi.n	80085a4 <HAL_Delay+0x28>
  {
  }
}
 80085b4:	bf00      	nop
 80085b6:	bf00      	nop
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	20000008 	.word	0x20000008

080085c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80085d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008608 <__NVIC_SetPriorityGrouping+0x44>)
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80085e0:	4013      	ands	r3, r2
 80085e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80085ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80085f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80085f6:	4a04      	ldr	r2, [pc, #16]	@ (8008608 <__NVIC_SetPriorityGrouping+0x44>)
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	60d3      	str	r3, [r2, #12]
}
 80085fc:	bf00      	nop
 80085fe:	3714      	adds	r7, #20
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr
 8008608:	e000ed00 	.word	0xe000ed00

0800860c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800860c:	b480      	push	{r7}
 800860e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008610:	4b04      	ldr	r3, [pc, #16]	@ (8008624 <__NVIC_GetPriorityGrouping+0x18>)
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	0a1b      	lsrs	r3, r3, #8
 8008616:	f003 0307 	and.w	r3, r3, #7
}
 800861a:	4618      	mov	r0, r3
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr
 8008624:	e000ed00 	.word	0xe000ed00

08008628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	4603      	mov	r3, r0
 8008630:	6039      	str	r1, [r7, #0]
 8008632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008638:	2b00      	cmp	r3, #0
 800863a:	db0a      	blt.n	8008652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	b2da      	uxtb	r2, r3
 8008640:	490c      	ldr	r1, [pc, #48]	@ (8008674 <__NVIC_SetPriority+0x4c>)
 8008642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008646:	0112      	lsls	r2, r2, #4
 8008648:	b2d2      	uxtb	r2, r2
 800864a:	440b      	add	r3, r1
 800864c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008650:	e00a      	b.n	8008668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	b2da      	uxtb	r2, r3
 8008656:	4908      	ldr	r1, [pc, #32]	@ (8008678 <__NVIC_SetPriority+0x50>)
 8008658:	79fb      	ldrb	r3, [r7, #7]
 800865a:	f003 030f 	and.w	r3, r3, #15
 800865e:	3b04      	subs	r3, #4
 8008660:	0112      	lsls	r2, r2, #4
 8008662:	b2d2      	uxtb	r2, r2
 8008664:	440b      	add	r3, r1
 8008666:	761a      	strb	r2, [r3, #24]
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr
 8008674:	e000e100 	.word	0xe000e100
 8008678:	e000ed00 	.word	0xe000ed00

0800867c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800867c:	b480      	push	{r7}
 800867e:	b089      	sub	sp, #36	@ 0x24
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f003 0307 	and.w	r3, r3, #7
 800868e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	f1c3 0307 	rsb	r3, r3, #7
 8008696:	2b04      	cmp	r3, #4
 8008698:	bf28      	it	cs
 800869a:	2304      	movcs	r3, #4
 800869c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	3304      	adds	r3, #4
 80086a2:	2b06      	cmp	r3, #6
 80086a4:	d902      	bls.n	80086ac <NVIC_EncodePriority+0x30>
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	3b03      	subs	r3, #3
 80086aa:	e000      	b.n	80086ae <NVIC_EncodePriority+0x32>
 80086ac:	2300      	movs	r3, #0
 80086ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086b0:	f04f 32ff 	mov.w	r2, #4294967295
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	fa02 f303 	lsl.w	r3, r2, r3
 80086ba:	43da      	mvns	r2, r3
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	401a      	ands	r2, r3
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80086c4:	f04f 31ff 	mov.w	r1, #4294967295
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	fa01 f303 	lsl.w	r3, r1, r3
 80086ce:	43d9      	mvns	r1, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086d4:	4313      	orrs	r3, r2
         );
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3724      	adds	r7, #36	@ 0x24
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
	...

080086e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	3b01      	subs	r3, #1
 80086f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086f4:	d301      	bcc.n	80086fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80086f6:	2301      	movs	r3, #1
 80086f8:	e00f      	b.n	800871a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80086fa:	4a0a      	ldr	r2, [pc, #40]	@ (8008724 <SysTick_Config+0x40>)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	3b01      	subs	r3, #1
 8008700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008702:	210f      	movs	r1, #15
 8008704:	f04f 30ff 	mov.w	r0, #4294967295
 8008708:	f7ff ff8e 	bl	8008628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800870c:	4b05      	ldr	r3, [pc, #20]	@ (8008724 <SysTick_Config+0x40>)
 800870e:	2200      	movs	r2, #0
 8008710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008712:	4b04      	ldr	r3, [pc, #16]	@ (8008724 <SysTick_Config+0x40>)
 8008714:	2207      	movs	r2, #7
 8008716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	e000e010 	.word	0xe000e010

08008728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7ff ff47 	bl	80085c4 <__NVIC_SetPriorityGrouping>
}
 8008736:	bf00      	nop
 8008738:	3708      	adds	r7, #8
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800873e:	b580      	push	{r7, lr}
 8008740:	b086      	sub	sp, #24
 8008742:	af00      	add	r7, sp, #0
 8008744:	4603      	mov	r3, r0
 8008746:	60b9      	str	r1, [r7, #8]
 8008748:	607a      	str	r2, [r7, #4]
 800874a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800874c:	2300      	movs	r3, #0
 800874e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008750:	f7ff ff5c 	bl	800860c <__NVIC_GetPriorityGrouping>
 8008754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	68b9      	ldr	r1, [r7, #8]
 800875a:	6978      	ldr	r0, [r7, #20]
 800875c:	f7ff ff8e 	bl	800867c <NVIC_EncodePriority>
 8008760:	4602      	mov	r2, r0
 8008762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008766:	4611      	mov	r1, r2
 8008768:	4618      	mov	r0, r3
 800876a:	f7ff ff5d 	bl	8008628 <__NVIC_SetPriority>
}
 800876e:	bf00      	nop
 8008770:	3718      	adds	r7, #24
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b082      	sub	sp, #8
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7ff ffb0 	bl	80086e4 <SysTick_Config>
 8008784:	4603      	mov	r3, r0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
	...

08008790 <__libc_init_array>:
 8008790:	b570      	push	{r4, r5, r6, lr}
 8008792:	4d0d      	ldr	r5, [pc, #52]	@ (80087c8 <__libc_init_array+0x38>)
 8008794:	4c0d      	ldr	r4, [pc, #52]	@ (80087cc <__libc_init_array+0x3c>)
 8008796:	1b64      	subs	r4, r4, r5
 8008798:	10a4      	asrs	r4, r4, #2
 800879a:	2600      	movs	r6, #0
 800879c:	42a6      	cmp	r6, r4
 800879e:	d109      	bne.n	80087b4 <__libc_init_array+0x24>
 80087a0:	4d0b      	ldr	r5, [pc, #44]	@ (80087d0 <__libc_init_array+0x40>)
 80087a2:	4c0c      	ldr	r4, [pc, #48]	@ (80087d4 <__libc_init_array+0x44>)
 80087a4:	f000 f818 	bl	80087d8 <_init>
 80087a8:	1b64      	subs	r4, r4, r5
 80087aa:	10a4      	asrs	r4, r4, #2
 80087ac:	2600      	movs	r6, #0
 80087ae:	42a6      	cmp	r6, r4
 80087b0:	d105      	bne.n	80087be <__libc_init_array+0x2e>
 80087b2:	bd70      	pop	{r4, r5, r6, pc}
 80087b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80087b8:	4798      	blx	r3
 80087ba:	3601      	adds	r6, #1
 80087bc:	e7ee      	b.n	800879c <__libc_init_array+0xc>
 80087be:	f855 3b04 	ldr.w	r3, [r5], #4
 80087c2:	4798      	blx	r3
 80087c4:	3601      	adds	r6, #1
 80087c6:	e7f2      	b.n	80087ae <__libc_init_array+0x1e>
 80087c8:	080087f0 	.word	0x080087f0
 80087cc:	080087f0 	.word	0x080087f0
 80087d0:	080087f0 	.word	0x080087f0
 80087d4:	080087f4 	.word	0x080087f4

080087d8 <_init>:
 80087d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087da:	bf00      	nop
 80087dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087de:	bc08      	pop	{r3}
 80087e0:	469e      	mov	lr, r3
 80087e2:	4770      	bx	lr

080087e4 <_fini>:
 80087e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e6:	bf00      	nop
 80087e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ea:	bc08      	pop	{r3}
 80087ec:	469e      	mov	lr, r3
 80087ee:	4770      	bx	lr
